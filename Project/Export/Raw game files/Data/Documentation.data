DocumentationLibrary = 
{
	Array Classes = 
	[
		{
			string Name = "Action",
			string BaseClass = "",
			string Description = "Base action class.",
			Array Methods = 
			[
				{
					string Name = "Cancel",
					string Description = "Cancel the action and all child actions.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Completed",
					string Description = "The action ran until it completed.",
					string Type = "bool",
				},
				{
					string Name = "Active",
					string Description = "The action is queued and not stared or running.",
					string Type = "bool",
				},
				{
					string Name = "Started",
					string Description = "Has the action started?",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "SpriteSource",
			string BaseClass = "TextureRegion",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetSize",
					string Description = "",
					string ReturnValue = "Vec2",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOrigin",
					string Description = "",
					string ReturnValue = "Vec2",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "FrameCount",
					string Description = "",
					string Type = "Integer",
				},
				{
					string Name = "FrameRate",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "PixelsPerUnit",
					string Description = "",
					string Type = "Real",
				},
				{
					string Name = "Smoothing",
					string Description = "",
					string Type = "Boolean",
				},
				{
					string Name = "Looping",
					string Description = "",
					string Type = "Boolean",
				},
				{
					string Name = "Fill",
					string Description = "",
					string Type = "Integer",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "Mesh",
			string BaseClass = "Resource",
			string Description = "Mesh resource class. Contains hardware vertex buffer and index buffer.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetVertexCount",
					string Description = "The amount of vertices on the mesh.",
					string ReturnValue = "uint",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetTriangleCount",
					string Description = "The amount of triangles on the mesh.",
					string ReturnValue = "uint",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetVertexIndex",
					string Description = "",
					string ReturnValue = "uint",
					string Arguments = "(uint triIndex)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "triIndex",
						},
					],
				},
				{
					string Name = "GetVec2Attribute",
					string Description = "Vertex attribute getters.",
					string ReturnValue = "Vec2",
					string Arguments = "(uint index, VertexSemantic::Enum attribute)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
						{
							string Type = "VertexSemantic::Enum",
							string Name = "attribute",
						},
					],
				},
				{
					string Name = "GetVec3Attribute",
					string Description = "",
					string ReturnValue = "Vec3",
					string Arguments = "(uint index, VertexSemantic::Enum attribute)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
						{
							string Type = "VertexSemantic::Enum",
							string Name = "attribute",
						},
					],
				},
				{
					string Name = "GetVec4Attribute",
					string Description = "",
					string ReturnValue = "Vec4",
					string Arguments = "(uint index, VertexSemantic::Enum attribute)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
						{
							string Type = "VertexSemantic::Enum",
							string Name = "attribute",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "FlowEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a force to make an object move at a target speed in a given direction. This can also be used to pull the object towards the center of the flow(center of a flow is the center perpendicular to the flow direction). Used to model a river or a tractor beam.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "LocalForce",
					string Description = "Determines if the flow direction is in the local space of the object.",
					string Type = "bool",
				},
				{
					string Name = "AttractToFlowCenter",
					string Description = "Determines if the flow field will attract objects towards the center of the field. This can be used to create a tractor beam effect that will keep the object inside of the flow field.",
					string Type = "bool",
				},
				{
					string Name = "FlowSpeed",
					string Description = "The target speed of objects in the flow field.",
					string Type = "float",
				},
				{
					string Name = "MaxFlowForce",
					string Description = "The max strength of the force that can be applied in a frame to reach the target flow speed.",
					string Type = "float",
				},
				{
					string Name = "FlowDirection",
					string Description = "The direction that the field is flowing. This can be defined in world or local space.",
					string Type = "Vec3",
				},
				{
					string Name = "AttractSpeed",
					string Description = "The target speed for an object to be pulled towards the center of the flow.",
					string Type = "float",
				},
				{
					string Name = "MaxAttractForce",
					string Description = "The max strength of the force that will pull the object towards the center of the flow field.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "ConvexMeshCollider",
			string BaseClass = "Collider",
			string Description = "Convex Mesh Collider is a collision primitive for colliding with a convex triangle mesh that can move but not deform.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
				{
					string Name = "ConvexMesh",
					string Description = "The convex mesh resource that defines the collision volume of this collider.",
					string Type = "ConvexMesh",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "MultiConvexMesh",
			string BaseClass = "Resource",
			string Description = "Represents a collection of convex meshes that was decomposed from a mesh.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
		},
		{
			string Name = "BaseSprite",
			string BaseClass = "Graphical",
			string Description = "Base Sprite class for common sprite properties and sorting.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "Color",
					string Description = "Modulation color of this sprite.",
					string Type = "Vec4",
				},
				{
					string Name = "BlendMode",
					string Description = "Blend Mode of the sprite.",
					string Type = "BlendMode::Type",
				},
				{
					string Name = "GeometryMode",
					string Description = "Geometry mode determines how the sprite is mapped to 3d.",
					string Type = "SpriteGeometryMode::Type",
				},
				{
					string Name = "SpriteLayer",
					string Description = "",
					string Type = "SpriteLayer",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "SpriteAnimationEnded",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "LevelPath",
			string BaseClass = "Component",
			string Description = "A path that is anchored in the level that an object is able to follow.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddPoint",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Path",
					string Description = "The path resource that can be followed and modified.",
					string Type = "Path",
				},
				{
					string Name = "Closed",
					string Description = "Does the path loop back on itself?",
					string Type = "bool",
				},
				{
					string Name = "DebugDraw",
					string Description = "Should the path draw every frame? Mainly used for debugging purposes so the intended path can be seen while an object moves.",
					string Type = "bool",
				},
				{
					string Name = "Error",
					string Description = "The max number of units that a line segment is allowed to deviate from the curve.",
					string Type = "float",
				},
				{
					string Name = "CurveType",
					string Description = "The kind of path(Linear, BSpline, CatmulRom). Determines how the control points affect the curve.",
					string Type = "uint",
				},
				{
					string Name = "DisplayProxyControlPoints",
					string Description = "Should the proxy control points be displayed? Used for debugging purposes.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "NetUserCreator",
			string BaseClass = "Component",
			string Description = "Network User Creator Creates a network user on add request(intended as a helper component)",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "SpawnSpace",
					string Description = "Data.",
					string Type = "String",
				},
				{
					string Name = "UserArchetype",
					string Description = "Returns the network user archetype to be spawned when accepting a new user.",
					string Type = "Archetype",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Networking",
				"Component",
			],
		},
		{
			string Name = "ForceEffect",
			string BaseClass = "BasicDirectionEffect",
			string Description = "A force effect that is applied in a given direction(local or world space). This is used to create force regions that will push objects in a given direction. This can also be used on a rigid body to push an object in it's forward direction(e.g a missile) if applied locally. Note, this is always applied at the center of mass of the object. If a more rocket like effect is desired see ThrustEffect.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "LocalSpaceDirection",
					string Description = "Determines if the direction that the effect is applied is in local or world space. The length of this vector is preserved when applying the force(non-normalized vectors will change the strength).",
					string Type = "bool",
				},
				{
					string Name = "Strength",
					string Description = "An extra scalar multiplier to change the magnitude of the applied effect.",
					string Type = "float",
				},
				{
					string Name = "Direction",
					string Description = "The direction that the effect will be applied in(may be in local or world space depending on the LocalSpaceDirection property).",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "AmbientLight",
			string BaseClass = "Component",
			string Description = "component that provides ambient light",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Color",
					string Description = "Color of the ambient light.",
					string Type = "Vec4",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Rendering",
			],
		},
		{
			string Name = "Font",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "StickJoint",
			string BaseClass = "Joint",
			string Description = "A stick joint is used to simulate a rope or a stick. This joint forces a constant distance between the anchor points on the objects. If there is no limit, this behaves as a stick. If there is a limit, then this behaves as a rope. Motors and springs are also applied to the axis of the rope. Add on definitions: Limit: A limit will provide a min/max distance that the anchors can be between. Motor: A motor will push/pull the objects in the direction of the rope. The motor will not have any effect unless a limit or spring is present. Spring: A spring will make the rope behave springlike at its boundaries.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "Length",
					string Description = "The desired length between the anchor points of object A and B.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "CustomPhysicsEffectEvent",
			string BaseClass = "Event",
			string Description = "Event data for applying custom physics effects.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Dt",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Effect",
					string Description = "",
					string Type = "CustomPhysicsEffect",
				},
				{
					string Name = "RigidBody",
					string Description = "",
					string Type = "RigidBody",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "GridDraw",
			string BaseClass = "Component",
			string Description = "A component used for drawing a grid.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Axis",
					string Description = "",
					string Type = "GridAxis::Type",
				},
				{
					string Name = "CellSize",
					string Description = "The deltas in the grid(how far apart we draw grid lines)",
					string Type = "float",
				},
				{
					string Name = "Lines",
					string Description = "The number of lines to draw.",
					string Type = "int",
				},
				{
					string Name = "HilightInterval",
					string Description = "How often should cells be activated.",
					string Type = "int",
				},
				{
					string Name = "GridColor",
					string Description = "Color of grid lines.",
					string Type = "Vec4",
				},
				{
					string Name = "GridHiLight",
					string Description = "",
					string Type = "Vec4",
				},
				{
					string Name = "HalfCellOffset",
					string Description = "Is the grid offset by half a unit?",
					string Type = "bool",
				},
				{
					string Name = "DrawAxisOrigins",
					string Description = "Changes the line color to.",
					string Type = "bool",
				},
				{
					string Name = "AlwaysDrawInEditor",
					string Description = "Always draw the grid in editor(not just when it's selected)",
					string Type = "bool",
				},
				{
					string Name = "DrawInGame",
					string Description = "Draw the grid in the game.",
					string Type = "bool",
				},
				{
					string Name = "FollowEditorCamera",
					string Description = "Move with the editor camera?",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "DynamicModel",
			string BaseClass = "Graphical",
			string Description = "DynamicModel is used to render dynamic meshes that are constantly updated(Cloth, Etc) or dynamical generated.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "Material",
					string Description = "",
					string Type = "Material",
				},
				{
					string Name = "Color",
					string Description = "",
					string Type = "Vec4",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "LockStepKeyEvent",
			string BaseClass = "LockStepEvent",
			string Description = "A synced keyboard event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Peer",
					string Description = "",
					string Type = "LockStepPeer",
				},
				{
					string Name = "Key",
					string Description = "Key that was changed.",
					string Type = "uint",
				},
				{
					string Name = "KeyDown",
					string Description = "State of the key.",
					string Type = "bool",
				},
				{
					string Name = "ShiftPressed",
					string Description = "Is shift pressed with this key?",
					string Type = "bool",
				},
				{
					string Name = "AltPressed",
					string Description = "Is alt pressed with this key?",
					string Type = "bool",
				},
				{
					string Name = "CtrlPressed",
					string Description = "Is ctrl pressed with this key?",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "IpAddress",
			string BaseClass = "",
			string Description = "IPv4/IPv6 network host identifier Provided for convenience Note: This class is not slice-able, it has extra data.",
			Array Methods = 
			[
				{
					string Name = "Clear",
					string Description = "Clears the IP address.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "IsValid",
					string Description = "Returns true if this is a non-empty IPv4/IPv6 address, else false.",
					string Type = "bool",
				},
				{
					string Name = "InternetProtocol",
					string Description = "Returns the valid IP address protocol version, else InternetProtocol::Unspecified.",
					string Type = "InternetProtocol::Enum",
				},
				{
					string Name = "String",
					string Description = "Returns the valid IP address as a numeric""host:port"" string, else String()",
					string Type = "const",
				},
				{
					string Name = "Hash",
					string Description = "Returns the valid IP address as a hash value, else 0.",
					string Type = "size_t",
				},
				{
					string Name = "Host",
					string Description = "Returns the valid IP address host as a numeric string, else String()",
					string Type = "String",
				},
				{
					string Name = "Port",
					string Description = "Returns the valid IP address port, else 0.",
					string Type = "uint",
				},
				{
					string Name = "PortString",
					string Description = "Returns the valid IP address port as a numeric string, else String()",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "JointEvent",
			string BaseClass = "Event",
			string Description = "Sent out when a joint signals some kind of event. For example, when a joint exceeds its force limit or when a joint hits a limit.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "ObjectA",
					string Description = "Get the ObjectA that was connected in the joint.",
					string Type = "Cog",
				},
				{
					string Name = "ObjectB",
					string Description = "Get the ObjectB that was connected in the joint.",
					string Type = "Cog",
				},
				{
					string Name = "JointCog",
					string Description = "Returns the Owner of the Joint that signaled the event.",
					string Type = "Cog",
				},
				{
					string Name = "Joint",
					string Description = "The joint that triggered the event.",
					string Type = "Joint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Event",
			],
		},
		{
			string Name = "LockStepGamepadButtonEvent",
			string BaseClass = "LockStepGamepadEvent",
			string Description = "A synced gamepad button event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Peer",
					string Description = "",
					string Type = "LockStepPeer",
				},
				{
					string Name = "Index",
					string Description = "The index of the gamepad that was activated or deactivated.",
					string Type = "uint",
				},
				{
					string Name = "Button",
					string Description = "The gamepad button that was changed.",
					string Type = "int",
				},
				{
					string Name = "ButtonDown",
					string Description = "State of the gamepad button(if it was down or not)",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "DocumentResource",
			string BaseClass = "Resource",
			string Description = "Resource that can be edited as text and is searchable.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "UprightJoint",
			string BaseClass = "Joint",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalAxisA",
					string Description = "The locally defined axis on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAxisB",
					string Description = "The locally defined axis on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldAxis",
					string Description = "The axis in world space that is being rotated about.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "NetPeerReceivedConnectRequest",
			string BaseClass = "Event",
			string Description = "Dispatched after receiving a connect request If accepted, their net peer ID is assigned immediately after this Return true to accept the connect request, else false.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Data.",
					string Type = "IpAddress",
				},
				{
					string Name = "TheirRequestBundle",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "EventBundle",
				},
				{
					string Name = "TheirPendingUserAddRequestCount",
					string Description = "Their bundled request event data.",
					string Type = "uint",
				},
				{
					string Name = "OurIpAddress",
					string Description = "Their pending user add requests following this connect request(within the same frame)",
					string Type = "IpAddress",
				},
				{
					string Name = "ReturnOurConnectResponse",
					string Description = "Our IP address(as seen from their perspective)",
					string Type = "bool",
				},
				{
					string Name = "ReturnOurResponseBundle",
					string Description = "Return: Our connect response(accept the connect request?)",
					string Type = "EventBundle",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "Gamepads",
			string BaseClass = "ZeroObject",
			string Description = "Gamepads is a collection of gamepads.",
			Array Methods = 
			[
				{
					string Name = "PauseVibration",
					string Description = "Pause Vibration on all gamepads.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ResumeVibration",
					string Description = "Resume vibration on all gamepads.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetGamePad",
					string Description = "Get the gamepad for a given index from[0, GamepadCount].",
					string ReturnValue = "Gamepad",
					string Arguments = "(uint gamepadIndex)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "gamepadIndex",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "MaxGamepadCount",
					string Description = "Gets the maximum number of supported gamepads.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "GamepadsUpdated",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "ManipulatorJoint",
			string BaseClass = "Joint",
			string Description = "A position joint that is designed to manipulate one object. The only difference between this and the position joint is that the manipulator always draws itself, draws differently, and configures the max force differently.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "TargetPoint",
					string Description = "The point in world space that the object's point is being moved towards.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPoint",
					string Description = "The local space point on the object that the joint is connected to.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPoint",
					string Description = "The world space point on the object that the joint is connected to.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "TorqueEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a general torque to the object(objects will act differently based on their mass).",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "LocalTorque",
					string Description = "Determines if the directional torque is applied in world space or locally.",
					string Type = "bool",
				},
				{
					string Name = "TorqueStrength",
					string Description = "The strength of the torque force being applied.",
					string Type = "float",
				},
				{
					string Name = "TorqueDirection",
					string Description = "The direction that the torque is being applied about.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "LockStepEvent",
			string BaseClass = "SendableEvent",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Peer",
					string Description = "",
					string Type = "LockStepPeer",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "SkinnedModel",
			string BaseClass = "Graphical",
			string Description = "Model that used bones to deform a mesh.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "Material",
					string Description = "Material for skinned Model.",
					string Type = "Material",
				},
				{
					string Name = "Mesh",
					string Description = "Mesh for skinned Model.",
					string Type = "Mesh",
				},
				{
					string Name = "Color",
					string Description = "Color for skinned Model.",
					string Type = "Vec4",
				},
				{
					string Name = "BoundingCenter",
					string Description = "Center of the bounding box used for culling.",
					string Type = "Vec3",
				},
				{
					string Name = "BoundingExtents",
					string Description = "Extents of the bounding box used for culling.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "BuoyancyEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a buoyancy force to an object in a given direction.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "Density",
					string Description = "The density of the fluid.",
					string Type = "float",
				},
				{
					string Name = "Gravity",
					string Description = "The direction of gravity.",
					string Type = "Vec3",
				},
				{
					string Name = "Detail",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "DebugDraw",
					string Description = "Draw the points used to compute the buoyancy during run-time. This helps in debugging, but should be left off during normal run.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "IgnoreSpaceEffects",
			string BaseClass = "Component",
			string Description = "Tells a cog to ignore certain effects on the space/level. Used to special case objects to ignore things such as drag or gravity.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "IgnoreDrag",
					string Description = "Whether or not to ignore drag effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnoreFlow",
					string Description = "Whether or not to ignore flow effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnoreForce",
					string Description = "Whether or not to ignore force effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnoreGravity",
					string Description = "Whether or not to ignore gravity effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnorePointForce",
					string Description = "Whether or not to ignore point force effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnorePointGravity",
					string Description = "Whether or not to ignore point gravity effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnoreThrust",
					string Description = "Whether or not to ignore thrust effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnoreVortex",
					string Description = "Whether or not to ignore vortex effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnoreWind",
					string Description = "Whether or not to ignore wind effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnoreTorque",
					string Description = "Whether or not to ignore torque effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnoreBuoyancy",
					string Description = "Whether or not to ignore buoyancy effects.",
					string Type = "bool",
				},
				{
					string Name = "IgnoreCustom",
					string Description = "Whether or not to ignore custom effects.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "LockStepMouseButtonEvent",
			string BaseClass = "LockStepMouseEvent",
			string Description = "A synced mouse event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Peer",
					string Description = "",
					string Type = "LockStepPeer",
				},
				{
					string Name = "WorldStart",
					string Description = "The start of the mouse position in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldDirection",
					string Description = "The direction of the mouse position in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "ScreenPosition",
					string Description = "A screen position of the mouse from[0, 1] on each axis where[0, 0] is the top left,[1, 1] is the bottom right.",
					string Type = "Vec2",
				},
				{
					string Name = "ScreenDelta",
					string Description = "The motion of the mouse on the screen(see ScreenPosition)",
					string Type = "Vec2",
				},
				{
					string Name = "LeftPressed",
					string Description = "Is the left mouse button down?",
					string Type = "bool",
				},
				{
					string Name = "MiddlePressed",
					string Description = "Is the middle mouse button down?",
					string Type = "bool",
				},
				{
					string Name = "RightPressed",
					string Description = "Is the right mouse button down?",
					string Type = "bool",
				},
				{
					string Name = "ShiftPressed",
					string Description = "Is shift pressed with this mouse action?",
					string Type = "bool",
				},
				{
					string Name = "AltPressed",
					string Description = "Is alt pressed with this mouse action?",
					string Type = "bool",
				},
				{
					string Name = "CtrlPressed",
					string Description = "Is ctrl pressed with this mouse action?",
					string Type = "bool",
				},
				{
					string Name = "Button",
					string Description = "The mouse button that was changed.",
					string Type = "MouseButtons::Type",
				},
				{
					string Name = "ButtonDown",
					string Description = "State of the mouse button(if it was down or not)",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "SpriteText",
			string BaseClass = "BaseSprite",
			string Description = "Sprite Text is sprite based text box.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "MeasureText",
					string Description = "Get the size of the text block.",
					string ReturnValue = "Vec2",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "MeasureGivenText",
					string Description = "Get the size that the sprite text would be if this was its text.",
					string ReturnValue = "Vec2",
					string Arguments = "(String text) const",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "text",
						},
					],
				},
				{
					string Name = "GetCharacterPosition",
					string Description = "Get position of character in world space.",
					string ReturnValue = "Vec3",
					string Arguments = "(int a)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "a",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "Color",
					string Description = "Modulation color of this sprite.",
					string Type = "Vec4",
				},
				{
					string Name = "BlendMode",
					string Description = "Blend Mode of the sprite.",
					string Type = "BlendMode::Type",
				},
				{
					string Name = "GeometryMode",
					string Description = "Geometry mode determines how the sprite is mapped to 3d.",
					string Type = "SpriteGeometryMode::Type",
				},
				{
					string Name = "SpriteLayer",
					string Description = "",
					string Type = "SpriteLayer",
				},
				{
					string Name = "Font",
					string Description = "Font used to display the text.",
					string Type = "Font",
				},
				{
					string Name = "FontSize",
					string Description = "Font size for the text.",
					string Type = "uint",
				},
				{
					string Name = "Text",
					string Description = "Text to Display.",
					string Type = "String",
				},
				{
					string Name = "PixelsPerUnit",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Smoothing",
					string Description = "Smoothing.",
					string Type = "bool",
				},
				{
					string Name = "Align",
					string Description = "Text alignment in the box.",
					string Type = "TextAlign::Type",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "SpriteAnimationEnded",
					string EventType = "ObjectEvent",
				},
				{
					string EventName = "SpriteTextChanged",
					string EventType = "TextEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "PhysicsCarWheel",
			string BaseClass = "Component",
			string Description = "A wheel for a high speed physics based car. Used to manage the connection to the car body. The wheel contains most of the properties about how it interacts(eg. spring forces, friction etc).",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "EditBasis",
					string Description = "Spawns a proxy transform object so that the basis of the car can be set.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SetWheelBasis",
					string Description = "Sets what directions the forward, axle and spring are on the wheel. The forward direction is taken from the x-axis of the basis passed in. Likewise the axle is from the y-axis and the spring is from the z-axis. Use BuildFromBases on quaternion to construct this.",
					string ReturnValue = "void",
					string Arguments = "(QuatParam basis)",
					Array ParsedArguments = 
					[
						{
							string Type = "QuatParam",
							string Name = "basis",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "CarBody",
					string Description = "The PhysicsCar component that this wheel drives/operates this wheel.",
					string Type = "PhysicsCar",
				},
				{
					string Name = "SpringMin",
					string Description = "The minimum length of the spring of the wheel. If a wheel cast hits an object at a time before min but after start then the wheel will still collide with this object but the spring forces and visuals will be at the min spring length. This is useful for putting the starting raycast position inside of the object so as to avoid tunneling but still having the wheel only visually display where it should.",
					string Type = "float",
				},
				{
					string Name = "SpringStart",
					string Description = "The t value to start the raycast at. This t value is 0 at the wheel position and travels in the direction of the wheel spring direction. This value is useful to modify where the start of the raycast is in conjunction with the min flag to help ensure that the start position is never inside of an object due to tunneling.",
					string Type = "float",
				},
				{
					string Name = "SpringMax",
					string Description = "The maximum length of the spring of the wheel. If the wheel hits something further away than this length(plus the wheel radius) then that object will be ignored.",
					string Type = "float",
				},
				{
					string Name = "SpringRest",
					string Description = "The rest length of the spring.",
					string Type = "float",
				},
				{
					string Name = "DriveFactor",
					string Description = "Used to alter the direction this wheel turns when the motor receives power. Mostly should only be set to 1 or-1. Useful if you want to cause a wheel to temporarily rotate backwards without having to change it's basis.",
					string Type = "float",
				},
				{
					string Name = "SteerFactor",
					string Description = "How much this wheel steers.[0:1] where 1 is the max steering of the car.",
					string Type = "float",
				},
				{
					string Name = "Radius",
					string Description = "The radius of the wheel.",
					string Type = "float",
				},
				{
					string Name = "FrequencyHz",
					string Description = "The frequency at which the spring of this wheel oscillates per second.",
					string Type = "float",
				},
				{
					string Name = "DampeningCompressionRatio",
					string Description = "The dampening ratio when the spring is compressing(0: no dampening, 1 critical dampening)",
					string Type = "float",
				},
				{
					string Name = "DampeningRelaxationRatio",
					string Description = "The dampening ratio when the spring is relaxing(0: no dampening, 1 critical dampening)",
					string Type = "float",
				},
				{
					string Name = "MaxSpringForce",
					string Description = "The maximum force that the wheel's spring can exert.",
					string Type = "float",
				},
				{
					string Name = "MaxBrakeStrength",
					string Description = "The max force that this wheel can exert with its breaks.",
					string Type = "float",
				},
				{
					string Name = "IsDriveWheel",
					string Description = "If the wheel is a drive wheel, then it will turn when the gas is pressed on the car body.",
					string Type = "bool",
				},
				{
					string Name = "Is2DWheel",
					string Description = "If this wheel is designed to work in 2d mode. Ignores the side friction axis.",
					string Type = "bool",
				},
				{
					string Name = "ForwardStaticFriction",
					string Description = "Used with Coulomb's friction to determine when the wheel will start slipping in the forward direction.(i.e. the friction is bound by muS Fnormal).",
					string Type = "float",
				},
				{
					string Name = "ForwardDynamicFriction",
					string Description = "Used to determine the force applied in the forward direction when the car is in dynamic friction and therefore slipping.(i.e. force is muK Fnormal)",
					string Type = "float",
				},
				{
					string Name = "SideStaticFriction",
					string Description = "Same as ForwardStaticFriction, but in the side direction. Forward and side friction are separated since the forward direction is rolling friction and the side direction is sliding friction.",
					string Type = "float",
				},
				{
					string Name = "SideDynamicFriction",
					string Description = "Same as ForwardDynamicFriction, but in the side direction. See SideStaticFriction for a why these are separated.",
					string Type = "float",
				},
				{
					string Name = "GripScalar",
					string Description = "Artificially increases the grip of the car(where 2 is twice the grip). The total grip scalar is computed as CarGripScalar WheelGripScalar so the total car can be easily tweaked while allowing individual wheel tweaks.",
					string Type = "float",
				},
				{
					string Name = "MaxSpringCompressionDistance",
					string Description = "The max distance that a spring can compress in one frame.",
					string Type = "float",
				},
				{
					string Name = "MaxSpringRelaxationDistance",
					string Description = "The max distance that a spring can relax in one frame.",
					string Type = "float",
				},
				{
					string Name = "BodyStartPos",
					string Description = "The body position that wheel starts at.",
					string Type = "Vec3",
				},
				{
					string Name = "PreRotation",
					string Description = "Used to rotate the wheel before taking into account it's transform. Currently used to rotate cylinders that define+y as default to+x being default.",
					string Type = "Quat",
				},
				{
					string Name = "IsInContact",
					string Description = "If the wheel is currently in contact with an object.",
					string Type = "bool",
				},
				{
					string Name = "IsSliding",
					string Description = "If the wheel is currently sliding. This means that the wheel is slipping due to exerting too high of a force for what static friction is.",
					string Type = "bool",
				},
				{
					string Name = "Rotation",
					string Description = "The current rotation of the wheel in radians about it's axle.",
					string Type = "float",
				},
				{
					string Name = "RotationalVelocity",
					string Description = "The current rotational velocity of the wheel about it's axle.",
					string Type = "float",
				},
				{
					string Name = "Grip",
					string Description = "A coefficient from 0 to 1 that represents how much grip the wheel has.",
					string Type = "float",
				},
				{
					string Name = "NormalImpulse",
					string Description = "The normal impulse(spring force) being exerted by the wheel.",
					string Type = "float",
				},
				{
					string Name = "ForwardImpulse",
					string Description = "The forward impulse(drive force) being exerted by the wheel.",
					string Type = "float",
				},
				{
					string Name = "SideImpulse",
					string Description = "The side impulse(side friction) being exerted by the wheel.",
					string Type = "float",
				},
				{
					string Name = "SpringLength",
					string Description = "The current length of the spring.",
					string Type = "float",
				},
				{
					string Name = "ContactedObject",
					string Description = "The object that this wheel is currently in contact with.",
					string Type = "Cog",
				},
				{
					string Name = "ContactPoint",
					string Description = "The point in world space where the wheel is currently in contact. Will be the zero vector if nothing is being contacted.",
					string Type = "Vec3",
				},
				{
					string Name = "ContactNormal",
					string Description = "The normal of the surface where the wheel is currently in contact. Will be the zero vector if nothing is being contacted.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldAxleAxis",
					string Description = "The current axis of the wheel's axle in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldForwardAxis",
					string Description = "The current axis of the wheel's forward in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldSpringAxis",
					string Description = "The current axis of the wheel's spring in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldLinearVelocity",
					string Description = "The velocity of the center of the wheel having taken into account the car's velocity.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldAngularVelocity",
					string Description = "The axis that represents the world angular velocity of the wheel.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Component",
			],
		},
		{
			string Name = "NetPeerReceivedConnectResponse",
			string BaseClass = "Event",
			string Description = "Dispatched after receiving a connect response If accepted, our net peer ID is set immediately before this and a connect confirmation is sent after this If denied, our net peer ID is cleared and link is destroyed immediately after this.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Data.",
					string Type = "IpAddress",
				},
				{
					string Name = "OurRequestBundle",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "EventBundle",
				},
				{
					string Name = "OurPendingUserAddRequestCount",
					string Description = "Our bundled request event data.",
					string Type = "uint",
				},
				{
					string Name = "OurIpAddress",
					string Description = "Our pending user add requests following this connect request(within the same frame)",
					string Type = "IpAddress",
				},
				{
					string Name = "TheirConnectResponse",
					string Description = "Our IP address(as seen from their perspective)",
					string Type = "ConnectResponse::Enum",
				},
				{
					string Name = "TheirResponseBundle",
					string Description = "Their connect response.",
					string Type = "EventBundle",
				},
				{
					string Name = "OurNetPeerId",
					string Description = "Their bundled response event data.",
					string Type = "NetPeerId",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "GraphicalEvent",
			string BaseClass = "Event",
			string Description = "Graphical Event for visibility.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "ViewingObject",
					string Description = "The object that the event pertains to, from either a Camera or Shadow.",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ParticleCollisionPlane",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Restitution",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "ParticleTorusRoller",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "MajorRadius",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Speed",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "GameEvent",
			string BaseClass = "Event",
			string Description = "Event type used by the GameSession.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "LevelName",
					string Description = "Name of the current level.",
					string Type = "String",
				},
				{
					string Name = "Game",
					string Description = "GameSession Object.",
					string Type = "GameSession",
				},
				{
					string Name = "Handled",
					string Description = "Has this event been handled? Used to for the engine to poll for Request Quit and other operations.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "JointLimit",
			string BaseClass = "Component",
			string Description = "A limit for a joint. Used to add a min/max bounds to a joint. When the joint is in between the min/max bounds, the""limited"" portion will be ignored(The stick will not solve when it is in between the bounds, making it a rope). See each joint for a description of how it reacts to a limit.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this limit is currently active.",
					string Type = "bool",
				},
				{
					string Name = "LowerLimit",
					string Description = "The lower bound for this limit. See wiki for each joint's details.",
					string Type = "float",
				},
				{
					string Name = "UpperLimit",
					string Description = "The upper bound for this limit. See wiki for each joint's details.",
					string Type = "float",
				},
				{
					string Name = "AtomIds",
					string Description = "Signifies what atoms on the joint this effects.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointLowerLimitReached",
					string EventType = "JointEvent",
				},
				{
					string EventName = "JointUpperLimitReached",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "RevoluteJoint2d",
			string BaseClass = "Joint",
			string Description = "A revolute joint is used to create a wheel or a hinge. This is the 2d version of the revolute joint. This joint is used in 2d mode for increased speed and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate upon. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "Graphical",
			string BaseClass = "Component",
			string Description = "Graphical Component is in graphical broad phase/ visibility.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "Reactive",
			string BaseClass = "Component",
			string Description = "Reactive component allows the object to react to mouse events. Uses the collision volume of the collider on this composition for picking.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is the reactive component active.",
					string Type = "bool",
				},
				{
					string Name = "CaptureMouse",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "MouseEnter",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MouseEnterPreview",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MouseExit",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MouseEnterHierarchy",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MouseExitHierarchy",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MouseMove",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MouseUpdate",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MouseScroll",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "DoubleClick",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MouseDown",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MouseUp",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "LeftMouseDown",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "LeftMouseUp",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "RightMouseDown",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "RightMouseUp",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MiddleMouseDown",
					string EventType = "MouseEvent",
				},
				{
					string EventName = "MiddleMouseUp",
					string EventType = "MouseEvent",
				},
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "PhysicsMaterial",
			string BaseClass = "Resource",
			string Description = "This material describes properties of a collider mainly used during collision.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "Density",
					string Description = "Density is used to determine the mass of an object. Mass can be computed as density volume. Density can be set to 0 exactly to produce a massless object, however this should only be done with children objects to add collision.",
					string Type = "float",
				},
				{
					string Name = "Restitution",
					string Description = "How much an object will bounce during a collision. Values should be in the range[0,1] where 0 is an in-elastic collision and 1 is a fully elastic collision. Note: due to solving constraints with baumgarte energy will not be perfectly conserved with restitution 1.",
					string Type = "float",
				},
				{
					string Name = "Friction",
					string Description = "How slippery or rough the object is. When friction is 0 the object will be completely slippery. As friction increases sliding objects will stop quicker. The friction of two object's are combined with the formula sqrt(a b).",
					string Type = "float",
				},
				{
					string Name = "HighPriority",
					string Description = "If high priority is set, this object's restitution will be used always unless the other material is also high priority. If both are high priority then the max restitution is taken.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
		},
		{
			string Name = "WeldJoint",
			string BaseClass = "Joint",
			string Description = "A weld joint is used to lock to position and orientation of two objects together. This can be useful to lock two objects together. However, welds should generally not be used as they are computationally more expensive and less rigid than using composites. The only uses for welds are for quick connections or connections that are desired to not be fully rigid. Also, while it can be done with composites too, welds can be used to model the breaking apart of two objects. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max translation on the x,y and z axes. Motor: A motor will attempt to drive the rotation on the x,y and z axes. Spring: A spring will make the x,y and z axis springy.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAngleA",
					string Description = "The rotation on object A that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "LocalAngleB",
					string Description = "The rotation on object B that is being aligned to.",
					string Type = "Quat",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "MassOverride",
			string BaseClass = "Component",
			string Description = "Takes a snap shot of the current mass and inertia and overrides the object's mass so it can be resized while keeping it's old mass.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetInvInertiaLocalDiagonal",
					string Description = "Returns the diagonal of the inertia tensor. This is a hack for now with zero gravity.",
					string ReturnValue = "Vec3",
					string Arguments = "(QuatParam rotation)",
					Array ParsedArguments = 
					[
						{
							string Type = "QuatParam",
							string Name = "rotation",
						},
					],
				},
				{
					string Name = "SetInvInertiaLocalDiagonal",
					string Description = "Set the diagonal of the inertia tensor. This is a hack for now with zero gravity.",
					string ReturnValue = "void",
					string Arguments = "(QuatParam rotation, Vec3 invInertiaDiag)",
					Array ParsedArguments = 
					[
						{
							string Type = "QuatParam",
							string Name = "rotation",
						},
						{
							string Type = "Vec3",
							string Name = "invInertiaDiag",
						},
					],
				},
				{
					string Name = "RecomputeMass",
					string Description = "Takes a new snapshot of the current mass and inertia.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ClearCenterOfMassLock",
					string Description = "Frees the lock that this has on the center of mass and then recomputes the physically correct center of mass for this body.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines whether the RigidBody on this component will use this mass and inertia or it's actual mass and inertia.",
					string Type = "bool",
				},
				{
					string Name = "Mass",
					string Description = "Allow the user to set the mass. Overrides the inertia as a ratio of the new mass to the old mass.",
					string Type = "float",
				},
				{
					string Name = "LocalCenterOfMass",
					string Description = "The center of mass in local space to to. When the set function is called the center of mass will be locked to this value until ClearCenterOfMassLock is called.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Component",
			],
		},
		{
			string Name = "CogInitializerEvent",
			string BaseClass = "Event",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "CogInitializer",
					string Description = "",
					string Type = "CogInitializer",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "MetaDropEvent",
			string BaseClass = "Event",
			string Description = "MetaDropEvent for dropping MetaObjects.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Handled",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Failed",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Testing",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Position",
					string Description = "",
					string Type = "Vec2",
				},
				{
					string Name = "Result",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "Object",
					string Description = "",
					string Type = "Object",
				},
				{
					string Name = "MouseOverObject",
					string Description = "",
					string Type = "Object",
				},
				{
					string Name = "MouseEvent",
					string Description = "",
					string Type = "MouseEvent",
				},
				{
					string Name = "ViewportMouseEvent",
					string Description = "",
					string Type = "ViewportMouseEvent",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "MetaDrop",
					string EventType = "MetaDropEvent",
				},
				{
					string EventName = "MetaDropTest",
					string EventType = "MetaDropEvent",
				},
				{
					string EventName = "MetaDropUpdate",
					string EventType = "MetaDropEvent",
				},
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "NetLinkDisconnected",
			string BaseClass = "Event",
			string Description = "Dispatched after sending or receiving a disconnect notice Their net peer ID is released and link is destroyed immediately after this.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirNetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Their net peer ID.",
					string Type = "IpAddress",
				},
				{
					string Name = "DisconnectReason",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "DisconnectReason::Enum",
				},
				{
					string Name = "RequestBundle",
					string Description = "Disconnect reason.",
					string Type = "EventBundle",
				},
				{
					string Name = "Direction",
					string Description = "Bundled request event data.",
					string Type = "TransmissionDirection::Enum",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "CapsuleCollider",
			string BaseClass = "Collider",
			string Description = "Capsule Collider is a basic collision primitive of a capsule.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
				{
					string Name = "Radius",
					string Description = "The local space radius of the spheres at the capsule edges.",
					string Type = "float",
				},
				{
					string Name = "Height",
					string Description = "The local space distance from the center of one sphere to another.",
					string Type = "float",
				},
				{
					string Name = "Direction",
					string Description = "The direction that the height is defined along. Allows the user to change whether the capsule's height is along the x, y, or z axis.",
					string Type = "AxisDirection::Enum",
				},
				{
					string Name = "ScalingMode",
					string Description = "How should non-uniform scale affect the capsules size. Should a scale of 2 on the height axis double the total capsule size or should it double the capsule height?",
					string Type = "CapsuleScalingMode::Enum",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "AnimationSet",
			string BaseClass = "Resource",
			string Description = "Set of animations.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "SoundSpace",
			string BaseClass = "Component",
			string Description = "SoundSpace component provides sound for a space.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "InterpolatePitch",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(float pitch, float time)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "pitch",
						},
						{
							string Type = "float",
							string Name = "time",
						},
					],
				},
				{
					string Name = "InterpolateVolume",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(float value, float interpolationTime)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "value",
						},
						{
							string Type = "float",
							string Name = "interpolationTime",
						},
					],
				},
				{
					string Name = "PlayCueAt",
					string Description = "Play a sound cue at a position.",
					string ReturnValue = "SoundInstance",
					string Arguments = "(SoundCue cue, Vec3 position)",
					Array ParsedArguments = 
					[
						{
							string Type = "SoundCue",
							string Name = "cue",
						},
						{
							string Type = "Vec3",
							string Name = "position",
						},
					],
				},
				{
					string Name = "PlayCue",
					string Description = "Play a sound cue in 2d.",
					string ReturnValue = "SoundInstance",
					string Arguments = "(SoundCue cue)",
					Array ParsedArguments = 
					[
						{
							string Type = "SoundCue",
							string Name = "cue",
						},
					],
				},
				{
					string Name = "StopAllSounds",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Volume",
					string Description = "Change the volume for all sounds in the space.",
					string Type = "float",
				},
				{
					string Name = "Pitch",
					string Description = "Pitch scale for all sounds in space.",
					string Type = "float",
				},
				{
					string Name = "Pause",
					string Description = "Pause all sounds in space.",
					string Type = "bool",
				},
				{
					string Name = "PauseWithLevel",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "MeshCollider",
			string BaseClass = "Collider",
			string Description = "Mesh Collider is a collision primitive for colliding with a non-moving triangle mesh.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
				{
					string Name = "PhysicsMesh",
					string Description = "Returns the static mesh used by this Collider.",
					string Type = "PhysicsMesh",
				},
				{
					string Name = "DrawEdges",
					string Description = "Whether to debug draw the edges of each triangle.",
					string Type = "bool",
				},
				{
					string Name = "DrawFaces",
					string Description = "Whether to debug draw the faces of each triangle.",
					string Type = "bool",
				},
				{
					string Name = "DrawFaceNormals",
					string Description = "Whether to debug draw the normals of each triangle.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "SimpleGizmoBase",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "MouseInput",
					string Description = "Whether or not this Gizmo should receive mouse input.",
					string Type = "bool",
				},
				{
					string Name = "PickingPriority",
					string Description = "Used to manually determine which Gizmo gets selected when the mouse is over multiple Gizmos. Higher priority will get picked first.",
					string Type = "int",
				},
				{
					string Name = "Color",
					string Description = "",
					string Type = "ByteColor",
				},
				{
					string Name = "HoverColor",
					string Description = "",
					string Type = "Vec4",
				},
				{
					string Name = "ViewScaled",
					string Description = "If enabled, the size of the gizmo will stay the same regardless of how far away the camera is.",
					string Type = "bool",
				},
				{
					string Name = "DrawOnTop",
					string Description = "Whether or not to draw on top of all objects regardless of depth.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Gizmo",
			],
		},
		{
			string Name = "TilePaletteSource",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "Event",
			string BaseClass = "",
			string Description = "Base event class. All events types inherit from this class.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ParticleWander",
			string BaseClass = "ParticleAnimator",
			string Description = "Particle animator that causes particle to wander or smoothly vary directions.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "WanderAngle",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "WanderAngleVariance",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "WanderStrength",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "RayTracedProvider",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "HierarchyEvent",
			string BaseClass = "Event",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Parent",
					string Description = "",
					string Type = "Cog",
				},
				{
					string Name = "Child",
					string Description = "",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "Attached",
					string EventType = "HierarchyEvent",
				},
				{
					string EventName = "Detached",
					string EventType = "HierarchyEvent",
				},
				{
					string EventName = "ChildAttached",
					string EventType = "HierarchyEvent",
				},
				{
					string EventName = "ChildDetached",
					string EventType = "HierarchyEvent",
				},
				{
					string EventName = "ChildrenOrderChanged",
					string EventType = "Event",
				},
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "CollisionTable",
			string BaseClass = "Resource",
			string Description = "Stores the filters between collision group instances. This is space specific data. Also bakes out the filters into the internal flags of each instance for faster runtime operations.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindFilter",
					string Description = "",
					string ReturnValue = "CollisionFilter",
					string Arguments = "(CollisionGroup groupA, CollisionGroup groupB)",
					Array ParsedArguments = 
					[
						{
							string Type = "CollisionGroup",
							string Name = "groupA",
						},
						{
							string Type = "CollisionGroup",
							string Name = "groupB",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
		},
		{
			string Name = "NetUserOwnerChanged",
			string BaseClass = "Event",
			string Description = "Dispatched after the net object changes network ownership.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "PreviousNetUserOwner",
					string Description = "Data.",
					string Type = "Cog",
				},
				{
					string Name = "CurrentNetUserOwner",
					string Description = "The object's previous network user owner.",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ShaderGraph",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "Lit",
					string Description = "Whether or not default lighting is applied.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "NetPeerSentUserAddRequest",
			string BaseClass = "Event",
			string Description = "Dispatched after sending a net user add request.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirNetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Their net peer ID.",
					string Type = "IpAddress",
				},
				{
					string Name = "OurRequestBundle",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "EventBundle",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "JointHolder",
			string BaseClass = "",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "IsGhost",
					string Description = "",
					string Type = "Boolean",
				},
				{
					string Name = "OtherCollider",
					string Description = "",
					string Type = "Collider",
				},
				{
					string Name = "OtherBody",
					string Description = "",
					string Type = "RigidBody",
				},
				{
					string Name = "Valid",
					string Description = "",
					string Type = "Boolean",
				},
				{
					string Name = "Joint",
					string Description = "",
					string Type = "Joint",
				},
				{
					string Name = "Owner",
					string Description = "",
					string Type = "Cog",
				},
				{
					string Name = "SendsEvents",
					string Description = "",
					string Type = "Boolean",
				},
				{
					string Name = "AutoSnaps",
					string Description = "",
					string Type = "Boolean",
				},
				{
					string Name = "MaxForce",
					string Description = "",
					string Type = "Real",
				},
				{
					string Name = "Limit",
					string Description = "",
					string Type = "JointLimit",
				},
				{
					string Name = "Motor",
					string Description = "",
					string Type = "JointMotor",
				},
				{
					string Name = "Spring",
					string Description = "",
					string Type = "JointSpring",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "SoundCue",
			string BaseClass = "Resource",
			string Description = "Basic sound Cue with various options.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddSoundTagEntry",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(SoundTag soundTag)",
					Array ParsedArguments = 
					[
						{
							string Type = "SoundTag",
							string Name = "soundTag",
						},
					],
				},
				{
					string Name = "Preview",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "StopPreview",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "PlayMode",
					string Description = "",
					string Type = "SoundPlayMode::Type",
				},
				{
					string Name = "Volume",
					string Description = "Volume to play the sound at 1 full volume.",
					string Type = "float",
				},
				{
					string Name = "VolumeVariation",
					string Description = "Volume variation per play.",
					string Type = "float",
				},
				{
					string Name = "Pitch",
					string Description = "Pitch adjustment of the sound. Specified in Octaves. 1 is twice at high, 2 is 4 times.",
					string Type = "float",
				},
				{
					string Name = "PitchVariation",
					string Description = "Variation of the pitch.",
					string Type = "float",
				},
				{
					string Name = "MinDistance",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "MaxDistance",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "MinAttenuatedVolume",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "PositionRandomization",
					string Description = "Random offset the the position.",
					string Type = "float",
				},
				{
					string Name = "RolloffCurveType",
					string Description = "",
					string Type = "RolloffCurveType::Type",
				},
				{
					string Name = "RolloffCurve",
					string Description = "If set then we use the sample curve for sound rolloff The sample curve is normalized and stretched to be between min and max distance.",
					string Type = "SampleCurve",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "PathRequestEvent",
			string BaseClass = "Event",
			string Description = "The event sent when a path request job is finished.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Destination",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "State",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "Path",
					string Description = "",
					string Type = "Path",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ObjectEvent",
			string BaseClass = "Event",
			string Description = "Simple event for general signals.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Source",
					string Description = "",
					string Type = "Object",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "NetPeerSentConnectRequest",
			string BaseClass = "Event",
			string Description = "Dispatched after sending a connect request.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Data.",
					string Type = "IpAddress",
				},
				{
					string Name = "OurRequestBundle",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "EventBundle",
				},
				{
					string Name = "OurPendingUserAddRequestCount",
					string Description = "Our bundled request event data.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "MouseEvent",
			string BaseClass = "Event",
			string Description = "Mouse events for any every with the mouse.",
			Array Methods = 
			[
				{
					string Name = "IsButtonDown",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(MouseButtons::Enum button)",
					Array ParsedArguments = 
					[
						{
							string Type = "MouseButtons::Enum",
							string Name = "button",
						},
					],
				},
				{
					string Name = "IsButtonUp",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(MouseButtons::Enum button)",
					Array ParsedArguments = 
					[
						{
							string Type = "MouseButtons::Enum",
							string Name = "button",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Button",
					string Description = "If this is a MouseDown event which button was changed.",
					string Type = "MouseButtons::Enum",
				},
				{
					string Name = "ButtonDown",
					string Description = "State of all the mouse buttons.",
					string Type = "byte",
				},
				{
					string Name = "Position",
					string Description = "Position of the Mouse.",
					string Type = "Vec2",
				},
				{
					string Name = "Movement",
					string Description = "Movement since last mouse move.",
					string Type = "Vec2",
				},
				{
					string Name = "Scroll",
					string Description = "Movement of scroll wheel.",
					string Type = "Vec2",
				},
				{
					string Name = "ShiftPressed",
					string Description = "Is Shift held down on the keyboard?",
					string Type = "bool",
				},
				{
					string Name = "AltPressed",
					string Description = "Is Alt held down on the keyboard?",
					string Type = "bool",
				},
				{
					string Name = "CtrlPressed",
					string Description = "Is Ctrl held down on the keyboard?",
					string Type = "bool",
				},
				{
					string Name = "Mouse",
					string Description = "",
					string Type = "Mouse",
				},
				{
					string Name = "HandledEvent",
					string Description = "",
					string Type = "Boolean",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ParticleEmitterShared",
			string BaseClass = "ParticleEmitter",
			string Description = "Particle Emitter Shared.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ResetCount",
					string Description = "Reset the number of particles to emit back to EmitCount.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is this emitter currently emitting particles?",
					string Type = "bool",
				},
				{
					string Name = "EmitCount",
					string Description = "Number of particles to emit per reset.",
					string Type = "uint",
				},
				{
					string Name = "EmitRate",
					string Description = "Rate that particles spawn per second.",
					string Type = "float",
				},
				{
					string Name = "EmitVariance",
					string Description = "How much the emit can vary per sample.",
					string Type = "float",
				},
				{
					string Name = "Size",
					string Description = "Size of each particle spawned.",
					string Type = "float",
				},
				{
					string Name = "SizeVariance",
					string Description = "How much the emit can vary per sample.",
					string Type = "float",
				},
				{
					string Name = "Lifetime",
					string Description = "How a particle's starting lifetime is.",
					string Type = "float",
				},
				{
					string Name = "LifetimeVariance",
					string Description = "Hom much lifetime can vary per particle.",
					string Type = "float",
				},
				{
					string Name = "Spin",
					string Description = "Speed in rads per second of the particle.",
					string Type = "float",
				},
				{
					string Name = "SpinVariance",
					string Description = "Hom much speed speed can vary per particle.",
					string Type = "float",
				},
				{
					string Name = "RandomSpin",
					string Description = "Each particle should start with random spin.",
					string Type = "bool",
				},
				{
					string Name = "Fill",
					string Description = "How much area of the emitter to used 0 to 1.",
					string Type = "float",
				},
				{
					string Name = "EmitterVelocityPercent",
					string Description = "How much of the objects velocity is added to the particles.",
					string Type = "float",
				},
				{
					string Name = "StartVelocity",
					string Description = "Velocity of each particle at start.",
					string Type = "Vec3",
				},
				{
					string Name = "RandomVelocity",
					string Description = "Random Velocity per particle.",
					string Type = "Vec3",
				},
				{
					string Name = "TangentVelocity",
					string Description = "Velocity of each particle in x horizontal tangent y vertical tangent and z outward tangent.",
					string Type = "Vec3",
				},
				{
					string Name = "EmitterSize",
					string Description = "Size of the emitter.",
					string Type = "Vec3",
				},
				{
					string Name = "FastMovingEmitter",
					string Description = "Whether or not we attempt to emit along the vector between the previous position to the current position, which looks better for fast moving particle systems Note: Particle systems that teleport will emit along the teleport line.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "Exhausted",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "Collider",
			string BaseClass = "Component",
			string Description = "A collider controls how collision detection is performed for an object. A collider also gives mass properties to a RigidBody(via the material and volume). If there is no RigidBody associated with this collider then it is considered static. Note: colliders without RigidBodies should not be moved at run-time!",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "Atlas",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "AutoOrientToVelocity",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "AngleOffset",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "SendableEvent",
			string BaseClass = "Event",
			string Description = "This event can be sent over the network.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ParticleGradientAnimator",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ColorGradient",
					string Description = "",
					string Type = "ColorGradient",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "JoystickEvent",
			string BaseClass = "Event",
			string Description = "Joystick events are sent when a game pad button state is changed.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Button",
					string Description = "The button that was just pressed or released.",
					string Type = "int",
				},
				{
					string Name = "Joystick",
					string Description = "The joystick that generated this event.",
					string Type = "Joystick",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "GeometryMaterial",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "HotKeyDataSet",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "DragEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a drag acceleration(damping) to slow down an object's linear and angular velocity. Note that this is an acceleration not a force so mass doesn't apply. Otherwise this uses a simple linear approximation of drag.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "Drag",
					string Description = "The linear drag coefficient for applying a linear drag acceleration(linear damping). The simple equation is: accel=-bv.",
					string Type = "float",
				},
				{
					string Name = "AngularDrag",
					string Description = "The angular drag coefficient for applying an angular drag acceleration(angular damping). The simple equation is: accel=-kw.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "ForwardRenderer",
			string BaseClass = "Renderer",
			string Description = "Base Forward Renderer.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ClearColor",
					string Description = "Color to clear the screen.",
					string Type = "Vec4",
				},
				{
					string Name = "DrawNonVisible",
					string Description = "Draw editor only materials.",
					string Type = "bool",
				},
				{
					string Name = "DrawDebugObjects",
					string Description = "Do debug drawing.",
					string Type = "bool",
				},
				{
					string Name = "DrawEditorIcons",
					string Description = "Draw editor icons.",
					string Type = "bool",
				},
				{
					string Name = "EditorIconDepth",
					string Description = "Depth for editor icons.",
					string Type = "bool",
				},
				{
					string Name = "Wireframe",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Renderer",
			],
		},
		{
			string Name = "LockStepMouseScrollEvent",
			string BaseClass = "LockStepMouseEvent",
			string Description = "A synced mouse event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Peer",
					string Description = "",
					string Type = "LockStepPeer",
				},
				{
					string Name = "WorldStart",
					string Description = "The start of the mouse position in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldDirection",
					string Description = "The direction of the mouse position in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "ScreenPosition",
					string Description = "A screen position of the mouse from[0, 1] on each axis where[0, 0] is the top left,[1, 1] is the bottom right.",
					string Type = "Vec2",
				},
				{
					string Name = "ScreenDelta",
					string Description = "The motion of the mouse on the screen(see ScreenPosition)",
					string Type = "Vec2",
				},
				{
					string Name = "LeftPressed",
					string Description = "Is the left mouse button down?",
					string Type = "bool",
				},
				{
					string Name = "MiddlePressed",
					string Description = "Is the middle mouse button down?",
					string Type = "bool",
				},
				{
					string Name = "RightPressed",
					string Description = "Is the right mouse button down?",
					string Type = "bool",
				},
				{
					string Name = "ShiftPressed",
					string Description = "Is shift pressed with this mouse action?",
					string Type = "bool",
				},
				{
					string Name = "AltPressed",
					string Description = "Is alt pressed with this mouse action?",
					string Type = "bool",
				},
				{
					string Name = "CtrlPressed",
					string Description = "Is ctrl pressed with this mouse action?",
					string Type = "bool",
				},
				{
					string Name = "ScrollDelta",
					string Description = "The amount that the mouse scrolled.",
					string Type = "Vec2",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "SpriteParticleSystem",
			string BaseClass = "ParticleSystemCommonData",
			string Description = "Sprite Particles system component. Renders particles system as billboarded sprites.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AllParticles",
					string Description = "Allows direct editing of particles.",
					string ReturnValue = "ParticleListRange",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Clear",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "ChildMode",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "SystemSpace",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "DrawOrder",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "WarmUpTime",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Tint",
					string Description = "Color to tint/multiply all particles in the system.",
					string Type = "Vec4",
				},
				{
					string Name = "GeometryMode",
					string Description = "How the geometry of the particle generated. Screen aligned, Axis, Stretched.",
					string Type = "uint",
				},
				{
					string Name = "RenderMode",
					string Description = "How the particles are blended. Additive, Alpha Blended, etc.",
					string Type = "uint",
				},
				{
					string Name = "SortMode",
					string Description = "Particle sort mode(individually sorted by z?)",
					string Type = "uint",
				},
				{
					string Name = "ParticleAnimation",
					string Description = "ParticleAnimation.",
					string Type = "uint",
				},
				{
					string Name = "Texture",
					string Description = "TextureRegion used for particle System.",
					string Type = "TextureRegion",
				},
				{
					string Name = "VelocityScale",
					string Description = "How much to scale a particle horizontally by its velocity.",
					string Type = "float",
				},
				{
					string Name = "LengthScale",
					string Description = "How much to scale particles horizontally.",
					string Type = "float",
				},
				{
					string Name = "MaxParticleSize",
					string Description = "Max size of particles in the system.",
					string Type = "float",
				},
				{
					string Name = "SystemSize",
					string Description = "Size of the particles system for visibility culling.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ParticlesSpawned",
					string EventType = "ParticleEvent",
				},
			],
			Array Tags = 
			[
				"Particle",
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "SoundTag",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "TagSound",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(SoundInstance instance)",
					Array ParsedArguments = 
					[
						{
							string Type = "SoundInstance",
							string Name = "instance",
						},
					],
				},
				{
					string Name = "UnTagSound",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(SoundInstance instance)",
					Array ParsedArguments = 
					[
						{
							string Type = "SoundInstance",
							string Name = "instance",
						},
					],
				},
				{
					string Name = "PauseSounds",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "StopSounds",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ContinueSounds",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "InterpolateVolume",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(float value, float interpolationTime)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "value",
						},
						{
							string Type = "float",
							string Name = "interpolationTime",
						},
					],
				},
				{
					string Name = "InterpolatePitch",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(float pitch, float time)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "pitch",
						},
						{
							string Type = "float",
							string Name = "time",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "Volume",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Pitch",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "JointConfigOverride",
			string BaseClass = "Component",
			string Description = "Overrides the joint's configuration values of slop, linear Baumgarte, angular Baumgarte and linear max error correction. Slop is the amount of error allowed before position correction takes effect. Baumgarte is used to exponentially correct the error. Baumgarte is split into linear and angular portions because of stability. The linear max error correction is only used when the joint is solved with post stabilization.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Slop",
					string Description = "The amount of error allowed before position correction takes effect.",
					string Type = "float",
				},
				{
					string Name = "LinearBaumgarte",
					string Description = "The exponential correction term for linear error.",
					string Type = "float",
				},
				{
					string Name = "AngularBaumgarte",
					string Description = "The exponential correction term for angular error.",
					string Type = "float",
				},
				{
					string Name = "LinearErrorCorrection",
					string Description = "The max amount of error that can be corrected by the linear portion of any constraint in one frame.",
					string Type = "float",
				},
				{
					string Name = "AngularErrorCorrection",
					string Description = "The max amount of error that can be corrected by the angular portion of any constraint in one frame.",
					string Type = "float",
				},
				{
					string Name = "PositionCorrectionType",
					string Description = "The kind of position correction that this joint should use.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "FixedAngleJoint",
			string BaseClass = "Joint",
			string Description = "Locks the orientation of two objects together. Used when two objects should always rotate in unison. Not useful by itself, but useful as a proof of concept for joints that use this functionality internally. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max angle on every axis that the objects must be between. Motor: A motor will attempt to drive the rotation on every axis forward. Spring: A spring will make the rotations on every axis at the bounds springy.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalAngleA",
					string Description = "The rotation on object A that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "LocalAngleB",
					string Description = "The rotation on object B that is being aligned to.",
					string Type = "Quat",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "BoxCollider",
			string BaseClass = "Collider",
			string Description = "BoxCollider represents the collision volume of a box defined by a size.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
				{
					string Name = "Size",
					string Description = "The size(from min to max) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform(also avoids non-uniform scale issues).",
					string Type = "Vec3",
				},
				{
					string Name = "WorldSize",
					string Description = "The size of the box after the transform is applied(scale and rotation).",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "TileMapSource",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "Wandering",
			string BaseClass = "MovementBase",
			string Description = "Rotates the object in a way that would cause the object to wander if it was moving forward.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeRadians",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeDegrees",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is the component active.",
					string Type = "bool",
				},
				{
					string Name = "MaxAngleChange",
					string Description = "The maximum angle that this component can output.",
					string Type = "float",
				},
				{
					string Name = "Strength",
					string Description = "The strength of this particular movement component.",
					string Type = "float",
				},
				{
					string Name = "QueryOnly",
					string Description = "Do we query the component(and not rotate our object?)",
					string Type = "bool",
				},
				{
					string Name = "DebugDraw",
					string Description = "Do we draw the debug information?",
					string Type = "bool",
				},
				{
					string Name = "CircleRadius",
					string Description = "The radius of the circle that we use to wander.",
					string Type = "float",
				},
				{
					string Name = "MaxWanderAngleChange",
					string Description = "The maximum change in wandering angle per frame.",
					string Type = "float",
				},
				{
					string Name = "RecursionLevels",
					string Description = "",
					string Type = "int",
				},
				{
					string Name = "ScalePerRecursion",
					string Description = "The scale per recursion(ignore this if your recursion level is 1)",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "CylinderCollider",
			string BaseClass = "Collider",
			string Description = "Cylinder Collider is a basic collision primitive of a cylinder.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
				{
					string Name = "Radius",
					string Description = "The local space radius of the cylinder.",
					string Type = "float",
				},
				{
					string Name = "Height",
					string Description = "The local space distance from the top of the cylinder to the bottom.",
					string Type = "float",
				},
				{
					string Name = "Direction",
					string Description = "The direction that the height is defined along. Allows the user to change whether the cylinder's height is along the x, y, or z axis.",
					string Type = "AxisDirection::Enum",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "ScreenDropGenerator",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Rate",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "RateVariance",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Size",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "SizeVariance",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Intensity",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "IntensityDissipation",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "OutwardForce",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "ConstantForce",
					string Description = "",
					string Type = "Vec2",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "PreSolveEvent",
			string BaseClass = "BaseCollisionEvent",
			string Description = "Event sent out from collision groups with the PreSolve block type. This event is sent out after collision detection but before collision resolution. This can be used to slightly alter the state of the two objects in a collision before they're resolved(say turn one from static to dynamic). Warning: Do not delete objects or do any other significant changes as this may destabilize the system.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Object",
					string Description = "The object that this event was sent to.",
					string Type = "Cog",
				},
				{
					string Name = "OtherObject",
					string Description = "The other object in this event. There were two objects A and B, we sent to A so this is B.",
					string Type = "Cog",
				},
				{
					string Name = "ContactPointCount",
					string Description = "Returns how many points of contact there are.",
					string Type = "uint",
				},
				{
					string Name = "IsGhost",
					string Description = "Returns whether or not this was a ghost collision.",
					string Type = "bool",
				},
				{
					string Name = "ContactPoints",
					string Description = "Returns a range to iterate through all of the contact points.",
					string Type = "ContactPointRange",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Event",
			],
		},
		{
			string Name = "RenderToTexture",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "TargetTexture",
					string Description = "",
					string Type = "Texture",
				},
				{
					string Name = "Active",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "NetEventSent",
			string BaseClass = "Event",
			string Description = "Dispatched after a dispatched net event is sent.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirNetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
				{
					string Name = "NetEvent",
					string Description = "Their net peer ID.",
					string Type = "Event",
				},
				{
					string Name = "Destination",
					string Description = "Network event sent.",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ContactPoint",
			string BaseClass = "",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "BodyPoint",
					string Description = "",
					string Type = "Real3",
				},
				{
					string Name = "OtherBodyPoint",
					string Description = "",
					string Type = "Real3",
				},
				{
					string Name = "WorldPoint",
					string Description = "",
					string Type = "Real3",
				},
				{
					string Name = "WorldNormalTowardsOther",
					string Description = "",
					string Type = "Real3",
				},
				{
					string Name = "NormalImpulse",
					string Description = "",
					string Type = "Real",
				},
				{
					string Name = "FrictionImpulse",
					string Description = "",
					string Type = "Real",
				},
				{
					string Name = "ComplexImpulse",
					string Description = "",
					string Type = "Real3",
				},
				{
					string Name = "Penetration",
					string Description = "",
					string Type = "Real",
				},
				{
					string Name = "RelativeVelocity",
					string Description = "",
					string Type = "Real",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
			],
		},
		{
			string Name = "MeshBender",
			string BaseClass = "Component",
			string Description = "Bends a mesh(typically for per instance modification)",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ResolutionX",
					string Description = "The resolutions of the control point grid(only the tool sets these!)",
					string Type = "int",
				},
				{
					string Name = "ResolutionY",
					string Description = "",
					string Type = "int",
				},
				{
					string Name = "ResolutionZ",
					string Description = "",
					string Type = "int",
				},
				{
					string Name = "Dimensions",
					string Description = "The dimensions we use for the lattice(the grid box)",
					string Type = "Vec3",
				},
				{
					string Name = "Offset",
					string Description = "The offset we use for the lattice(the grid box)",
					string Type = "Vec3",
				},
				{
					string Name = "Rotation",
					string Description = "The rotation applied to the lattice(the grid box)",
					string Type = "Quat",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "RuntimeSpline",
			string BaseClass = "Component",
			string Description = "A spline that is manipulated at runtime(such as a rope)",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddControlPoint",
					string Description = "Add a control point to the spline.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 point)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "point",
						},
					],
				},
				{
					string Name = "RemoveControlPoint",
					string Description = "Removes a control point from the spline.",
					string ReturnValue = "void",
					string Arguments = "(int index)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "index",
						},
					],
				},
				{
					string Name = "ClearControlPoints",
					string Description = "Removes all control points from the spline.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "PushControlPoint",
					string Description = "Push another point onto the curve.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "PopControlPoint",
					string Description = "Pops a control point from the back of the spline.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetControlPoint",
					string Description = "Get a control point by index.",
					string ReturnValue = "Vec3",
					string Arguments = "(int index)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetControlPoint",
					string Description = "Set a control point by index.",
					string ReturnValue = "void",
					string Arguments = "(int index, Vec3 point)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "index",
						},
						{
							string Type = "Vec3",
							string Name = "point",
						},
					],
				},
				{
					string Name = "GetBakedLocalPoint",
					string Description = "Get a baked point by index.",
					string ReturnValue = "Vec3",
					string Arguments = "(int bakedIndex)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "bakedIndex",
						},
					],
				},
				{
					string Name = "GetBakedWorldPoint",
					string Description = "",
					string ReturnValue = "Vec3",
					string Arguments = "(int bakedIndex)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "bakedIndex",
						},
					],
				},
				{
					string Name = "GetLocalBakedRotation",
					string Description = "Get a quaternion that represents the rotation of a control point.",
					string ReturnValue = "Quat",
					string Arguments = "(int bakedIndex)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "bakedIndex",
						},
					],
				},
				{
					string Name = "GetWorldBakedRotation",
					string Description = "",
					string ReturnValue = "Quat",
					string Arguments = "(int bakedIndex)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "bakedIndex",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "SplineType",
					string Description = "Get and set the spline type for the curve.",
					string Type = "Math::CurveType::Type",
				},
				{
					string Name = "Closed",
					string Description = "Get and set whether or not the spline closed.",
					string Type = "bool",
				},
				{
					string Name = "TargetSpace",
					string Description = "The space that all the points are relative to.",
					string Type = "TargetSpace::Type",
				},
				{
					string Name = "Subdivisions",
					string Description = "The number of subdivisions we apply to the rope(how smooth it looks)",
					string Type = "uint",
				},
				{
					string Name = "ControlPointCount",
					string Description = "Get the number of points on.",
					string Type = "int",
				},
				{
					string Name = "BakedPointCount",
					string Description = "Get the number of points in the baked curve.",
					string Type = "int",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "ParticleAttractor",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Strength",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "MinDistance",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "MaxDistance",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "SphereCollider",
			string BaseClass = "Collider",
			string Description = "SphereCollider is a basic collision primitive of a sphere.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
				{
					string Name = "Radius",
					string Description = "The radius of the sphere in local space(before transform is applied).",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "CogPath",
			string BaseClass = "ZeroObject",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "Refresh",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "RefreshIfNull",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Clone",
					string Description = "Creates a new copy of a cog path(since cog paths are reference counted and shared)",
					string ReturnValue = "CogPath",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Resolve",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "(Status status, Cog startFrom, const CogPathCompiled path)",
					Array ParsedArguments = 
					[
						{
							string Type = "Status",
							string Name = "status",
						},
						{
							string Type = "Cog",
							string Name = "startFrom",
						},
						{
							string Type = "const",
							string Name = "path",
						},
					],
				},
				{
					string Name = "ComputePath",
					string Description = "",
					string ReturnValue = "String",
					string Arguments = "(Status status, Cog from, Cog to, CogPathPreference::Enum pref)",
					Array ParsedArguments = 
					[
						{
							string Type = "Status",
							string Name = "status",
						},
						{
							string Type = "Cog",
							string Name = "from",
						},
						{
							string Type = "Cog",
							string Name = "to",
						},
						{
							string Type = "CogPathPreference::Enum",
							string Name = "pref",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Path",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "Cog",
					string Description = "",
					string Type = "Cog",
				},
				{
					string Name = "DirectCog",
					string Description = "",
					string Type = "Cog",
				},
				{
					string Name = "RelativeTo",
					string Description = "The cog that we compute paths relative to.",
					string Type = "Cog",
				},
				{
					string Name = "Required",
					string Description = "Deprecated(named changed to ErrorOnResolveToNull)",
					string Type = "bool",
				},
				{
					string Name = "ErrorOnResolveToNull",
					string Description = "Is an exception thrown if you try to access the Cog when it's invalid or not found?",
					string Type = "bool",
				},
				{
					string Name = "ErrorOnPathCantCompute",
					string Description = "Is it an exception/notification if the path to an object cannot be computed?",
					string Type = "bool",
				},
				{
					string Name = "ErrorOnDirectLinkFail",
					string Description = "Is it an exception/notification if a direct link to the object cannot be resolved?",
					string Type = "bool",
				},
				{
					string Name = "UpdateCogOnPathChange",
					string Description = "When we set the cog path, should we try and resolve the object(this also detects parse errors)",
					string Type = "bool",
				},
				{
					string Name = "UpdateCogOnInitialize",
					string Description = "Whether the cog path attempts to resolve an object when the object is fully initialized.",
					string Type = "bool",
				},
				{
					string Name = "UpdatePathOnCogChange",
					string Description = "When we set the cog, should we try and recompute a path to the object?",
					string Type = "bool",
				},
				{
					string Name = "PathPreference0",
					string Description = "",
					string Type = "CogPathPreference::Enum",
				},
				{
					string Name = "PathPreference1",
					string Description = "",
					string Type = "CogPathPreference::Enum",
				},
				{
					string Name = "PathPreference2",
					string Description = "",
					string Type = "CogPathPreference::Enum",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CogPathCogChanged",
					string EventType = "CogPathEvent",
				},
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "Hierarchy",
			string BaseClass = "Component",
			string Description = "Component that gives an game object the ability to have child objects and contains a list of children.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Children",
					string Description = "",
					string Type = "HierarchyList::range",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "Texture",
			string BaseClass = "TextureRegion",
			string Description = "Texture resource class.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "SplineParticleAnimator",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Speed",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "AutoCalculateLifetime",
					string Description = "If checked, the lifetime on the SplineParticleEmitter will be updated to the time it would take to travel the entire path at the current speed.",
					string Type = "bool",
				},
				{
					string Name = "Helix",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "HelixRadius",
					string Description = "The radius of the helix.",
					string Type = "float",
				},
				{
					string Name = "HelixWaveLength",
					string Description = "How fast the helix rotates in radians/ second.",
					string Type = "float",
				},
				{
					string Name = "HelixOffset",
					string Description = "Offset in radians for where the helix starts.",
					string Type = "float",
				},
				{
					string Name = "Mode",
					string Description = "The current animate mode.",
					string Type = "SplineAnimatorMode::Enum",
				},
				{
					string Name = "SpringFrequencyHz",
					string Description = "Spring properties.",
					string Type = "float",
				},
				{
					string Name = "SpringDampingRatio",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "ViewportMouseEvent",
			string BaseClass = "MouseEvent",
			string Description = "All mouse events that are forwarded to reactive components or the space use this event to add extra data.",
			Array Methods = 
			[
				{
					string Name = "IsButtonDown",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(MouseButtons::Enum button)",
					Array ParsedArguments = 
					[
						{
							string Type = "MouseButtons::Enum",
							string Name = "button",
						},
					],
				},
				{
					string Name = "IsButtonUp",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(MouseButtons::Enum button)",
					Array ParsedArguments = 
					[
						{
							string Type = "MouseButtons::Enum",
							string Name = "button",
						},
					],
				},
				{
					string Name = "ToWorldZPlane",
					string Description = "The world mouse position on the z plane at depth.",
					string ReturnValue = "Vec3",
					string Arguments = "(float worldDepth)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "worldDepth",
						},
					],
				},
				{
					string Name = "ToWorldViewPlane",
					string Description = "The world mouse position on the view plane at view depth.",
					string ReturnValue = "Vec3",
					string Arguments = "(float viewDepth)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "viewDepth",
						},
					],
				},
				{
					string Name = "ToWorldPlane",
					string Description = "The world mouse position on any arbitrary plane.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPlaneNormal, Vec3 worldPlanePosition)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPlaneNormal",
						},
						{
							string Type = "Vec3",
							string Name = "worldPlanePosition",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Button",
					string Description = "If this is a MouseDown event which button was changed.",
					string Type = "MouseButtons::Enum",
				},
				{
					string Name = "ButtonDown",
					string Description = "State of all the mouse buttons.",
					string Type = "byte",
				},
				{
					string Name = "Position",
					string Description = "Position of the Mouse.",
					string Type = "Vec2",
				},
				{
					string Name = "Movement",
					string Description = "Movement since last mouse move.",
					string Type = "Vec2",
				},
				{
					string Name = "Scroll",
					string Description = "Movement of scroll wheel.",
					string Type = "Vec2",
				},
				{
					string Name = "ShiftPressed",
					string Description = "Is Shift held down on the keyboard?",
					string Type = "bool",
				},
				{
					string Name = "AltPressed",
					string Description = "Is Alt held down on the keyboard?",
					string Type = "bool",
				},
				{
					string Name = "CtrlPressed",
					string Description = "Is Ctrl held down on the keyboard?",
					string Type = "bool",
				},
				{
					string Name = "Mouse",
					string Description = "",
					string Type = "Mouse",
				},
				{
					string Name = "HandledEvent",
					string Description = "",
					string Type = "Boolean",
				},
				{
					string Name = "WorldRay",
					string Description = "The world mouse ray.",
					string Type = "Ray",
				},
				{
					string Name = "RayStart",
					string Description = "Mouse Ray start.",
					string Type = "Vec3",
				},
				{
					string Name = "RayDirection",
					string Description = "Mouse Ray Direction.",
					string Type = "Vec3",
				},
				{
					string Name = "HitPosition",
					string Description = "The intersection point with an object. Used with Reactive components.",
					string Type = "Vec3",
				},
				{
					string Name = "HitNormal",
					string Description = "The normal at the intersection point with an object. Used with Reactive components.",
					string Type = "Vec3",
				},
				{
					string Name = "HitUv",
					string Description = "The uv of the surface that we hit(check HitUvProvided)",
					string Type = "Vec2",
				},
				{
					string Name = "HitUvProvided",
					string Description = "The uv may not be provided by some ray-casters.",
					string Type = "bool",
				},
				{
					string Name = "HitDistance",
					string Description = "The distance away the hit point is. Used with Reactive components.",
					string Type = "float",
				},
				{
					string Name = "HitObject",
					string Description = "Object hit in ray cast.",
					string Type = "Cog",
				},
				{
					string Name = "CameraViewport",
					string Description = "Camera viewport that generated this event.",
					string Type = "CameraViewport",
				},
				{
					string Name = "Viewport",
					string Description = "",
					string Type = "Viewport",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "Orientation",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "EditBasis",
					string Description = "Spawns a proxy transform object so that the basis of the object can be set.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "LookAtPoint",
					string Description = "Sets the forward to look at the given point. Keeps the current world up.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 lookPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "lookPoint",
						},
					],
				},
				{
					string Name = "LookAtDirection",
					string Description = "Sets the forward to look in the given direction. Keeps the current world up.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 lookDir)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "lookDir",
						},
					],
				},
				{
					string Name = "GetLookAtPointRotation",
					string Description = "Get the rotation so that the forward will look at the given point. Keeps the current world up.",
					string ReturnValue = "Quat",
					string Arguments = "(Vec3 lookPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "lookPoint",
						},
					],
				},
				{
					string Name = "GetLookAtDirectionRotation",
					string Description = "Gets the forward to look in the given direction. Keeps the current world up.",
					string ReturnValue = "Quat",
					string Arguments = "(Vec3 lookDir)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "lookDir",
						},
					],
				},
				{
					string Name = "LookAtPointWithUp",
					string Description = "Same as LookAtPoint but allows the user to specify the up vector.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 lookPoint, Vec3 up)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "lookPoint",
						},
						{
							string Type = "Vec3",
							string Name = "up",
						},
					],
				},
				{
					string Name = "LookAtDirectionWithUp",
					string Description = "Same as LookAtDirection but allows the user to specify the up vector.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 lookDir, Vec3 up)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "lookDir",
						},
						{
							string Type = "Vec3",
							string Name = "up",
						},
					],
				},
				{
					string Name = "GetLookAtPointWithUpRotation",
					string Description = "Same as GetLookAtPointRotation but allows the user to specify the up vector.",
					string ReturnValue = "Quat",
					string Arguments = "(Vec3 lookPoint, Vec3 up)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "lookPoint",
						},
						{
							string Type = "Vec3",
							string Name = "up",
						},
					],
				},
				{
					string Name = "GetLookAtDirectionWithUpRotation",
					string Description = "Same as GetLookAtDirectionRotation but allows the user to specify the up vector.",
					string ReturnValue = "Quat",
					string Arguments = "(Vec3 lookDir, Vec3 up)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "lookDir",
						},
						{
							string Type = "Vec3",
							string Name = "up",
						},
					],
				},
				{
					string Name = "ComputeSignedAngle",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "(Vec3 up, Vec3 forward, Vec3 newVector)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "up",
						},
						{
							string Type = "Vec3",
							string Name = "forward",
						},
						{
							string Type = "Vec3",
							string Name = "newVector",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "GlobalUp",
					string Description = "The up in the world that is rotated about when using any LookAt function.",
					string Type = "Vec3",
				},
				{
					string Name = "DefaultOrientationBases",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "LocalUp",
					string Description = "Returns the un-normalized up vector.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalForward",
					string Description = "Returns the un-normalized forward vector.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalRight",
					string Description = "Returns the un-normalized right vector.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldForward",
					string Description = "Get the world-space forward vector.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldUp",
					string Description = "Get the world-space up vector.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldRight",
					string Description = "Get the world-space right vector.",
					string Type = "Vec3",
				},
				{
					string Name = "AbsoluteAngle",
					string Description = "Get the angle of the object about the up vector.",
					string Type = "float",
				},
				{
					string Name = "Rotation",
					string Description = "The rotation that this orientation defines. Useful to align the object's bases with the world bases(use the inverse rotation).",
					string Type = "Quat",
				},
				{
					string Name = "LocalToWorldRotation",
					string Description = "",
					string Type = "Quat",
				},
				{
					string Name = "WorldRotation",
					string Description = "The rotation that brings your defined basis into the world. The inverse of this brings a world space vector into the object's local space.",
					string Type = "Quat",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "MeshParticleEmitter",
			string BaseClass = "ParticleEmitterShared",
			string Description = "Emits particles on a mesh surface.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ResetCount",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is this emitter currently emitting particles?",
					string Type = "bool",
				},
				{
					string Name = "EmitCount",
					string Description = "Number of particles to emit per reset.",
					string Type = "uint",
				},
				{
					string Name = "EmitRate",
					string Description = "Rate that particles spawn per second.",
					string Type = "float",
				},
				{
					string Name = "EmitVariance",
					string Description = "How much the emit can vary per sample.",
					string Type = "float",
				},
				{
					string Name = "Size",
					string Description = "Size of each particle spawned.",
					string Type = "float",
				},
				{
					string Name = "SizeVariance",
					string Description = "How much the emit can vary per sample.",
					string Type = "float",
				},
				{
					string Name = "Lifetime",
					string Description = "How a particle's starting lifetime is.",
					string Type = "float",
				},
				{
					string Name = "LifetimeVariance",
					string Description = "Hom much lifetime can vary per particle.",
					string Type = "float",
				},
				{
					string Name = "Spin",
					string Description = "Speed in rads per second of the particle.",
					string Type = "float",
				},
				{
					string Name = "SpinVariance",
					string Description = "Hom much speed speed can vary per particle.",
					string Type = "float",
				},
				{
					string Name = "RandomSpin",
					string Description = "Each particle should start with random spin.",
					string Type = "bool",
				},
				{
					string Name = "Fill",
					string Description = "How much area of the emitter to used 0 to 1.",
					string Type = "float",
				},
				{
					string Name = "EmitterVelocityPercent",
					string Description = "How much of the objects velocity is added to the particles.",
					string Type = "float",
				},
				{
					string Name = "StartVelocity",
					string Description = "Velocity of each particle at start.",
					string Type = "Vec3",
				},
				{
					string Name = "RandomVelocity",
					string Description = "Random Velocity per particle.",
					string Type = "Vec3",
				},
				{
					string Name = "TangentVelocity",
					string Description = "Velocity of each particle in x horizontal tangent y vertical tangent and z outward tangent.",
					string Type = "Vec3",
				},
				{
					string Name = "EmitterSize",
					string Description = "Size of the emitter.",
					string Type = "Vec3",
				},
				{
					string Name = "FastMovingEmitter",
					string Description = "Whether or not we attempt to emit along the vector between the previous position to the current position, which looks better for fast moving particle systems Note: Particle systems that teleport will emit along the teleport line.",
					string Type = "bool",
				},
				{
					string Name = "Mesh",
					string Description = "Mesh used for this Model.",
					string Type = "Mesh",
				},
				{
					string Name = "MeshEmitMode",
					string Description = "",
					string Type = "MeshEmitMode::Type",
				},
				{
					string Name = "UseModelComponent",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "Exhausted",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "Keyboard",
			string BaseClass = "ZeroObject",
			string Description = "Keyboard representing the physical keyboard.",
			Array Methods = 
			[
				{
					string Name = "KeyIsDown",
					string Description = "Is the particular currently down.",
					string ReturnValue = "bool",
					string Arguments = "(Keys::Enum key)",
					Array ParsedArguments = 
					[
						{
							string Type = "Keys::Enum",
							string Name = "key",
						},
					],
				},
				{
					string Name = "KeyIsUp",
					string Description = "Is the particular currently up.",
					string ReturnValue = "bool",
					string Arguments = "(Keys::Enum key)",
					Array ParsedArguments = 
					[
						{
							string Type = "Keys::Enum",
							string Name = "key",
						},
					],
				},
				{
					string Name = "KeyIsPressed",
					string Description = "Is the key pressed this frame.",
					string ReturnValue = "bool",
					string Arguments = "(Keys::Enum key)",
					Array ParsedArguments = 
					[
						{
							string Type = "Keys::Enum",
							string Name = "key",
						},
					],
				},
				{
					string Name = "KeyIsReleased",
					string Description = "Is the key released this frame.",
					string ReturnValue = "bool",
					string Arguments = "(Keys::Enum key)",
					Array ParsedArguments = 
					[
						{
							string Type = "Keys::Enum",
							string Name = "key",
						},
					],
				},
				{
					string Name = "GetKeyName",
					string Description = "Gets a string name of a particular key.",
					string ReturnValue = "String",
					string Arguments = "(Keys::Enum key)",
					Array ParsedArguments = 
					[
						{
							string Type = "Keys::Enum",
							string Name = "key",
						},
					],
				},
			],
			Array Properties = 
			[
			],
			Array EventsSent = 
			[
				{
					string EventName = "KeyUp",
					string EventType = "KeyboardEvent",
				},
				{
					string EventName = "KeyDown",
					string EventType = "KeyboardEvent",
				},
				{
					string EventName = "KeyRepeated",
					string EventType = "KeyboardEvent",
				},
				{
					string EventName = "TextTyped",
					string EventType = "KeyboardTextEvent",
				},
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "WebRequester",
			string BaseClass = "Component",
			string Description = "A component we can use to facilitate web requests.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Clear",
					string Description = "Clear headers and post data.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Run",
					string Description = "Run the web request(we should get data back in a WebResponse event)",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SetHeader",
					string Description = "Add a header to the web request.",
					string ReturnValue = "void",
					string Arguments = "(String name, String data)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
						{
							string Type = "String",
							string Name = "data",
						},
					],
				},
				{
					string Name = "SetPostData",
					string Description = "Add Post data to the request, this will also change the request to a post request.",
					string ReturnValue = "void",
					string Arguments = "(String data)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "data",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Url",
					string Description = "Get and set the url that we make requests to.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "WebResponse",
					string EventType = "WebResponseEvent",
				},
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "CameraViewport",
			string BaseClass = "Component",
			string Description = "Manages a viewport. If attached to a camera that viewport is used.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ScreenToWorldRay",
					string Description = "Convert a screen point to a ray.",
					string ReturnValue = "Ray",
					string Arguments = "(Vec2 screenPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec2",
							string Name = "screenPoint",
						},
					],
				},
				{
					string Name = "ScreenToWorldZPlane",
					string Description = "Convert the screen point to a position on the z plane at a given depth.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec2 screenPoint, float worldDepth)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec2",
							string Name = "screenPoint",
						},
						{
							string Type = "float",
							string Name = "worldDepth",
						},
					],
				},
				{
					string Name = "ScreenToWorldViewPlane",
					string Description = "Convert the screen point to a position on the view plane at a given depth.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec2 screenPoint, float viewDepth)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec2",
							string Name = "screenPoint",
						},
						{
							string Type = "float",
							string Name = "viewDepth",
						},
					],
				},
				{
					string Name = "ScreenToWorldPlane",
					string Description = "Convert the screen point to a position on a given plane.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec2 screenPoint, Vec3 worldPlaneNormal, Vec3 worldPlanePosition)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec2",
							string Name = "screenPoint",
						},
						{
							string Type = "Vec3",
							string Name = "worldPlaneNormal",
						},
						{
							string Type = "Vec3",
							string Name = "worldPlanePosition",
						},
					],
				},
				{
					string Name = "WorldToScreen",
					string Description = "Convert a world point to a screen point.",
					string ReturnValue = "Vec2",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
				{
					string Name = "ScreenToViewport",
					string Description = "",
					string ReturnValue = "Vec2",
					string Arguments = "(Vec2 screenPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec2",
							string Name = "screenPoint",
						},
					],
				},
				{
					string Name = "ViewportToScreen",
					string Description = "",
					string ReturnValue = "Vec2",
					string Arguments = "(Vec2 viewportPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec2",
							string Name = "viewportPoint",
						},
					],
				},
				{
					string Name = "ViewPlaneSize",
					string Description = "Size of the screen at a Depth.",
					string ReturnValue = "Vec2",
					string Arguments = "(float viewDepth)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "viewDepth",
						},
					],
				},
				{
					string Name = "DeferredBufferCapture",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is this viewport active.",
					string Type = "bool",
				},
				{
					string Name = "Background",
					string Description = "Should the viewport background be transparent or not.",
					string Type = "bool",
				},
				{
					string Name = "Layer",
					string Description = "Layer index relative to other active viewports viewports will be draw from lowest to highest.",
					string Type = "int",
				},
				{
					string Name = "Blocking",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Renderer",
					string Description = "Renderer to use for this viewport.",
					string Type = "Cog",
				},
				{
					string Name = "Camera",
					string Description = "Camera to use for this viewport.",
					string Type = "Cog",
				},
				{
					string Name = "RendererPath",
					string Description = "",
					string Type = "CogPath",
				},
				{
					string Name = "CameraPath",
					string Description = "",
					string Type = "CogPath",
				},
				{
					string Name = "NormalizedSize",
					string Description = "",
					string Type = "Vec2",
				},
				{
					string Name = "NormalizedOffset",
					string Description = "",
					string Type = "Vec2",
				},
				{
					string Name = "ResolutionOrAspect",
					string Description = "",
					string Type = "Vec2",
				},
				{
					string Name = "Scaling",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "MarginColor",
					string Description = "Color to used for letterbox margins.",
					string Type = "Vec4",
				},
				{
					string Name = "ViewportResolution",
					string Description = "The current resolution of the viewport.",
					string Type = "Vec2",
				},
				{
					string Name = "ViewportOffset",
					string Description = "The current offset of the viewport from it's parent, in pixels.",
					string Type = "Vec2",
				},
				{
					string Name = "ViewportResolutionWithMargin",
					string Description = "The current resolution of the viewport including margin.",
					string Type = "Vec2",
				},
				{
					string Name = "Viewport",
					string Description = "",
					string Type = "GameViewport",
				},
				{
					string Name = "MouseWorldRay",
					string Description = "Get the world ray starting from the mouse.",
					string Type = "Ray",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "LockStepGamepadUpdateEvent",
			string BaseClass = "LockStepGamepadEvent",
			string Description = "A synced gamepad update event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Peer",
					string Description = "",
					string Type = "LockStepPeer",
				},
				{
					string Name = "Index",
					string Description = "The index of the gamepad that was activated or deactivated.",
					string Type = "uint",
				},
				{
					string Name = "LeftStick",
					string Description = "Current offset[0, 1] from the center of the left stick.",
					string Type = "Vec2",
				},
				{
					string Name = "RightStick",
					string Description = "Current offset[0, 1] from the center of the right stick.",
					string Type = "Vec2",
				},
				{
					string Name = "LeftStickDelta",
					string Description = "Change in the left stick this frame.",
					string Type = "Vec2",
				},
				{
					string Name = "RightStickDelta",
					string Description = "Change in the right stick this frame.",
					string Type = "Vec2",
				},
				{
					string Name = "LeftTrigger",
					string Description = "How much the left trigger is down[0, 1].",
					string Type = "float",
				},
				{
					string Name = "RightTrigger",
					string Description = "How much the right trigger is down[0, 1].",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "NetUserLostObjectOwnership",
			string BaseClass = "Event",
			string Description = "Dispatched after the net user loses network ownership of a net object.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "LostObject",
					string Description = "Data.",
					string Type = "Cog",
				},
				{
					string Name = "CurrentNetUserOwner",
					string Description = "The object this user just lost network ownership of.",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ObjectStore",
			string BaseClass = "",
			string Description = "Object cache is use to store objects at runtime.",
			Array Methods = 
			[
				{
					string Name = "IsStored",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "Store",
					string Description = "Store an object.",
					string ReturnValue = "StoreResult::Enum",
					string Arguments = "(String name, Cog object)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
						{
							string Type = "Cog",
							string Name = "object",
						},
					],
				},
				{
					string Name = "Restore",
					string Description = "Restore an object to the space.",
					string ReturnValue = "Cog",
					string Arguments = "(String name, Space space)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
						{
							string Type = "Space",
							string Name = "space",
						},
					],
				},
				{
					string Name = "RestoreOrArchetype",
					string Description = "Restore an object if it is not stored use the archetype to create it.",
					string ReturnValue = "Cog",
					string Arguments = "(String name, Archetype archetype, Space space)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
						{
							string Type = "Archetype",
							string Name = "archetype",
						},
						{
							string Type = "Space",
							string Name = "space",
						},
					],
				},
				{
					string Name = "Erase",
					string Description = "Attempts to remove an object from the store.",
					string ReturnValue = "void",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "ClearStore",
					string Description = "Clear the store.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindOrCreateSubStore",
					string Description = "Create a substore of this objectstore(basically a child store)",
					string ReturnValue = "ObjectStore",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "GetObjectList",
					string Description = "Returns list of all the objects currently stored.",
					string ReturnValue = "ResourceTable",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "UpdateObjectListCache",
					string Description = "Force updating list of files that were on the disk.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "ObjectLinkAnchor",
			string BaseClass = "Component",
			string Description = "Component used to keep track of what ObjectLinks a cog has. This component is added dynamically whenever a ObjectLink is added to a cog that did not contain an ObjectLink before. This can be used to traverse across linked objects and find the entire""island"" of ObjectLinks.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ObjectLinks",
					string Description = "The range of object link edges connected to this anchor.",
					string Type = "ObjectLinkRange",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "ColorGradient",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Sample",
					string Description = "Sample the curve at the given t.",
					string ReturnValue = "Vec4",
					string Arguments = "(float t)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "t",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "KeyboardEvent",
			string BaseClass = "Event",
			string Description = "Keyboard Events are for when key state changes.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Key",
					string Description = "Key that was changed.",
					string Type = "Keys::Enum",
				},
				{
					string Name = "State",
					string Description = "State of the key Up,Down,Repeated.",
					string Type = "KeyState::Enum",
				},
				{
					string Name = "ShiftPressed",
					string Description = "Is Shift pressed with this key?",
					string Type = "bool",
				},
				{
					string Name = "AltPressed",
					string Description = "Is Alt pressed with this key?",
					string Type = "bool",
				},
				{
					string Name = "CtrlPressed",
					string Description = "Is Ctrl pressed with this key?",
					string Type = "bool",
				},
				{
					string Name = "SpacePressed",
					string Description = "Is Space pressed with this key?",
					string Type = "bool",
				},
				{
					string Name = "HandledEvent",
					string Description = "",
					string Type = "Boolean",
				},
				{
					string Name = "Keyboard",
					string Description = "",
					string Type = "Keyboard",
				},
				{
					string Name = "OsKey",
					string Description = "The original OS key that was pressed(platform specific)",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "NetProperty",
			string BaseClass = "",
			string Description = "Network Property Manages the state of a single property.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "PropertyName",
					string Description = "Returns the net property's name.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "VortexEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a force about an axis at the object's center. This will apply two forces to a body: One pulls the object towards the center of the vortex and the other applies a tangential force. Useful to model a vortex.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "LocalAxis",
					string Description = "Determines if the Vortex Axis is in world or local space.",
					string Type = "bool",
				},
				{
					string Name = "MinDistance",
					string Description = "The first distance at which attenuation will start. If an object is under the min distance, it will get the strength at min applied. If an object is in between min and max, then it will attenuate.",
					string Type = "float",
				},
				{
					string Name = "MaxDistance",
					string Description = "The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition.",
					string Type = "float",
				},
				{
					string Name = "ForceStrengthAtMinDistance",
					string Description = "The perpendicular strength of the vortex at its center.",
					string Type = "float",
				},
				{
					string Name = "ForceStrengthAtMaxDistance",
					string Description = "The perpendicular strength of the vortex at its max distance.",
					string Type = "float",
				},
				{
					string Name = "InwardStrengthAtMinDistance",
					string Description = "The inward force strength of the vortex at its center.",
					string Type = "float",
				},
				{
					string Name = "InwardStrengthAtMaxDistance",
					string Description = "The inward force strength of the vortex at its max distance.",
					string Type = "float",
				},
				{
					string Name = "VortexAxis",
					string Description = "The axis about which the vortex spins.",
					string Type = "Vec3",
				},
				{
					string Name = "InterpolationType",
					string Description = "The type of interpolation used(ie. Linear, Quadratic) for the forces.",
					string Type = "VortexInterpolationStates::Enum",
				},
				{
					string Name = "EndCondition",
					string Description = "How the interpolation should be handled at the max distance. ClampToMax will clamp to strength at max. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation(this may go negative).",
					string Type = "VortexEndCondition::Enum",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "UpdateEvent",
			string BaseClass = "Event",
			string Description = "Update event contains current time and delta time.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Dt",
					string Description = "The amount of time that passed between this frame and the last(scaled by TimeSpace.TimeScale).",
					string Type = "float",
				},
				{
					string Name = "TimePassed",
					string Description = "The amount of time that has passed since this space was created(TimeSpace.TimeScale affects this value).",
					string Type = "float",
				},
				{
					string Name = "RealTimePassed",
					string Description = "The float amount of time that has passed since this space was created(uncaped and unclamped).",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "PhysicsCar",
			string BaseClass = "Component",
			string Description = "A controller for a high speed physics based car. The car is controlled with a steer, gas and a brake coefficient. The car will raycast wheel positions to try to keep the wheels on the ground and then apply friction and normal forces to propel the car.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Debug draws all of the wheels associated with this car.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "NumberOfWheelsInContact",
					string Description = "The number of wheels currently in contact with an object.",
					string ReturnValue = "uint",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddWheelCog",
					string Description = "Add the PhysicsCarWheel to be controlled by this car.",
					string ReturnValue = "void",
					string Arguments = "(Cog wheelCog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "wheelCog",
						},
					],
				},
				{
					string Name = "RemoveWheelCog",
					string Description = "Remove the PhysicsCarWheel from being controlled by this car.",
					string ReturnValue = "void",
					string Arguments = "(Cog wheelCog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "wheelCog",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Steer",
					string Description = "How much the wheel is being steered. This is measured in radians about this object's y-axis.",
					string Type = "float",
				},
				{
					string Name = "Gas",
					string Description = "How much the gas is being pressed[-1,1] where-1 is full reverse.",
					string Type = "float",
				},
				{
					string Name = "Brake",
					string Description = "How much the brake is being pressed[0,1] where 1 is full brake.",
					string Type = "float",
				},
				{
					string Name = "WheelFrictionSideRollCoef",
					string Description = "Coefficient used to apply the side friction force closer to the car's center of mass. 1 means to apply at the wheel position, 0 means to apply at the point along the contact normal closest to the center of mass.",
					string Type = "float",
				},
				{
					string Name = "WheelFrictionFrontRollCoef",
					string Description = "Coefficient used to apply the forward friction force closer to the car's center of mass. 1 means to apply at the wheel position, 0 means to apply at the point along the contact normal closest to the center of mass.",
					string Type = "float",
				},
				{
					string Name = "DebugDraw",
					string Description = "Whether or not the car should debug draw.",
					string Type = "bool",
				},
				{
					string Name = "Wheels",
					string Description = "Returns a range of the car wheels.",
					string Type = "CarWheelRange",
				},
				{
					string Name = "MaxSpeed",
					string Description = "The desired maximum speed of the car. Similar to a speed governor.",
					string Type = "float",
				},
				{
					string Name = "MaxTorque",
					string Description = "The maximum torque the engine can apply to try to reach the max speed.",
					string Type = "float",
				},
				{
					string Name = "GripScalar",
					string Description = "Artificially increases the grip of the car(where 2 is twice the grip). The total grip scalar is computed as CarGripScalar WheelGripScalar so the total car can be easily tweaked while allowing individual wheel tweaks.",
					string Type = "float",
				},
				{
					string Name = "AntiLockBrakes",
					string Description = "Prevents the car from entering dynamic friction when applying brakes. If the brake would start to skid, the brake force is clamped to the max amount that will not slip.",
					string Type = "bool",
				},
				{
					string Name = "TorqueGovernor",
					string Description = "Governs the max torque that the engine can apply. This is used to keep the wheels from spinning out(slipping) when too high of a torque is applied. If the tires would slip, the engine will apply the maximum torque where the tires will not slip.",
					string Type = "bool",
				},
				{
					string Name = "Active",
					string Description = "Whether or not the car will run any logic at all. If this is false wheels will not work at all, they will not behave as springs or drive or anything.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Component",
			],
		},
		{
			string Name = "RigidBody",
			string BaseClass = "Motion",
			string Description = "The RigidBody defines the dynamics of an object. A body defines the mass properties and movement of an object. Without a RigidBody, an object will be static. Any effects attached to a RigidBody without a region will be applied to the body directly.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ApplyLinearVelocity",
					string Description = "Adds to the current linear velocity.(world space)",
					string ReturnValue = "void",
					string Arguments = "(Vec3 linear)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "linear",
						},
					],
				},
				{
					string Name = "ApplyAngularVelocity",
					string Description = "Adds to the current angular velocity.(world space)",
					string ReturnValue = "void",
					string Arguments = "(Vec3 angular)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "angular",
						},
					],
				},
				{
					string Name = "ApplyVelocityAtPoint",
					string Description = "Applies a velocity at a world space point on the object. Results in a change to linear and angular velocity.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 velocity, Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "velocity",
						},
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Computes the linear velocity of a point on the body.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
				{
					string Name = "ApplyForce",
					string Description = "Applies a force through the center of mass of the body.(world space)",
					string ReturnValue = "void",
					string Arguments = "(Vec3 force)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "force",
						},
					],
				},
				{
					string Name = "ApplyTorque",
					string Description = "Applies a torque through the center of mass of the body.(world space)",
					string ReturnValue = "void",
					string Arguments = "(Vec3 torque)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "torque",
						},
					],
				},
				{
					string Name = "ApplyForceAtOffsetVector",
					string Description = "Applies a force(world space) at an offset from the center of mass. Results in a force and torque to the center of mass.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 force, Vec3 worldR)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "force",
						},
						{
							string Type = "Vec3",
							string Name = "worldR",
						},
					],
				},
				{
					string Name = "ApplyForceAtPoint",
					string Description = "Applies a force(world space) at a point on an object. Results in a force and torque to the center of mass.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 force, Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "force",
						},
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
				{
					string Name = "ApplyLinearImpulse",
					string Description = "Applies a linear impulse through the center of mass(world space). Only results in a change of linear velocity.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 linear)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "linear",
						},
					],
				},
				{
					string Name = "ApplyAngularImpulse",
					string Description = "Applies an angular impulse through the center of mass(world space). Only results in a change of angular velocity.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 angular)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "angular",
						},
					],
				},
				{
					string Name = "ApplyImpulseAtOffsetVector",
					string Description = "Applies an impulse(world space) at a point on the object. Results in a change in linear and angular velocity.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 impulse, Vec3 worldR)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "impulse",
						},
						{
							string Type = "Vec3",
							string Name = "worldR",
						},
					],
				},
				{
					string Name = "ApplyImpulseAtPoint",
					string Description = "Applies an impulse to the object at a world space point. Results in a change to linear and angular velocity.(world space)",
					string ReturnValue = "void",
					string Arguments = "(Vec3 impulse, Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "impulse",
						},
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
				{
					string Name = "IsAsleep",
					string Description = "Checks if the object is currently asleep.",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ForceAwake",
					string Description = "Forces the object awake. Will reset the sleep timer.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ForceAsleep",
					string Description = "Forces the object asleep. Will wake if anything hits it or if it is in contact with any non-asleep objects. Warning: calling this function could create gameplay flaws if used incorrectly, use at your own risk(and sparingly).",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Velocity",
					string Description = "The velocity of the object in world space. Max bounds are around 1e+10, after this the velocity will be capped.",
					string Type = "Vec3",
				},
				{
					string Name = "AngularVelocity",
					string Description = "The angular velocity of the object in world space. Max bounds are around 1e+10, after this the angular velocity will be capped.",
					string Type = "Vec3",
				},
				{
					string Name = "Force",
					string Description = "The total accumulated force(in world space) that is being applied to the center of mass of this rigid body this frame.",
					string Type = "Vec3",
				},
				{
					string Name = "Torque",
					string Description = "The total accumulated torque(in world space) that is being applied to the center of mass of this rigid body this frame.",
					string Type = "Vec3",
				},
				{
					string Name = "DynamicState",
					string Description = "How this rigid body handles dynamics. Is it a regular rigid body(dynamic)? Does it not move(static)? Does the user want to manually move it and have objects properly collide with it(kinematic)? Note: Static vs. static don't check collision.",
					string Type = "RigidBodyDynamicState::Enum",
				},
				{
					string Name = "Static",
					string Description = "Static objects cannot be moved by collisions, forces or velocity changes. This is a more efficient way of changing an object between static and dynamic during runtime. Static objects should not be moved during runtime as they will not correctly account for their position change when colliding with objects.",
					string Type = "bool",
				},
				{
					string Name = "Kinematic",
					string Description = "Kinematic objects are static objects that can be moved during runtime. Kinematics will correctly deal with position change during collisions by approximating the linear and angular velocity from the transform changes.",
					string Type = "bool",
				},
				{
					string Name = "AllowSleep",
					string Description = "Sleeping happens when an object has not""moved""(small enough linear+ angular velocity) for long enough. If this happens then the physics engine can stop updating this object(integration, collision detection, etc...) until something not asleep hits it. Sleeping is purely an optimization. Sometimes it is not desirable for a body to ever fall asleep(such as a player) so this behavior can be overridden.",
					string Type = "bool",
				},
				{
					string Name = "RotationLocked",
					string Description = "Used to make it so an object cannot rotate from physics. The rotation can still be manually changed.",
					string Type = "bool",
				},
				{
					string Name = "Mode2D",
					string Description = "Used to make an object act as if it were 2D. This is done by locking it to the current z plane and only allowing rotation around the world's z axis. This object can be translated and rotated manually. The object can be set to always be 2D or 3D, or it can choose to inherit the setting that the space currently has.",
					string Type = "Mode2DStates::Enum",
				},
				{
					string Name = "Mass",
					string Description = "The current mass of the rigid body. This includes all child colliders belonging to this body.",
					string Type = "float",
				},
				{
					string Name = "WorldCenterOfMass",
					string Description = "The position of the center of mass in world space.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "RigidBodySlept",
					string EventType = "ObjectEvent",
				},
				{
					string EventName = "RigidBodyAwoke",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
			],
		},
		{
			string Name = "GamepadEvent",
			string BaseClass = "Event",
			string Description = "Gamepad events are send when a game pad button state is changed.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Gamepad",
					string Description = "Gamepad that generated this event.",
					string Type = "Gamepad",
				},
				{
					string Name = "Button",
					string Description = "Button that was just pressed down or released up.",
					string Type = "int",
				},
				{
					string Name = "FlickDirection",
					string Description = "The direction of the stick that was flicked(normalized)",
					string Type = "Vec2",
				},
				{
					string Name = "FlickedStick",
					string Description = "When responding to the'GamepadStickFlicked' event, this will be set to the stick that was flicked.",
					string Type = "FlickedStick::Type",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "Cog",
			string BaseClass = "ZeroObject",
			string Description = "Game Object Composition class. This class is the foundational object for all dynamic objects in the game world. The Cog is a piece of logical interactive content and the primary mechanism game systems(Graphics, Physics, Etc.) provide functionality and communicate. A Cog can be anything from physical objects like trees, tanks, players to to logical objects like teams, triggers, or AI objects.",
			Array Methods = 
			[
				{
					string Name = "Destroy",
					string Description = "Destroy an object removing it from the Space.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "DispatchEvent",
					string Description = "Dispatches an event on this object.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "AddComponentByName",
					string Description = "Add a component by name.",
					string ReturnValue = "bool",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "RemoveComponentByName",
					string Description = "Remove a component by name. Returns true if the component existed.",
					string ReturnValue = "bool",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Calls DebugDraw on all components in this cog.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AttachTo",
					string Description = "Attach to a parent object.",
					string ReturnValue = "void",
					string Arguments = "(Cog parent)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "parent",
						},
					],
				},
				{
					string Name = "Detach",
					string Description = "Detach from a parent object.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AttachToRelative",
					string Description = "Attach to a parent object and compute the new transform so that the objects are relative.",
					string ReturnValue = "void",
					string Arguments = "(Cog parent)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "parent",
						},
					],
				},
				{
					string Name = "DetachRelative",
					string Description = "Detach from a parent object and compute the new transform so that the objects are relative.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindChildByName",
					string Description = "Find a child object with the given name.",
					string ReturnValue = "Cog",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindAllChildrenByName",
					string Description = "",
					string ReturnValue = "HierarchyNameRange",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "DispatchUp",
					string Description = "Dispatches an event up the tree on each parent recursively(pre-order traversal)",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchDown",
					string Description = "Dispatches an event down the tree on all children recursively(pre-order traversal)",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "FindRoot",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "UploadToArchetype",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ModifiedFromArchetype",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Clone",
					string Description = "Clones this cog.",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ClearArchetype",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindNextSibling",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindPreviousSibling",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindNextInOrder",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindPreviousInOrder",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "IsDescendant",
					string Description = "Returns whether or not the given cog is a descendant of us.",
					string ReturnValue = "bool",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetComponentByName",
					string Description = "",
					string ReturnValue = "Component",
					string Arguments = "(String componentTypeName)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "componentTypeName",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of the Object.",
					string Type = "String",
				},
				{
					string Name = "ArchetypeName",
					string Description = "The name of the archetype this object was created from.",
					string Type = "String",
				},
				{
					string Name = "RuntimeId",
					string Description = "Gets a unique integer for this object(used primarily for debugging)",
					string Type = "u32",
				},
				{
					string Name = "Actions",
					string Description = "",
					string Type = "Actions",
				},
				{
					string Name = "Space",
					string Description = "",
					string Type = "Space",
				},
				{
					string Name = "Parent",
					string Description = "Get the parent of this object in the Hierarchy.",
					string Type = "Cog",
				},
				{
					string Name = "IsBeingDestroyed",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Transient",
					string Description = "Object will not be saved.",
					string Type = "bool",
				},
				{
					string Name = "Persistent",
					string Description = "Object will not be destroyed on level load or change.",
					string Type = "bool",
				},
				{
					string Name = "EditorViewportHidden",
					string Description = "Hidden from view used for editor.",
					string Type = "bool",
				},
				{
					string Name = "ObjectViewHidden",
					string Description = "If the object needs to not show up in the object view.",
					string Type = "bool",
				},
				{
					string Name = "Locked",
					string Description = "Not able to be modified or selected in the viewport.",
					string Type = "bool",
				},
				{
					string Name = "Children",
					string Description = "Grab the children directly from the hierarchy component.",
					string Type = "HierarchyList::range",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "Fog",
			string BaseClass = "Component",
			string Description = "A component that provides fog.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "FogType",
					string Description = "",
					string Type = "FogType::Type",
				},
				{
					string Name = "Color",
					string Description = "Color of the fog.",
					string Type = "Vec4",
				},
				{
					string Name = "BeginDepth",
					string Description = "Depth where fog will begin to affect color.",
					string Type = "float",
				},
				{
					string Name = "EndDepth",
					string Description = "Depth will fog will be at End Density.",
					string Type = "float",
				},
				{
					string Name = "BeginDensity",
					string Description = "Fog density at begin depth and below.",
					string Type = "float",
				},
				{
					string Name = "EndDensity",
					string Description = "Fog density at End Depth and beyond.",
					string Type = "float",
				},
				{
					string Name = "FogDensity",
					string Description = "In exp fog the density.",
					string Type = "float",
				},
				{
					string Name = "FogStart",
					string Description = "In exp fog the start.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Rendering",
			],
		},
		{
			string Name = "CollisionGroupEvent",
			string BaseClass = "BaseCollisionEvent",
			string Description = "An event sent out when a collision happens between two groups with a filter. Used to write hook up messages based upon certain types colliding(ie. when a player is hit by a bullet, catch on fire or something).",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Object",
					string Description = "The object that this event was sent to.",
					string Type = "Cog",
				},
				{
					string Name = "OtherObject",
					string Description = "The other object in this event. There were two objects A and B, we sent to A so this is B.",
					string Type = "Cog",
				},
				{
					string Name = "ContactPointCount",
					string Description = "Returns how many points of contact there are.",
					string Type = "uint",
				},
				{
					string Name = "IsGhost",
					string Description = "Returns whether or not this was a ghost collision.",
					string Type = "bool",
				},
				{
					string Name = "ContactPoints",
					string Description = "Returns a range to iterate through all of the contact points.",
					string Type = "ContactPointRange",
				},
				{
					string Name = "TypeAName",
					string Description = "Returns the collision group name of object A.",
					string Type = "String",
				},
				{
					string Name = "TypeBName",
					string Description = "Returns the collision group name of object B.",
					string Type = "String",
				},
				{
					string Name = "FirstPoint",
					string Description = "",
					string Type = "ContactPoint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Event",
			],
		},
		{
			string Name = "ObjectLink",
			string BaseClass = "Component",
			string Description = "Forms a link between two positions on two objects. ObjectLinks are used primarily by physics to represent joints, but can also be used by graphics, gameplay, etc... to represent some connection between two objects.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ObjectAPath",
					string Description = "CogPath to object A.",
					string Type = "CogPath",
				},
				{
					string Name = "ObjectBPath",
					string Description = "CogPath to object B.",
					string Type = "CogPath",
				},
				{
					string Name = "ObjectA",
					string Description = "The first object that is being connected to. Set this to null to clear the link.",
					string Type = "Cog",
				},
				{
					string Name = "ObjectB",
					string Description = "The second object that is being connected to. Set this to null to clear the link.",
					string Type = "Cog",
				},
				{
					string Name = "WorldPointA",
					string Description = "The point on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The point on object B in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointA",
					string Description = "The Point on Object A in local space.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The Point on Object B in local space.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "ObjectLinkChanged",
					string EventType = "ObjectLinkEvent",
				},
				{
					string EventName = "ObjectLinkPointChanged",
					string EventType = "ObjectLinkPointChangedEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Core",
			],
		},
		{
			string Name = "VoxelChunk",
			string BaseClass = "Component",
			string Description = "A voxel chunk builds a cube mesh where each cube face is a sprite(sprites are atlased for performance) The voxel chunk can represent multiple graphical materials within it(such as a transparent material, diffuse material, etc) Keep in mind that the more graphical materials added, the more draw calls and meshes the chunk will have to make.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SetVoxel",
					string Description = "Set the voxel type at a given position The voxel id must be registered with the VoxelChunkMaterials or else it will not be drawn.",
					string ReturnValue = "void",
					string Arguments = "(IntVec3 position, int voxelType)",
					Array ParsedArguments = 
					[
						{
							string Type = "IntVec3",
							string Name = "position",
						},
						{
							string Type = "int",
							string Name = "voxelType",
						},
					],
				},
				{
					string Name = "GetVoxel",
					string Description = "",
					string ReturnValue = "int",
					string Arguments = "(IntVec3 position)",
					Array ParsedArguments = 
					[
						{
							string Type = "IntVec3",
							string Name = "position",
						},
					],
				},
				{
					string Name = "GetVoxelOrDefault",
					string Description = "",
					string ReturnValue = "int",
					string Arguments = "(IntVec3 position, int defaultVoxelType)",
					Array ParsedArguments = 
					[
						{
							string Type = "IntVec3",
							string Name = "position",
						},
						{
							string Type = "int",
							string Name = "defaultVoxelType",
						},
					],
				},
				{
					string Name = "SetColor",
					string Description = "Set the color of a given voxel(default is white(1, 1, 1, 1))",
					string ReturnValue = "void",
					string Arguments = "(IntVec3 position, Vec4 color)",
					Array ParsedArguments = 
					[
						{
							string Type = "IntVec3",
							string Name = "position",
						},
						{
							string Type = "Vec4",
							string Name = "color",
						},
					],
				},
				{
					string Name = "GetColor",
					string Description = "",
					string ReturnValue = "Vec4",
					string Arguments = "(IntVec3 position)",
					Array ParsedArguments = 
					[
						{
							string Type = "IntVec3",
							string Name = "position",
						},
					],
				},
				{
					string Name = "GetColorOrDefault",
					string Description = "",
					string ReturnValue = "Vec4",
					string Arguments = "(IntVec3 position, Vec4 color)",
					Array ParsedArguments = 
					[
						{
							string Type = "IntVec3",
							string Name = "position",
						},
						{
							string Type = "Vec4",
							string Name = "color",
						},
					],
				},
				{
					string Name = "IsPositionValid",
					string Description = "Checks if a position is valid.",
					string ReturnValue = "bool",
					string Arguments = "(IntVec3 position)",
					Array ParsedArguments = 
					[
						{
							string Type = "IntVec3",
							string Name = "position",
						},
					],
				},
				{
					string Name = "RebuildMesh",
					string Description = "Force rebuilding of a mesh(only needed to be called if'AutoRebuild' is false)",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "RebuildMeshIfNeeded",
					string Description = "Only rebuilds the mesh if it is needed(only needed to be called if'AutoRebuild' is false)",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "VoxelCount",
					string Description = "Get the total number of voxels in this chunk.",
					string Type = "int",
				},
				{
					string Name = "Dimensions",
					string Description = "",
					string Type = "IntVec3",
				},
				{
					string Name = "VoxelChunkMaterialsCog",
					string Description = "",
					string Type = "Cog",
				},
				{
					string Name = "VoxelChunkMaterials",
					string Description = "",
					string Type = "VoxelChunkMaterials",
				},
				{
					string Name = "AutoRebuild",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "SoundEmitter",
			string BaseClass = "Component",
			string Description = "Sound Emitter component emits 3d sound at its location.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Stop",
					string Description = "Stop all cues on this emitter.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Pause",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Continue",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "PlayCue",
					string Description = "Play a cue by name on this emitter.",
					string ReturnValue = "SoundInstance",
					string Arguments = "(SoundCue cue)",
					Array ParsedArguments = 
					[
						{
							string Type = "SoundCue",
							string Name = "cue",
						},
					],
				},
				{
					string Name = "IsPlaying",
					string Description = "Is this emitter currently playing sound?",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "InterpolatePitch",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(float pitch, float interpolationTime)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "pitch",
						},
						{
							string Type = "float",
							string Name = "interpolationTime",
						},
					],
				},
				{
					string Name = "InterpolateVolume",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(float volume, float interpolationTime)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "volume",
						},
						{
							string Type = "float",
							string Name = "interpolationTime",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Pitch",
					string Description = "Pitch scalar for emitter.",
					string Type = "float",
				},
				{
					string Name = "Volume",
					string Description = "Volume scalar for emitter.",
					string Type = "float",
				},
				{
					string Name = "Positional",
					string Description = "Apply 3d Positional effects?",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Sound",
			],
		},
		{
			string Name = "DynamicMesh",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the wire frame mesh.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddVertex",
					string Description = "Adds a new vertex.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 vertex)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "vertex",
						},
					],
				},
				{
					string Name = "AddNormal",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Vec3 normal)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "normal",
						},
					],
				},
				{
					string Name = "AddUV",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Vec2 uv)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec2",
							string Name = "uv",
						},
					],
				},
				{
					string Name = "AddTriangleIndices",
					string Description = "Adds new triangle.",
					string ReturnValue = "void",
					string Arguments = "(uint index0, uint index1, uint index2)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index0",
						},
						{
							string Type = "uint",
							string Name = "index1",
						},
						{
							string Type = "uint",
							string Name = "index2",
						},
					],
				},
				{
					string Name = "GetVertex",
					string Description = "Used for script access.",
					string ReturnValue = "Vec3",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "GetNormal",
					string Description = "",
					string ReturnValue = "Vec3",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetVertex",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(uint index, Vec3 position)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
						{
							string Type = "Vec3",
							string Name = "position",
						},
					],
				},
				{
					string Name = "Clear",
					string Description = "Clears out all data on the mesh.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GenerateAabb",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Modified",
					string Description = "Used to denote that the user has completed their modifications.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "GenerateNormals",
					string Description = "Generates normals of each vertex by averaging out the face normals touching each vertex.",
					string Type = "void",
				},
				{
					string Name = "DrawVertices",
					string Description = "Draws each vertex.",
					string Type = "void",
				},
				{
					string Name = "DrawTriangles",
					string Description = "Draws all triangles.",
					string Type = "void",
				},
				{
					string Name = "DrawNormals",
					string Description = "Draws the normals of each vertex(if generated).",
					string Type = "void",
				},
				{
					string Name = "VertexCount",
					string Description = "",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "CollisionGroup",
			string BaseClass = "Resource",
			string Description = "A collision group object. Most implementation data is handled in an instance. A collision group just maintains the user defined(and readable) name for the group.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
		},
		{
			string Name = "NetLinkConnected",
			string BaseClass = "Event",
			string Description = "Dispatched after sending or receiving a connect confirmation.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirNetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Their net peer ID.",
					string Type = "IpAddress",
				},
				{
					string Name = "Direction",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "TransmissionDirection::Enum",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "AnimationGraphEvent",
			string BaseClass = "Event",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Animation",
					string Description = "Getters.",
					string Type = "Animation",
				},
				{
					string Name = "Node",
					string Description = "",
					string Type = "AnimationNode",
				},
				{
					string Name = "PlayMode",
					string Description = "",
					string Type = "AnimPlayMode::Type",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "GodRayLight",
			string BaseClass = "Component",
			string Description = "Light component that provides god rays.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "LightType",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "Color",
					string Description = "",
					string Type = "Vec4",
				},
				{
					string Name = "Intensity",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "ScreenRadius",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "OccluderClarity",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "ScreenEdgeFade",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "BeginFade",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "EndFade",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "DepthOffset",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
			],
		},
		{
			string Name = "SphericalParticleEmitter",
			string BaseClass = "ParticleEmitterShared",
			string Description = "Emits particles inside a sphere.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ResetCount",
					string Description = "Reset the number of particles to emit back to EmitCount.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is this emitter currently emitting particles?",
					string Type = "bool",
				},
				{
					string Name = "EmitCount",
					string Description = "Number of particles to emit per reset.",
					string Type = "uint",
				},
				{
					string Name = "EmitRate",
					string Description = "Rate that particles spawn per second.",
					string Type = "float",
				},
				{
					string Name = "EmitVariance",
					string Description = "How much the emit can vary per sample.",
					string Type = "float",
				},
				{
					string Name = "Size",
					string Description = "Size of each particle spawned.",
					string Type = "float",
				},
				{
					string Name = "SizeVariance",
					string Description = "How much the emit can vary per sample.",
					string Type = "float",
				},
				{
					string Name = "Lifetime",
					string Description = "How a particle's starting lifetime is.",
					string Type = "float",
				},
				{
					string Name = "LifetimeVariance",
					string Description = "Hom much lifetime can vary per particle.",
					string Type = "float",
				},
				{
					string Name = "Spin",
					string Description = "Speed in rads per second of the particle.",
					string Type = "float",
				},
				{
					string Name = "SpinVariance",
					string Description = "Hom much speed speed can vary per particle.",
					string Type = "float",
				},
				{
					string Name = "RandomSpin",
					string Description = "Each particle should start with random spin.",
					string Type = "bool",
				},
				{
					string Name = "Fill",
					string Description = "How much area of the emitter to used 0 to 1.",
					string Type = "float",
				},
				{
					string Name = "EmitterVelocityPercent",
					string Description = "How much of the objects velocity is added to the particles.",
					string Type = "float",
				},
				{
					string Name = "StartVelocity",
					string Description = "Velocity of each particle at start.",
					string Type = "Vec3",
				},
				{
					string Name = "RandomVelocity",
					string Description = "Random Velocity per particle.",
					string Type = "Vec3",
				},
				{
					string Name = "TangentVelocity",
					string Description = "Velocity of each particle in x horizontal tangent y vertical tangent and z outward tangent.",
					string Type = "Vec3",
				},
				{
					string Name = "EmitterSize",
					string Description = "Size of the emitter.",
					string Type = "Vec3",
				},
				{
					string Name = "FastMovingEmitter",
					string Description = "Whether or not we attempt to emit along the vector between the previous position to the current position, which looks better for fast moving particle systems Note: Particle systems that teleport will emit along the teleport line.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "Exhausted",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "ParticleAnimator",
			string BaseClass = "Component",
			string Description = "Particle Animator Interface. Particle Animators effect partices in the system.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "ParticleSystem",
			string BaseClass = "Graphical",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "ChildMode",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "SystemSpace",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "DrawOrder",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "WarmUpTime",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Tint",
					string Description = "Color to tint/multiply all particles in the system.",
					string Type = "Vec4",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ParticlesSpawned",
					string EventType = "ParticleEvent",
				},
			],
			Array Tags = 
			[
				"Particle",
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "LinearParticleAnimator",
			string BaseClass = "ParticleAnimator",
			string Description = "Basic Particle Animation Effects.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Force",
					string Description = "Constance force applied to particles.",
					string Type = "Vec3",
				},
				{
					string Name = "RandomForce",
					string Description = "Random force applied to particles.",
					string Type = "Vec3",
				},
				{
					string Name = "Torque",
					string Description = "Force that applies spin.",
					string Type = "float",
				},
				{
					string Name = "Growth",
					string Description = "Rate of particle size growth.",
					string Type = "float",
				},
				{
					string Name = "Dampening",
					string Description = "Velocity dampening.",
					string Type = "float",
				},
				{
					string Name = "Twist",
					string Description = "Twist applies a twisting/tornado force to the particles.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "ParticleTwister",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Axis",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "Strength",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "MinDistance",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "MaxDistance",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "Resource",
			string BaseClass = "ZeroObject",
			string Description = "Base Resource class.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "SimpleSound",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Play",
					string Description = "",
					string ReturnValue = "SoundInstance",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Stop",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "IsPlaying",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Cue",
					string Description = "",
					string Type = "SoundCue",
				},
				{
					string Name = "StartPlaying",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "TranslateGizmo",
			string BaseClass = "Component",
			string Description = "Updates the translation of the gizmo when it's being dragged.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "UpdateMode",
					string Description = "Whether or not to automatically translate the gizmo as it's moved.",
					string Type = "UpdateMode::Enum",
				},
				{
					string Name = "SnapMode",
					string Description = "Snapping.",
					string Type = "GizmoSnapMode::Enum",
				},
				{
					string Name = "SnapDistance",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Gizmo",
			],
		},
		{
			string Name = "LockStepGameStartEvent",
			string BaseClass = "Event",
			string Description = "A lock-step game started event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "PeerCount",
					string Description = "The number of peers in the game.",
					string Type = "uint",
				},
				{
					string Name = "Peers",
					string Description = "Get the peers that we started with.",
					string Type = "PeerRange",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "Sound",
			string BaseClass = "Resource",
			string Description = "Sound from an audio file.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "CustomJoint",
			string BaseClass = "Joint",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "CreateConstraint",
					string Description = "",
					string ReturnValue = "CustomConstraintInfo",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddConstraint",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(CustomConstraintInfo constraint)",
					Array ParsedArguments = 
					[
						{
							string Type = "CustomConstraintInfo",
							string Name = "constraint",
						},
					],
				},
				{
					string Name = "RemoveConstraint",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(CustomConstraintInfo constraint)",
					Array ParsedArguments = 
					[
						{
							string Type = "CustomConstraintInfo",
							string Name = "constraint",
						},
					],
				},
				{
					string Name = "ClearConstraints",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetConstraint",
					string Description = "",
					string ReturnValue = "CustomConstraintInfo",
					string Arguments = "(size_t index)",
					Array ParsedArguments = 
					[
						{
							string Type = "size_t",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "ConstraintCount",
					string Description = "",
					string Type = "size_t",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
				{
					string EventName = "ComputeCustomJointInfo",
					string EventType = "CustomJointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "WheelJoint2d",
			string BaseClass = "Joint",
			string Description = "A joint that models a wheel with shocks. This is the 2d version of the wheel joint. This joint is used in 2d mode for increased speed and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate upon. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAngleA",
					string Description = "The rotation on object A that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "LocalAngleB",
					string Description = "The rotation on object B that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "WorldShockAxis",
					string Description = "The shock axis of the wheel in world space.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "LockStepMouseEvent",
			string BaseClass = "LockStepEvent",
			string Description = "A synced mouse event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Peer",
					string Description = "",
					string Type = "LockStepPeer",
				},
				{
					string Name = "WorldStart",
					string Description = "The start of the mouse position in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldDirection",
					string Description = "The direction of the mouse position in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "ScreenPosition",
					string Description = "A screen position of the mouse from[0, 1] on each axis where[0, 0] is the top left,[1, 1] is the bottom right.",
					string Type = "Vec2",
				},
				{
					string Name = "ScreenDelta",
					string Description = "The motion of the mouse on the screen(see ScreenPosition)",
					string Type = "Vec2",
				},
				{
					string Name = "LeftPressed",
					string Description = "Is the left mouse button down?",
					string Type = "bool",
				},
				{
					string Name = "MiddlePressed",
					string Description = "Is the middle mouse button down?",
					string Type = "bool",
				},
				{
					string Name = "RightPressed",
					string Description = "Is the right mouse button down?",
					string Type = "bool",
				},
				{
					string Name = "ShiftPressed",
					string Description = "Is shift pressed with this mouse action?",
					string Type = "bool",
				},
				{
					string Name = "AltPressed",
					string Description = "Is alt pressed with this mouse action?",
					string Type = "bool",
				},
				{
					string Name = "CtrlPressed",
					string Description = "Is ctrl pressed with this mouse action?",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "CommandEvent",
			string BaseClass = "ObjectEvent",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Source",
					string Description = "",
					string Type = "Object",
				},
				{
					string Name = "Space",
					string Description = "Gives context to where the command was executed.",
					string Type = "Space",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "PositionJoint",
			string BaseClass = "Joint",
			string Description = "Represents a ball and socket joint. A position joint constrains the two anchor points on each object to be equal. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max translation on every axis(x,y,z) that the objects must be between. Motor: A motor will attempt to drive the translation in the positive direction on every axis. Spring: A spring will make the translation on every axis springy at the bounds.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "NetChannel",
			string BaseClass = "",
			string Description = "Network Channel Manages the replication of a set of properties on the network.",
			Array Methods = 
			[
				{
					string Name = "ResetConfig",
					string Description = "Resets all configuration settings.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "HasNetProperty",
					string Description = "Returns true if the net channel has a net property with the specified property name, else false.",
					string ReturnValue = "bool",
					string Arguments = "(Component component, String propertyName) const",
					Array ParsedArguments = 
					[
						{
							string Type = "Component",
							string Name = "component",
						},
						{
							string Type = "String",
							string Name = "propertyName",
						},
					],
				},
				{
					string Name = "GetNetProperty",
					string Description = "Returns the net property with the specified property name, else nullptr Note: Nullifies any net property handle previously obtained from this net channel.",
					string ReturnValue = "NetProperty",
					string Arguments = "(Component component, String propertyName) const",
					Array ParsedArguments = 
					[
						{
							string Type = "Component",
							string Name = "component",
						},
						{
							string Type = "String",
							string Name = "propertyName",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "ChannelName",
					string Description = "Returns the net channel's name.",
					string Type = "String",
				},
				{
					string Name = "ManualChangeFlag",
					string Description = "Returns the manual change flag.",
					string Type = "bool",
				},
				{
					string Name = "EventOnOutgoingPropertyChange",
					string Description = "Returns whether or not the event NetChannelOutgoingPropertyChange will be dispatched when an outgoing net property change is detected.",
					string Type = "bool",
				},
				{
					string Name = "EventOnIncomingPropertyChange",
					string Description = "Returns whether or not the event NetChannelIncomingPropertyChange will be dispatched when an incoming net property change is received.",
					string Type = "bool",
				},
				{
					string Name = "AuthorityMode",
					string Description = "Returns the change authority mode.",
					string Type = "AuthorityMode::Enum",
				},
				{
					string Name = "Authority",
					string Description = "Returns the change authority.",
					string Type = "Authority::Enum",
				},
				{
					string Name = "DetectionInterval",
					string Description = "Returns the change detection interval(in seconds)",
					string Type = "float",
				},
				{
					string Name = "DetectionMode",
					string Description = "Returns the change detection mode.",
					string Type = "DetectionMode::Enum",
				},
				{
					string Name = "ReplicateOnOnline",
					string Description = "Returns whether or not the net channel will be replicated when the net object comes online.",
					string Type = "bool",
				},
				{
					string Name = "ReplicateOnChange",
					string Description = "Returns whether or not the net channel will be replicated on net property change.",
					string Type = "bool",
				},
				{
					string Name = "ReplicateOnOffline",
					string Description = "Returns whether or not the net channel will be replicated when the net object goes offline.",
					string Type = "bool",
				},
				{
					string Name = "SerializationMode",
					string Description = "Returns the change serialization mode.",
					string Type = "SerializationMode::Enum",
				},
				{
					string Name = "ReliabilityMode",
					string Description = "Returns the change reliability mode.",
					string Type = "ReliabilityMode::Enum",
				},
				{
					string Name = "TransferMode",
					string Description = "Returns the change message transfer mode.",
					string Type = "TransferMode::Enum",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "Motion",
			string BaseClass = "Component",
			string Description = "Motion component used for systems to communicate to physics changes in object velocity.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "ContactHolder",
			string BaseClass = "",
			string Description = "A""specialization"" of the Base Constraint Holder that has contact specific helpers.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Object",
					string Description = "",
					string Type = "Cog",
				},
				{
					string Name = "OtherObject",
					string Description = "",
					string Type = "Cog",
				},
				{
					string Name = "IsGhost",
					string Description = "Returns whether or not this was a ghost collision.",
					string Type = "bool",
				},
				{
					string Name = "ContactPointCount",
					string Description = "Returns how many points of contact there are.",
					string Type = "uint",
				},
				{
					string Name = "ContactPoints",
					string Description = "Returns a range to iterate through all of the contact points.",
					string Type = "ContactPointRange",
				},
				{
					string Name = "IsNew",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "FirstPoint",
					string Description = "Just a helper when we don't care about iterating through the points and we just want a point to sample.",
					string Type = "ContactPoint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "NetPeerClosed",
			string BaseClass = "Event",
			string Description = "Dispatched before gracefully closing the net peer.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "Joysticks",
			string BaseClass = "",
			string Description = "Joysticks is a collection of all joysticks available.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "JoystickCount",
					string Description = "Get the number of joysticks.",
					string Type = "uint",
				},
				{
					string Name = "Joysticks",
					string Description = "Creates the joystick system and attempts to acquire any available joysticks.",
					string Type = "",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JoystickFound",
					string EventType = "JoystickEvent",
				},
				{
					string EventName = "JoystickLost",
					string EventType = "JoystickEvent",
				},
				{
					string EventName = "JoysticksChanged",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "DeferredRenderer",
			string BaseClass = "Renderer",
			string Description = "Deferred Scene renderer. Renders a Geometric scene using the deferred rendering method.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ClearColor",
					string Description = "Color to clear the screen.",
					string Type = "Vec4",
				},
				{
					string Name = "DrawNonVisible",
					string Description = "Draw editor only materials.",
					string Type = "bool",
				},
				{
					string Name = "DrawDebugObjects",
					string Description = "Do debug drawing.",
					string Type = "bool",
				},
				{
					string Name = "DrawEditorIcons",
					string Description = "Draw editor icons.",
					string Type = "bool",
				},
				{
					string Name = "EditorIconDepth",
					string Description = "Depth for editor icons.",
					string Type = "bool",
				},
				{
					string Name = "Hdr",
					string Description = "Use of high dynamic range color.",
					string Type = "bool",
				},
				{
					string Name = "Shadows",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "AntiAliasing",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Refraction",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Reflections",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "ReflectionEnvironment",
					string Description = "",
					string Type = "Texture",
				},
				{
					string Name = "GodRays",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "RenderMasks",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Glow",
					string Description = "Effects brighter than GlowThreshold will blowout.",
					string Type = "bool",
				},
				{
					string Name = "GlowThreshold",
					string Description = "Brightness threshold to control glow.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
				"Renderer",
			],
		},
		{
			string Name = "Feelers",
			string BaseClass = "MovementBase",
			string Description = "Rotates the object away from obstacles by using feeler sensors that detect walls.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeRadians",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeDegrees",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is the component active.",
					string Type = "bool",
				},
				{
					string Name = "MaxAngleChange",
					string Description = "The maximum angle that this component can output.",
					string Type = "float",
				},
				{
					string Name = "Strength",
					string Description = "The strength of this particular movement component.",
					string Type = "float",
				},
				{
					string Name = "QueryOnly",
					string Description = "Do we query the component(and not rotate our object?)",
					string Type = "bool",
				},
				{
					string Name = "DebugDraw",
					string Description = "Do we draw the debug information?",
					string Type = "bool",
				},
				{
					string Name = "FeelerMode",
					string Description = "What kind of mode are we in with the feelers.",
					string Type = "FeelerMode::Type",
				},
				{
					string Name = "SideFeelerAngle",
					string Description = "The angle of the side feelers.",
					string Type = "float",
				},
				{
					string Name = "SideFeelerDistance",
					string Description = "The max distance of the side feelers.",
					string Type = "float",
				},
				{
					string Name = "PrimaryFeelerMaxAngle",
					string Description = "The random angle that the primary feeler is allowed to move in.",
					string Type = "float",
				},
				{
					string Name = "PrimaryFeelerDistance",
					string Description = "The max distance of the primary feeler.",
					string Type = "float",
				},
				{
					string Name = "LocalOffset",
					string Description = "The offset in local space of the ray casting.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "ObjectSystem",
			string BaseClass = "ParticleSystemCommonData",
			string Description = "Object System creates particles as object.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AllParticles",
					string Description = "Allows direct editing of particles.",
					string ReturnValue = "ParticleListRange",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "ChildMode",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "SystemSpace",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "DrawOrder",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "WarmUpTime",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Tint",
					string Description = "Color to tint/multiply all particles in the system.",
					string Type = "Vec4",
				},
				{
					string Name = "StartRotation",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "RandomRotation",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "StartTorque",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "RandomTorque",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "FaceVelocity",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "EffectsTranslation",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "EffectsScale",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "EffectsColor",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "ControlsLifetime",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "SpawnArchetype",
					string Description = "",
					string Type = "Archetype",
				},
				{
					string Name = "SystemSize",
					string Description = "Size of the particles system for visibility culling.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ParticlesSpawned",
					string EventType = "ParticleEvent",
				},
			],
			Array Tags = 
			[
				"Particle",
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "ObjectLinkEdge",
			string BaseClass = "",
			string Description = "A directed edge between a cog and an object link.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "SelfCog",
					string Description = "The cog that this edge on the object link is connected to.",
					string Type = "Cog",
				},
				{
					string Name = "OtherCog",
					string Description = "The other cog that the object link is connected to(the one not part of this edge).",
					string Type = "Cog",
				},
				{
					string Name = "ObjectLink",
					string Description = "The object link that this edge is connected to.",
					string Type = "ObjectLink",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "ParticleSystemCommonData",
			string BaseClass = "ParticleSystem",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AllParticles",
					string Description = "Allows direct editing of particles.",
					string ReturnValue = "ParticleListRange",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "ChildMode",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "SystemSpace",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "DrawOrder",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "WarmUpTime",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Tint",
					string Description = "Color to tint/multiply all particles in the system.",
					string Type = "Vec4",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ParticlesSpawned",
					string EventType = "ParticleEvent",
				},
			],
			Array Tags = 
			[
				"Particle",
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "NetPeerOpened",
			string BaseClass = "Event",
			string Description = "Dispatched after successfully opening the net peer.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ZilchPluginConfig",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "AttemptedIdeToolsInstall",
					string Description = "If on this machine we attempted to install IDE tools for plugins.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "Blocking",
			string BaseClass = "Component",
			string Description = "Responsible for determining whether or not the object blocks path finding.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "TimeSpace",
			string BaseClass = "Component",
			string Description = "Time space component controls time for a Space.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "TogglePause",
					string Description = "Toggles the state of paused.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Step",
					string Description = "Allows the engine to be advance one frame forward. Useful for debugging one frame at a time.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "GloballyPaused",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "DtOrZero",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "TimeMode",
					string Description = "When set to fixed framerate the Dt/frame time will never change(it will send whatever the project frame-rate-limiter is set to) This means it is important to run with a frame-rate limiter of some kind otherwise the game will appear to run much faster/slower Note: For determinism, you should always run in FixedFrametime mode When set to actual framerate we will send out the float time that the engine is encountering(clamped by MinDt/ MaxDt)",
					string Type = "uint",
				},
				{
					string Name = "MinDt",
					string Description = "The minimum amount of time we send when running in'ActualFrametime' mode Ideally this is set to a very small non-zero value to prevent any division by zero errors.",
					string Type = "float",
				},
				{
					string Name = "MaxDt",
					string Description = "The maximum amount of time we send when running in'ActualFrametime' mode If this value is set too high and the user does anything to pause their system or the game(example grabbing the window) then a large frame time will be sent out and physics objects will jump very far(causing tunnelling and random bounces)",
					string Type = "float",
				},
				{
					string Name = "TimeScale",
					string Description = "Scale the speed of time for interesting effects like bullet time or fast pased gameplay.",
					string Type = "float",
				},
				{
					string Name = "Paused",
					string Description = "If the time space is paused then we cease sending out logic update events When paused, the Dt will remain at whatever it was(it will NOT be set to 0)",
					string Type = "bool",
				},
				{
					string Name = "Dt",
					string Description = "",
					string Type = "Real",
				},
				{
					string Name = "RealDt",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "TimePassed",
					string Description = "",
					string Type = "Real",
				},
				{
					string Name = "RealTimePassed",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Frame",
					string Description = "The current frame we are on(starts at 0 and counts up for every frame that is run) This value counts up regardless of if the space is paused.",
					string Type = "int",
				},
				{
					string Name = "StepCount",
					string Description = "Causes the engine to update multiple times before rendering a frame.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "LogicUpdate",
					string EventType = "UpdateEvent",
				},
				{
					string EventName = "FrameUpdate",
					string EventType = "UpdateEvent",
				},
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "NetPeerSentUserAddResponse",
			string BaseClass = "Event",
			string Description = "Dispatched after sending a net user add response.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirNetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Their net peer ID.",
					string Type = "IpAddress",
				},
				{
					string Name = "TheirRequestBundle",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "EventBundle",
				},
				{
					string Name = "OurAddResponse",
					string Description = "Their bundled request event data.",
					string Type = "NetUserAddResponse::Enum",
				},
				{
					string Name = "OurResponseBundle",
					string Description = "Our add response.",
					string Type = "EventBundle",
				},
				{
					string Name = "TheirNetUserId",
					string Description = "Our bundled response event data.",
					string Type = "NetUserId",
				},
				{
					string Name = "TheirNetUser",
					string Description = "Their net user ID(set only if accepted)",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "TextEditorConfig",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "TabWidth",
					string Description = "Number of spaces inserted for tabs.",
					string Type = "TabWidth::Type",
				},
				{
					string Name = "ShowWhiteSpace",
					string Description = "If we show whitespace as special symbols in the text editor.",
					string Type = "bool",
				},
				{
					string Name = "LineNumbers",
					string Description = "Show Line numbers.",
					string Type = "bool",
				},
				{
					string Name = "CodeFolding",
					string Description = "Is code folding enabled?",
					string Type = "bool",
				},
				{
					string Name = "ConfidentAutoCompleteOnSymbols",
					string Description = "When the auto-complete is confident in its results(green), this controls whether or not we will finish completion on any symbol rather than just Tab Non-confident results(red) always require the user to press Tab(or Enter if AutoCompleteOnEnter is set)",
					string Type = "bool",
				},
				{
					string Name = "LocalWordCompletion",
					string Description = "Whether we include local words from the current document/ language.",
					string Type = "bool",
				},
				{
					string Name = "KeywordAndTypeCompletion",
					string Description = "Whether we include keywords and types from the languages.",
					string Type = "bool",
				},
				{
					string Name = "AutoCompleteOnEnter",
					string Description = "Whether or not the auto-complete allows enter(similar to Tab) to be used as an auto-completer If the user manually scrolls through the list of suggestions, Enter will always complete regardless of this option.",
					string Type = "bool",
				},
				{
					string Name = "ColorScheme",
					string Description = "Name of color scheme to use.",
					string Type = "String",
				},
				{
					string Name = "FontSize",
					string Description = "Default Font Size.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "Archetype",
			string BaseClass = "Resource",
			string Description = "An archetype is a resource contains the serialized data definition of an object. The archetype stores a binary cache of the serialization data and the source file for debugging and for archetype updating.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "Shader",
			string BaseClass = "DocumentResource",
			string Description = "Shader resource class is the interface to a GPU program.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "WeightedTable",
			string BaseClass = "Resource",
			string Description = "Given values and probabilities, rolls a loaded die over these entries. Useful when wanting to have probabilities that one of n events will happen, such as what item to create on an object destruction. This table cannot be emptied because then there would be no value to return on a sample call.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "size",
					string Description = "How many items are in the table.",
					string ReturnValue = "uint",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Sample",
					string Description = "Randomly sample the table and return the value that was rolled. Takes two random floats from[0,1).",
					string ReturnValue = "ValueType",
					string Arguments = "(float random1, float random2)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "random1",
						},
						{
							string Type = "float",
							string Name = "random2",
						},
					],
				},
				{
					string Name = "SampleIndex",
					string Description = "Randomly sample the table and return the index of the value that was rolled. Takes two random floats from[0,1).",
					string ReturnValue = "uint",
					string Arguments = "(float random1, float random2)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "random1",
						},
						{
							string Type = "float",
							string Name = "random2",
						},
					],
				},
				{
					string Name = "ValueAtIndex",
					string Description = "Get the value in the table at the provided index.",
					string ReturnValue = "ValueType",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "ProbabilityAtIndex",
					string Description = "Get the probability in the table at the provided index.",
					string ReturnValue = "WeightType",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "NavMeshSource",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "CollisionEvent",
			string BaseClass = "BaseCollisionEvent",
			string Description = "Collision event for when a contact begins, ends, or is persisted. Contains the point that triggered the begin/end(IncidentPoint). If it is a persistent collision, the point is just point 0 from the manifold.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Object",
					string Description = "The object that this event was sent to.",
					string Type = "Cog",
				},
				{
					string Name = "OtherObject",
					string Description = "The other object in this event. There were two objects A and B, we sent to A so this is B.",
					string Type = "Cog",
				},
				{
					string Name = "ContactPointCount",
					string Description = "Returns how many points of contact there are.",
					string Type = "uint",
				},
				{
					string Name = "IsGhost",
					string Description = "Returns whether or not this was a ghost collision.",
					string Type = "bool",
				},
				{
					string Name = "ContactPoints",
					string Description = "Returns a range to iterate through all of the contact points.",
					string Type = "ContactPointRange",
				},
				{
					string Name = "FirstPoint",
					string Description = "Returns the point that caused the begin/end to happen.",
					string Type = "ContactPoint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Event",
			],
		},
		{
			string Name = "Transform",
			string BaseClass = "Component",
			string Description = "Transform component class. The transform component provides the position, rotation and scale of an object.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SetRotationBases",
					string Description = "Generates a rotation matrix from the given bases.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 facing, Vec3 up, Vec3 right)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "facing",
						},
						{
							string Type = "Vec3",
							string Name = "up",
						},
						{
							string Type = "Vec3",
							string Name = "right",
						},
					],
				},
				{
					string Name = "TransformNormal",
					string Description = "Transforms a local normal(direction) into world space.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 normal)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "normal",
						},
					],
				},
				{
					string Name = "TransformPoint",
					string Description = "Transforms a local point into world space.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 point)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "point",
						},
					],
				},
				{
					string Name = "TransformNormalLocal",
					string Description = "Transforms a normal by the local matrix(ignores parent's transform) Needed now because there is no quaternion times vector in script.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 normal)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "normal",
						},
					],
				},
				{
					string Name = "TransformPointLocal",
					string Description = "Transforms a point by the local matrix(ignores parent's transform)",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 point)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "point",
						},
					],
				},
				{
					string Name = "TransformNormalInverse",
					string Description = "Transforms a world normal(direction) into local space.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 normal)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "normal",
						},
					],
				},
				{
					string Name = "TransformPointInverse",
					string Description = "Transforms a world point into local space.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 point)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "point",
						},
					],
				},
				{
					string Name = "RotateLocal",
					string Description = "Rotate object in local space.",
					string ReturnValue = "void",
					string Arguments = "(Quat rotation)",
					Array ParsedArguments = 
					[
						{
							string Type = "Quat",
							string Name = "rotation",
						},
					],
				},
				{
					string Name = "RotateWorld",
					string Description = "Rotate object in world space.",
					string ReturnValue = "void",
					string Arguments = "(Quat rotation)",
					Array ParsedArguments = 
					[
						{
							string Type = "Quat",
							string Name = "rotation",
						},
					],
				},
				{
					string Name = "RotateAround",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Vec3 point, Quat rotation)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "point",
						},
						{
							string Type = "Quat",
							string Name = "rotation",
						},
					],
				},
				{
					string Name = "RotateAnglesLocal",
					string Description = "Rotate object in local space by the given Euler angle vector(in radians).",
					string ReturnValue = "void",
					string Arguments = "(Vec3 angles)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "angles",
						},
					],
				},
				{
					string Name = "RotateAnglesWorld",
					string Description = "Rotate object in world space by the given Euler angle vector(in radians).",
					string ReturnValue = "void",
					string Arguments = "(Vec3 angles)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "angles",
						},
					],
				},
				{
					string Name = "SetEulerAnglesXYZ",
					string Description = "Sets the rotation of the transform by the given Euler angles in radians.",
					string ReturnValue = "void",
					string Arguments = "(float xRadians, float yRadians, float zRadians)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "xRadians",
						},
						{
							string Type = "float",
							string Name = "yRadians",
						},
						{
							string Type = "float",
							string Name = "zRadians",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Translation",
					string Description = "Local Translation relative to parent.",
					string Type = "Vec3",
				},
				{
					string Name = "Rotation",
					string Description = "Local rotation relative to parent.",
					string Type = "Quat",
				},
				{
					string Name = "Scale",
					string Description = "Local Scale relative to parent.",
					string Type = "Vec3",
				},
				{
					string Name = "EulerAngles",
					string Description = "The rotation of the transform as an Euler angle vector in radians.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalScale",
					string Description = "Local Scale relative to parent.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalRotation",
					string Description = "Local rotation relative to parent.",
					string Type = "Quat",
				},
				{
					string Name = "LocalTranslation",
					string Description = "Local Translation relative to parent.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldScale",
					string Description = "Scale in World Space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldRotation",
					string Description = "Rotation in World Space.",
					string Type = "Quat",
				},
				{
					string Name = "WorldTranslation",
					string Description = "Translation in World Space.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Core",
			],
		},
		{
			string Name = "TextureRegion",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "ResourceTable",
			string BaseClass = "Resource",
			string Description = "A table of resources(or strings) that can be indexed, searched by name or sampled randomly. The table can be sampled to return a string or a resource pointer. If other info about the sampled value is needed, the table can be sampled for an index that can then be used to fetch the name, value, resource and weight at that index. This index can also be used to randomly sample arrays that are created along-side this resource.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ResourceTypeContained",
					string Description = "Returns the kind of resource contained in this table.",
					string ReturnValue = "String",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetNameAt",
					string Description = "Returns the name of the item at the given index.",
					string ReturnValue = "ValueType",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "GetValueAt",
					string Description = "Returns the name of the value at the given index.",
					string ReturnValue = "ValueType",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "GetWeightAt",
					string Description = "Returns the weight of the item at the given index.",
					string ReturnValue = "WeightType",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "GetResourceAt",
					string Description = "Returns the resource that represents the value at the given index(returns null in string mode).",
					string ReturnValue = "Resource",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SampleIndex",
					string Description = "Samples the table to return a random index into the table. Takes two(different) random floats from[0,1) in order to sample.",
					string ReturnValue = "uint",
					string Arguments = "(float random1, float random2)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "random1",
						},
						{
							string Type = "float",
							string Name = "random2",
						},
					],
				},
				{
					string Name = "SampleValue",
					string Description = "Samples the table to return a random value. Takes two(different) random floats from[0,1) in order to sample. Returns an empty string if the table is empty.",
					string ReturnValue = "ValueType",
					string Arguments = "(float random1, float random2)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "random1",
						},
						{
							string Type = "float",
							string Name = "random2",
						},
					],
				},
				{
					string Name = "FindValue",
					string Description = "Searches for a value by name. Returns an empty string if the name did not exist.",
					string ReturnValue = "ValueType",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "SampleResource",
					string Description = "Samples the table to return a random value. Takes two(different) random floats from[0,1) in order to sample. Returns null if the table is empty or the table is in String mode.",
					string ReturnValue = "Resource",
					string Arguments = "(float random1, float random2)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "random1",
						},
						{
							string Type = "float",
							string Name = "random2",
						},
					],
				},
				{
					string Name = "FindResource",
					string Description = "Searches for a value by name and returns the corresponding resource pointer. Returns null if the name does not exist(or if the table was in String mode).",
					string ReturnValue = "Resource",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindIndexOfResource",
					string Description = "Get the index of a resource. Returns-1 if not found.",
					string ReturnValue = "int",
					string Arguments = "(Resource resource)",
					Array ParsedArguments = 
					[
						{
							string Type = "Resource",
							string Name = "resource",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "ResourceType",
					string Description = "Stores the kind of resource this contains.",
					string Type = "String",
				},
				{
					string Name = "Size",
					string Description = "Returns how many items are stored in the table.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "GravityEffect",
			string BaseClass = "BasicDirectionEffect",
			string Description = "A constant acceleration that is applied in the given direction(mass is ignored). This is useful for creating gravity(either on the entire world or in a region) that will push/pull objects in a given direction at a constant acceleration.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "LocalSpaceDirection",
					string Description = "Determines if the direction that the effect is applied is in local or world space. The length of this vector is preserved when applying the force(non-normalized vectors will change the strength).",
					string Type = "bool",
				},
				{
					string Name = "Strength",
					string Description = "An extra scalar multiplier to change the magnitude of the applied effect.",
					string Type = "float",
				},
				{
					string Name = "Direction",
					string Description = "The direction that the effect will be applied in(may be in local or world space depending on the LocalSpaceDirection property).",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "PhysicsSpace",
			string BaseClass = "Component",
			string Description = "The PhysicsSpace is an""instance"" of a world. This world manages and stores all of the other physical components of this world. PhysicSpaces act independently of each other.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddPairFilter",
					string Description = "Filters these two cogs to not resolve collision. This is a runtime only feature and will not be saved.",
					string ReturnValue = "void",
					string Arguments = "(Cog cog1, Cog cog2)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog1",
						},
						{
							string Type = "Cog",
							string Name = "cog2",
						},
					],
				},
				{
					string Name = "AddHierarchyPairFilter",
					string Description = "Adds a filter to ignore collision between both trees passed in. See AddPairFilter for more info.",
					string ReturnValue = "void",
					string Arguments = "(Cog cog1, Cog cog2)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog1",
						},
						{
							string Type = "Cog",
							string Name = "cog2",
						},
					],
				},
				{
					string Name = "RemovePairFilter",
					string Description = "Removes the filter between these two cogs so they can collide again.",
					string ReturnValue = "void",
					string Arguments = "(Cog cog1, Cog cog2)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog1",
						},
						{
							string Type = "Cog",
							string Name = "cog2",
						},
					],
				},
				{
					string Name = "RemoveHierarchyPairFilter",
					string Description = "Removes the filters between both trees. See RemovePairFilter for more info.",
					string ReturnValue = "void",
					string Arguments = "(Cog cog1, Cog cog2)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog1",
						},
						{
							string Type = "Cog",
							string Name = "cog2",
						},
					],
				},
				{
					string Name = "CreateDefaultCastFilter",
					string Description = "Returns a defaulted CastFilter for use in script.",
					string ReturnValue = "CastFilter",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FlushPhysicsQueue",
					string Description = "Debug.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputePushImpulse",
					string Description = "Computes the velocity to push a rigid body based upon a velocity, normal and world point. The normal is assumed to point from the other body to the pushing object.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 pushVelocity, Vec3 pushNormal, RigidBody otherBody, Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "pushVelocity",
						},
						{
							string Type = "Vec3",
							string Name = "pushNormal",
						},
						{
							string Type = "RigidBody",
							string Name = "otherBody",
						},
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
				{
					string Name = "CastRayFirst",
					string Description = "Performs a ray cast and returns the first object that is collided with.",
					string ReturnValue = "CastResult",
					string Arguments = "(Ray worldRay)",
					Array ParsedArguments = 
					[
						{
							string Type = "Ray",
							string Name = "worldRay",
						},
					],
				},
				{
					string Name = "CastRayFirstFiltered",
					string Description = "Performs a ray cast and returns the first object that is collided with.",
					string ReturnValue = "CastResult",
					string Arguments = "(Ray worldRay, CastFilter filter)",
					Array ParsedArguments = 
					[
						{
							string Type = "Ray",
							string Name = "worldRay",
						},
						{
							string Type = "CastFilter",
							string Name = "filter",
						},
					],
				},
				{
					string Name = "CastRayResults",
					string Description = "Returns the results of the ray cast. The number of objects returned is based on the count passed in.",
					string ReturnValue = "CastResultsRange",
					string Arguments = "(Ray worldRay, uint count)",
					Array ParsedArguments = 
					[
						{
							string Type = "Ray",
							string Name = "worldRay",
						},
						{
							string Type = "uint",
							string Name = "count",
						},
					],
				},
				{
					string Name = "CastRayResultsFiltered",
					string Description = "Returns the results of the filtered ray cast. The number of objects returned is based on the count passed in.",
					string ReturnValue = "CastResultsRange",
					string Arguments = "(Ray worldRay, uint count, CastFilter filter)",
					Array ParsedArguments = 
					[
						{
							string Type = "Ray",
							string Name = "worldRay",
						},
						{
							string Type = "uint",
							string Name = "count",
						},
						{
							string Type = "CastFilter",
							string Name = "filter",
						},
					],
				},
				{
					string Name = "CastSegmentResults",
					string Description = "Returns the results of the segment cast. The amount of objects returned is based on the count passed in.",
					string ReturnValue = "CastResultsRange",
					string Arguments = "(Vec3 start, Vec3 end, uint count)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "start",
						},
						{
							string Type = "Vec3",
							string Name = "end",
						},
						{
							string Type = "uint",
							string Name = "count",
						},
					],
				},
				{
					string Name = "CastSegmentResultsFiltered",
					string Description = "Returns the results of the filtered segment cast. The number of objects returned is based on the count passed in.",
					string ReturnValue = "CastResultsRange",
					string Arguments = "(Vec3 start, Vec3 end, uint count, CastFilter filter)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "start",
						},
						{
							string Type = "Vec3",
							string Name = "end",
						},
						{
							string Type = "uint",
							string Name = "count",
						},
						{
							string Type = "CastFilter",
							string Name = "filter",
						},
					],
				},
				{
					string Name = "DispatchWithinSphere",
					string Description = "Dispatches an event to all objects within the given sphere.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 center, float radius, String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "center",
						},
						{
							string Type = "float",
							string Name = "radius",
						},
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchWithinBox",
					string Description = "Dispatches an event to all objects within the given box.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 center, Vec3 size, String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "center",
						},
						{
							string Type = "Vec3",
							string Name = "size",
						},
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "CastAabbResults",
					string Description = "Returns the results of the filtered Aabb cast. The amount of objects returned is based on the count passed in.",
					string ReturnValue = "CastResultsRange",
					string Arguments = "(Vec3 center, Vec3 size, uint count, CastFilter filter)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "center",
						},
						{
							string Type = "Vec3",
							string Name = "size",
						},
						{
							string Type = "uint",
							string Name = "count",
						},
						{
							string Type = "CastFilter",
							string Name = "filter",
						},
					],
				},
				{
					string Name = "CastSphereResults",
					string Description = "Returns the results of the filtered Sphere cast. The amount of objects returned is based on the count passed in.",
					string ReturnValue = "CastResultsRange",
					string Arguments = "(Vec3 center, float radius, uint count, CastFilter filter)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "center",
						},
						{
							string Type = "float",
							string Name = "radius",
						},
						{
							string Type = "uint",
							string Name = "count",
						},
						{
							string Type = "CastFilter",
							string Name = "filter",
						},
					],
				},
				{
					string Name = "CastColliderResults",
					string Description = "Cast out a collider to see what it's colliding with.",
					string ReturnValue = "CastResultsRange",
					string Arguments = "(Vec3 offset, Collider testCollider, CastFilter filter)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "offset",
						},
						{
							string Type = "Collider",
							string Name = "testCollider",
						},
						{
							string Type = "CastFilter",
							string Name = "filter",
						},
					],
				},
				{
					string Name = "SweepCollider",
					string Description = "Generate sweep data from the current position to a new location(stop at the first contact).",
					string ReturnValue = "SweepResult",
					string Arguments = "(Collider collider, Vec3 worldOffset, CastFilter filter)",
					Array ParsedArguments = 
					[
						{
							string Type = "Collider",
							string Name = "collider",
						},
						{
							string Type = "Vec3",
							string Name = "worldOffset",
						},
						{
							string Type = "CastFilter",
							string Name = "filter",
						},
					],
				},
				{
					string Name = "ContinuousCollider",
					string Description = "",
					string ReturnValue = "ContinuousResultRange",
					string Arguments = "(Collider collider, Vec3 velocity, float dt, CastFilter filter)",
					Array ParsedArguments = 
					[
						{
							string Type = "Collider",
							string Name = "collider",
						},
						{
							string Type = "Vec3",
							string Name = "velocity",
						},
						{
							string Type = "float",
							string Name = "dt",
						},
						{
							string Type = "CastFilter",
							string Name = "filter",
						},
					],
				},
				{
					string Name = "CreateJoint",
					string Description = "Creates a joint of jointName between the two cogs passed in. The anchor of the joint is set to the world point passed in.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog0, Cog cog1, String jointName, Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog0",
						},
						{
							string Type = "Cog",
							string Name = "cog1",
						},
						{
							string Type = "String",
							string Name = "jointName",
						},
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
				{
					string Name = "WhyAreTheyNotColliding",
					string Description = "",
					string ReturnValue = "String",
					string Arguments = "(Cog cog1, Cog cog2)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog1",
						},
						{
							string Type = "Cog",
							string Name = "cog2",
						},
					],
				},
				{
					string Name = "ToggleDebugFlag",
					string Description = "Enable or disable debug flags.",
					string ReturnValue = "void",
					string Arguments = "(uint flag)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "flag",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "SubStepCount",
					string Description = "The number of iterations the physics space will take every frame. Used to achieve higher accuracy and visual results.",
					string Type = "uint",
				},
				{
					string Name = "AllowSleep",
					string Description = "Determines if anything in the space is allowed to sleep or not.",
					string Type = "bool",
				},
				{
					string Name = "Mode2D",
					string Description = "Determines if all new objects should operate in 2d mode.",
					string Type = "bool",
				},
				{
					string Name = "Deterministic",
					string Description = "Does some extra work to help enforce determinism in the simulation.",
					string Type = "bool",
				},
				{
					string Name = "CollisionTable",
					string Description = "The collision table resource being used to filter collisions in this space.",
					string Type = "CollisionTable",
				},
				{
					string Name = "PhysicsSolverConfig",
					string Description = "",
					string Type = "PhysicsSolverConfig",
				},
				{
					string Name = "IslandType",
					string Description = "",
					string Type = "Integer",
				},
				{
					string Name = "PreProcessing",
					string Description = "",
					string Type = "Integer",
				},
				{
					string Name = "PostProcessIslands",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "IsSolverShared",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "IslandCount",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "ContactTangentType",
					string Description = "How should tangents be calculated? Don't use if you don't know what this is.",
					string Type = "uint",
				},
				{
					string Name = "DynamicBroadphaseType",
					string Description = "What kind of broadphase is used for dynamic objects(those with RigidBodies).",
					string Type = "String",
				},
				{
					string Name = "StaticBroadphaseType",
					string Description = "What kind of broadphase is used for static objects(those without RigidBodies).",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "PhysicsUpdateFinished",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
			],
		},
		{
			string Name = "NetObjectOnline",
			string BaseClass = "Event",
			string Description = "Dispatched after the net object is brought online.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "GameSession",
					string Description = "Data.",
					string Type = "GameSession",
				},
				{
					string Name = "Space",
					string Description = "Network game session.",
					string Type = "Space",
				},
				{
					string Name = "Object",
					string Description = "Network space.",
					string Type = "Cog",
				},
				{
					string Name = "IsStartOfLifespan",
					string Description = "Network object.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "Projector",
			string BaseClass = "Component",
			string Description = "Projector component class. Used for masking or coloring lights.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "IsActive",
					string Description = "Is the projector active?",
					string Type = "bool",
				},
				{
					string Name = "IsMask",
					string Description = "Is project just a simple mask or a projected image.",
					string Type = "bool",
				},
				{
					string Name = "Texture",
					string Description = "",
					string Type = "Texture",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
			],
		},
		{
			string Name = "ZilchPluginSource",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "OpenIde",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "OpenDirectory",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "CopyPluginDependencies",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "CompileDebug",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "CompileRelease",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Clean",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "InstallIdeTools",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "LinearAxisJoint",
			string BaseClass = "Joint",
			string Description = "A linear axis joint is used to keep an object locked on a plane that is defined by a normal. Special case use is for the dynamic controller. Should not be created by anyone else! If it is absolutely desired for movement, then the constraint should be turned off and a motor should be added. This will then push the objects in the direction of the normal of the plane.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "WorldAxis",
					string Description = "The axis in world space that the object will move along.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "Skeleton",
			string BaseClass = "Resource",
			string Description = "Skeleton resource stores the bind posed used for skinned animation.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "Sprite",
			string BaseClass = "BaseSprite",
			string Description = "Sprite component. Sprite component is a 2d sprite class used for 2d sprites 3d billboarding.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "Color",
					string Description = "Modulation color of this sprite.",
					string Type = "Vec4",
				},
				{
					string Name = "BlendMode",
					string Description = "Blend Mode of the sprite.",
					string Type = "BlendMode::Type",
				},
				{
					string Name = "GeometryMode",
					string Description = "Geometry mode determines how the sprite is mapped to 3d.",
					string Type = "SpriteGeometryMode::Type",
				},
				{
					string Name = "SpriteLayer",
					string Description = "",
					string Type = "SpriteLayer",
				},
				{
					string Name = "SpriteSource",
					string Description = "The SpriteSource for this sprite.",
					string Type = "SpriteSource",
				},
				{
					string Name = "RenderMask",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "FlipX",
					string Description = "Flip the sprite on the X axis.",
					string Type = "bool",
				},
				{
					string Name = "FlipY",
					string Description = "Flip the sprite on the Y axis.",
					string Type = "bool",
				},
				{
					string Name = "AnimationActive",
					string Description = "Enables sprite frame animation.",
					string Type = "bool",
				},
				{
					string Name = "AnimationSpeed",
					string Description = "Animation Speed.",
					string Type = "float",
				},
				{
					string Name = "StartFrame",
					string Description = "Start Frame of animation.",
					string Type = "uint",
				},
				{
					string Name = "CurrentFrame",
					string Description = "Current frame of animation.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "SpriteAnimationEnded",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "PhyGunJoint",
			string BaseClass = "Joint",
			string Description = "A Physics gun joint is just a tool for the editor. This acts as a weld between an object and the world.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "TargetPoint",
					string Description = "The point in space that the object's point should match.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPoint",
					string Description = "The body point on the object that should match the target point.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPoint",
					string Description = "The world point on the object that should match the target point.",
					string Type = "Vec3",
				},
				{
					string Name = "TargetRotation",
					string Description = "The world space rotation that the basis of the object should match. Used to set the desired rotation of the object in world space.",
					string Type = "Quat",
				},
				{
					string Name = "WorldRotation",
					string Description = "Used to set the world rotation basis of the object that should be matched to the target rotation.",
					string Type = "Quat",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "HeightMapCollider",
			string BaseClass = "Collider",
			string Description = "Used to represent a height map for collision.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
				{
					string Name = "Thickness",
					string Description = "How thick the surface of the height map is.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "Path",
			string BaseClass = "Resource",
			string Description = "A resource for a path object. Bakes out the curve and figures out how to interpolate with a constant speed across all of the points.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "DrawPoints",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Vec3 offset, float drawSize)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "offset",
						},
						{
							string Type = "float",
							string Name = "drawSize",
						},
					],
				},
				{
					string Name = "AddControlPoint",
					string Description = "Adds a new control point to the end of the path. Recomputes the baked curve.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 point)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "point",
						},
					],
				},
				{
					string Name = "RemoveControlPoint",
					string Description = "Removes the control point at the given index. Recomputes the baked curve.",
					string ReturnValue = "void",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "GetControlPoint",
					string Description = "Get the n-th control point's position.",
					string ReturnValue = "Vec3",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetControlPoint",
					string Description = "Set the n-th control point's position. Recomputes the baked curve.",
					string ReturnValue = "void",
					string Arguments = "(uint index, Vec3 point)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
						{
							string Type = "Vec3",
							string Name = "point",
						},
					],
				},
				{
					string Name = "GetBakedPoint",
					string Description = "Get a point on the baked-out curve. Primarily used for debug drawing.",
					string ReturnValue = "Vec3",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SampleDistance",
					string Description = "Samples the curve at a given arc-length distance.",
					string ReturnValue = "SampleData",
					string Arguments = "(float distance)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "distance",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "ControlPointCount",
					string Description = "The number of control points currently making up the curve.",
					string Type = "uint",
				},
				{
					string Name = "BakedPointCount",
					string Description = "The number of points used to approximate the curve as linear line segments.",
					string Type = "uint",
				},
				{
					string Name = "TotalDistance",
					string Description = "The total arc-length of the curve. Use to normalize the curve if you wish.",
					string Type = "float",
				},
				{
					string Name = "Closed",
					string Description = "Does the path loop back on itself?",
					string Type = "bool",
				},
				{
					string Name = "Error",
					string Description = "The max number of units that a line segment is allowed to deviate from the curve.",
					string Type = "float",
				},
				{
					string Name = "PathType",
					string Description = "The kind of path(Linear, BSpline, CatmulRom). Determines how the control points affect the curve.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "Component",
			string BaseClass = "ZeroObject",
			string Description = "A component is an atomic piece of functionality that is composed into a Cogs to form game objects.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "LockStepSpace",
			string BaseClass = "Component",
			string Description = "Manages object sync testing as well as time manipulation in lock-step.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "MultiCollider",
			string BaseClass = "Collider",
			string Description = "A collider mainly used for the tile grid. Contains multiple boxes for collision and may implement a midphase internally. Used to reduce the number of objects in broadphase. Does not handle being dynamic, do not add a RigidBody- not tested!",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "NetChannelConfig",
			string BaseClass = "Resource",
			string Description = "Network Channel Configuration Configures the replication of a set of properties on the network.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "EventOnOutgoingPropertyChange",
					string Description = "Sets whether or not the event NetChannelOutgoingPropertyChange will be dispatched when an outgoing net property change is detected.",
					string Type = "bool",
				},
				{
					string Name = "EventOnIncomingPropertyChange",
					string Description = "Sets whether or not the event NetChannelIncomingPropertyChange will be dispatched when an incoming net property change is received.",
					string Type = "bool",
				},
				{
					string Name = "AuthorityMode",
					string Description = "Sets the change authority mode Controls whether or not change authority may be modified after component initialize.",
					string Type = "AuthorityMode::Enum",
				},
				{
					string Name = "Authority",
					string Description = "Sets the change authority Controls which peer has the authority to observe and replicate property changes Server Authority: Indicates only the server is allowed to observe and replicate property changes Client Authority: Indicates both the client and server are allowed to observe and replicate property changes Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time The server is still responsible for relaying all property changes to other clients, but will not replicate any property changes to the authority client However, the server is also still responsible for other replication commands(such as object creation/destruction), and these WILL be replicated to the authority client.",
					string Type = "Authority::Enum",
				},
				{
					string Name = "DetectionInterval",
					string Description = "Sets the change detection interval(in seconds) Controls how often the net channel is observed for changes.",
					string Type = "float",
				},
				{
					string Name = "DetectionMode",
					string Description = "Sets the change detection mode Controls how net channel changes are detected.",
					string Type = "DetectionMode::Enum",
				},
				{
					string Name = "ReplicateOnOnline",
					string Description = "Sets whether or not the net channel will be replicated when the net object comes online If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOnline event.",
					string Type = "bool",
				},
				{
					string Name = "ReplicateOnChange",
					string Description = "Sets whether or not the net channel will be replicated on net property change.",
					string Type = "bool",
				},
				{
					string Name = "ReplicateOnOffline",
					string Description = "Sets whether or not the net channel will be replicated when the net object goes offline If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOffline event.",
					string Type = "bool",
				},
				{
					string Name = "SerializationMode",
					string Description = "Sets the change serialization mode Controls whether or not to serialize all net properties or only net properties that have changed(using bit flags in between) during change replication.",
					string Type = "SerializationMode::Enum",
				},
				{
					string Name = "ReliabilityMode",
					string Description = "Sets the change reliability mode Controls whether or not net channel changes will be retransmitted should they get lost over the network.",
					string Type = "ReliabilityMode::Enum",
				},
				{
					string Name = "TransferMode",
					string Description = "Sets the change transfer mode Controls how net channel changes are to be ordered and released once received.",
					string Type = "TransferMode::Enum",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
				"Networking",
			],
		},
		{
			string Name = "AnimationNode",
			string BaseClass = "",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "Clone",
					string Description = "",
					string ReturnValue = "AnimationNode",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "IsActive",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "PrintNode",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(uint tabs)=0",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "tabs",
						},
					],
				},
				{
					string Name = "CollapseToPose",
					string Description = "Collapses all children to a pose node on the next Update.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SetNormalizedTime",
					string Description = "A value between[0-1].",
					string ReturnValue = "void",
					string Arguments = "(float normalizedTime)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "normalizedTime",
						},
					],
				},
				{
					string Name = "GetNormalizedTime",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "CollapseToPoseOnFinish",
					string Description = "Whether or not to collapse to a pose node when finished playing.",
					string Type = "bool",
				},
				{
					string Name = "Paused",
					string Description = "Whether or not the node is currently paused.",
					string Type = "bool",
				},
				{
					string Name = "Time",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Duration",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "TimeScale",
					string Description = "A scalar to dt when updating the node.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "SizerGizmo",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "AnchorGizmo",
					string Description = "Each of these will be created for the anchor points.",
					string Type = "Archetype",
				},
				{
					string Name = "Size",
					string Description = "Size setter/ getter.",
					string Type = "Vec3",
				},
				{
					string Name = "SnapMode",
					string Description = "Snapping.",
					string Type = "SizerSnapMode::Enum",
				},
				{
					string Name = "SnapDistance",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "BoxColor",
					string Description = "Debug draw colors.",
					string Type = "Vec4",
				},
				{
					string Name = "AnchorColor",
					string Description = "",
					string Type = "Vec4",
				},
				{
					string Name = "AnchorHoverColor",
					string Description = "",
					string Type = "Vec4",
				},
				{
					string Name = "ArrowColor",
					string Description = "",
					string Type = "Vec4",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "SizerGizmoModified",
					string EventType = "SizerGizmoEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Gizmo",
			],
		},
		{
			string Name = "JointDebugDrawConfig",
			string BaseClass = "Component",
			string Description = "Allows the user to override some parameters for debug drawing of joints. Used to debug draw more from different object perspectives and to change the size of drawn data. This class is nothing more than a piece of data that each joint looks at to determine how it draws itself.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Whether or not this component is active.",
					string Type = "bool",
				},
				{
					string Name = "Size",
					string Description = "A size modifier for the debug drawing. 1 is base size.",
					string Type = "float",
				},
				{
					string Name = "Detail",
					string Description = "The amount of detail to use when drawing. For example, the detail on a revolute will increase the number of lines used to draw the arc of a circle.",
					string Type = "float",
				},
				{
					string Name = "Object1Perspective",
					string Description = "If we draw the joint's debug info from the perspective of object 1. This is most useful when object 1 is marked as a static object and object 2 has free movement.",
					string Type = "bool",
				},
				{
					string Name = "Object2Perspective",
					string Description = "If we draw the joint's debug info from the perspective of object 2. This is most useful when object 2 is marked as a static object and object 1 has free movement.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "UniversalJoint",
			string BaseClass = "Joint",
			string Description = "A universal joint locks positional movement of two points together as well as locks rotation about 1 axis. This means it is a joint that constrains 4 axes and leaves 2 free rotational axes. This joint is most useful to model something like a arm or leg that has a nice range of rotational movement.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAxis0OfBodyA",
					string Description = "One of the two axes in local space of object A that the objects are allowed to rotate about.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAxis1OfBodyA",
					string Description = "One of the two axes in local space of object A that the objects are allowed to rotate about.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAxis0OfBodyB",
					string Description = "One of the two axes in local space of object B that the objects are allowed to rotate about.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAxis1OfBodyB",
					string Description = "One of the two axes in local space of object B that the objects are allowed to rotate about.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "NavGrid",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RequestPath",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(Real3, Real3, Cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
						{
							string Type = "Real3",
							string Name = "",
						},
						{
							string Type = "Cog",
							string Name = "",
						},
					],
				},
				{
					string Name = "CancelPathRequest",
					string Description = "",
					string ReturnValue = "Void",
					string Arguments = "(Cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "",
						},
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Heuristic",
					string Description = "",
					string Type = "Integer",
				},
				{
					string Name = "HeuristicWeight",
					string Description = "",
					string Type = "Real",
				},
				{
					string Name = "Rubberbanding",
					string Description = "",
					string Type = "Integer",
				},
				{
					string Name = "RemoveCoLinearPoints",
					string Description = "",
					string Type = "Boolean",
				},
				{
					string Name = "CurveType",
					string Description = "",
					string Type = "Integer",
				},
				{
					string Name = "PathResolution",
					string Description = "",
					string Type = "Integer",
				},
				{
					string Name = "Draw",
					string Description = "Debug draw the grid.",
					string Type = "bool",
				},
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "PathRequestFinished",
					string EventType = "PathRequestEvent",
				},
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "MovementBase",
			string BaseClass = "Component",
			string Description = "Base class for movement components.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeRadians",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeDegrees",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is the component active.",
					string Type = "bool",
				},
				{
					string Name = "MaxAngleChange",
					string Description = "The maximum angle that this component can output.",
					string Type = "float",
				},
				{
					string Name = "Strength",
					string Description = "The strength of this particular movement component.",
					string Type = "float",
				},
				{
					string Name = "QueryOnly",
					string Description = "Do we query the component(and not rotate our object?)",
					string Type = "bool",
				},
				{
					string Name = "DebugDraw",
					string Description = "Do we draw the debug information?",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "PrismaticJoint",
			string BaseClass = "Joint",
			string Description = "A prismatic joint is used to create something similar to a piston. This joint fixes all degrees of rotation and leaves one linear axis free. Therefore, the bodies will rotate with each other and move with each other, except on one axis they can slide in and out. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAngleA",
					string Description = "The rotation on object A that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "LocalAngleB",
					string Description = "The rotation on object B that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "LocalAxisA",
					string Description = "The locally defined axis on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAxisB",
					string Description = "The locally defined axis on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldAxis",
					string Description = "The axis in world space that is being rotated about.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "RandomContext",
			string BaseClass = "Component",
			string Description = "A random object that contains its own unique random state apart from all other instances of this class.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Bool",
					string Description = "Returns a random bool value.",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Int",
					string Description = "Returns a random int in the range of[0, MaxInt].",
					string ReturnValue = "int",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Float",
					string Description = "Returns a random float in the range[0,1].",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Real",
					string Description = "Returns a random float in the range[0,1].",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "UnitVector2",
					string Description = "Generates a unit length Vec2.",
					string ReturnValue = "Vec2",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Vector2",
					string Description = "Randomly generates a Vec2 with its length between min and max.",
					string ReturnValue = "Vec2",
					string Arguments = "(float minLength, float maxLength)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "minLength",
						},
						{
							string Type = "float",
							string Name = "maxLength",
						},
					],
				},
				{
					string Name = "UnitVector3",
					string Description = "Generates a unit length Vec3.",
					string ReturnValue = "Vec3",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Vector3",
					string Description = "Randomly generates a Vec3 with its length between min and max.",
					string ReturnValue = "Vec3",
					string Arguments = "(float minLength, float maxLength)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "minLength",
						},
						{
							string Type = "float",
							string Name = "maxLength",
						},
					],
				},
				{
					string Name = "Quaternion",
					string Description = "Random unit length quaternion. This is also a unit quaternion.",
					string ReturnValue = "Quat",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "RangeInclusiveMax",
					string Description = "Int in the range[min, max].",
					string ReturnValue = "int",
					string Arguments = "(int min, int max)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "min",
						},
						{
							string Type = "int",
							string Name = "max",
						},
					],
				},
				{
					string Name = "RangeExclusiveMax",
					string Description = "Int in the range[min, max)",
					string ReturnValue = "int",
					string Arguments = "(int min, int max)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "min",
						},
						{
							string Type = "int",
							string Name = "max",
						},
					],
				},
				{
					string Name = "IntVariance",
					string Description = "Int in the range[base- variance, base+ variance].",
					string ReturnValue = "int",
					string Arguments = "(int base, int variance)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "base",
						},
						{
							string Type = "int",
							string Name = "variance",
						},
					],
				},
				{
					string Name = "Range",
					string Description = "A random float in the range[min,max].",
					string ReturnValue = "float",
					string Arguments = "(float min, float max)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "min",
						},
						{
							string Type = "float",
							string Name = "max",
						},
					],
				},
				{
					string Name = "FloatVariance",
					string Description = "Returns a float in the range[base- variance, base+ variance].",
					string ReturnValue = "float",
					string Arguments = "(float base, float variance)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "base",
						},
						{
							string Type = "float",
							string Name = "variance",
						},
					],
				},
				{
					string Name = "RealVariance",
					string Description = "Returns a float in the range[base- variance, base+ variance].",
					string ReturnValue = "float",
					string Arguments = "(float base, float variance)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "base",
						},
						{
							string Type = "float",
							string Name = "variance",
						},
					],
				},
				{
					string Name = "DieRoll",
					string Description = "Randomly rolls a number in the range[1, sides].",
					string ReturnValue = "uint",
					string Arguments = "(uint sides)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "sides",
						},
					],
				},
				{
					string Name = "Probability",
					string Description = "Takes a given probability that we get a true value.",
					string ReturnValue = "bool",
					string Arguments = "(float probOfTrue)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "probOfTrue",
						},
					],
				},
				{
					string Name = "CoinFlip",
					string Description = "Returns true if the coin flips heads.",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Rotation",
					string Description = "Random rotation quaternion. This is the same as calling Quaternion()",
					string ReturnValue = "Quat",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "BellCurve",
					string Description = "Samples a bell curve with standard normal distribution in the range[0,1] This is equivalent to a Gaussian distribution with standard deviation of 1.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "BellCurveRange",
					string Description = "Samples a bell curve with in the range[center- range, center+ range] This uses a standard deviation of 1.",
					string ReturnValue = "float",
					string Arguments = "(float center, float range)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "center",
						},
						{
							string Type = "float",
							string Name = "range",
						},
					],
				},
				{
					string Name = "BellCurveDistribution",
					string Description = "Samples a bell curve in the range[center- range, center+ range] with the given standard deviation. Around 68% will lie within the 1st standard deviation.",
					string ReturnValue = "float",
					string Arguments = "(float center, float range, float standardDeviation)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "center",
						},
						{
							string Type = "float",
							string Name = "range",
						},
						{
							string Type = "float",
							string Name = "standardDeviation",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Seed",
					string Description = "Seeds the the random number generator.",
					string Type = "uint",
				},
				{
					string Name = "RandomSeed",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "MaxInt",
					string Description = "The max integer value that can be returned.",
					string Type = "int",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "ConvexMesh",
			string BaseClass = "Resource",
			string Description = "A convex mesh used to simulate dynamic mashes. Used by the DynamicMeshCollider.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
		},
		{
			string Name = "Joystick",
			string BaseClass = "",
			string Description = "A Joystick is associated with a hardware joystick, and provides the ability to query axes and buttons.",
			Array Methods = 
			[
				{
					string Name = "GetAxisValue",
					string Description = "Queries an axes and returns a value between[-1, 1] The valid range of axes is between 0 and'GetMaxAxes' If the axis is not valid, then the value returned is 0.",
					string ReturnValue = "float",
					string Arguments = "(int index)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "index",
						},
					],
				},
				{
					string Name = "GetAxisName",
					string Description = "",
					string ReturnValue = "String",
					string Arguments = "(int index)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "index",
						},
					],
				},
				{
					string Name = "GetAxisIndex",
					string Description = "",
					string ReturnValue = "int",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "GetAxisValueByName",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "GetButtonValue",
					string Description = "Queries a button and returns true if it is down, false if it is up The valid range of buttons is between 0 and'GetMaxButtons' If the button is not valid, then the value returned is false.",
					string ReturnValue = "bool",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "LoadInputMapping",
					string Description = "Load an input mapping.",
					string ReturnValue = "void",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "SaveInputMapping",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "StartCalibration",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(void)",
					Array ParsedArguments = 
					[
						{
							string Type = "void",
							string Name = "",
						},
					],
				},
				{
					string Name = "EndCalibration",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(void)",
					Array ParsedArguments = 
					[
						{
							string Type = "void",
							string Name = "",
						},
					],
				},
				{
					string Name = "Calibrating",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(void)",
					Array ParsedArguments = 
					[
						{
							string Type = "void",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "IsActive",
					string Description = "Gets whether or not the joystick is active.",
					string Type = "bool",
				},
				{
					string Name = "Name",
					string Description = "Get the name of the Joystick.",
					string Type = "String",
				},
				{
					string Name = "ButtonCount",
					string Description = "Get the number of buttons or axes.",
					string Type = "uint",
				},
				{
					string Name = "AxisCount",
					string Description = "",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JoystickButtonDown",
					string EventType = "JoystickEvent",
				},
				{
					string EventName = "JoystickButtonUp",
					string EventType = "JoystickEvent",
				},
				{
					string EventName = "JoystickUpdated",
					string EventType = "JoystickEvent",
				},
				{
					string EventName = "JoystickFound",
					string EventType = "JoystickEvent",
				},
				{
					string EventName = "JoystickLost",
					string EventType = "JoystickEvent",
				},
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "PrismaticJoint2d",
			string BaseClass = "Joint",
			string Description = "A prismatic joint is used to create something similar to a piston. This is the 2d version of the prismatic joint. This joint is used in 2d mode for increased speed and stability. The slider axis is projected onto the z axis(the z component is ignored) so that the objects can be arbitrarily far apart. The x and y rotations are also ignored since the objects are only allowed to rotate about the z axis. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAngleA",
					string Description = "The rotation on object A that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "LocalAngleB",
					string Description = "The rotation on object B that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "LocalAxisA",
					string Description = "The locally defined axis on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAxisB",
					string Description = "The locally defined axis on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldAxis",
					string Description = "The axis in world space that is being rotated about.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "Ribbon",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draw the object.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Spawning",
					string Description = "Whether or not it is active.",
					string Type = "bool",
				},
				{
					string Name = "LocalSpawnPointA",
					string Description = "The two local positions that the ribbon is spawned on.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalSpawnPointB",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "MaxLength",
					string Description = "The maximum length of the ribbon.",
					string Type = "uint",
				},
				{
					string Name = "LengthBetweenSpawn",
					string Description = "The length between each newly spawned segment of the ribbon(detail)",
					string Type = "float",
				},
				{
					string Name = "TimeBetweenSpawn",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "CurveType",
					string Description = "Adds smoothing for fast moving ribbons.",
					string Type = "Math::CurveType::Type",
				},
				{
					string Name = "CurveResolution",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "TextureScalar",
					string Description = "A scalar to the meshes UV's.",
					string Type = "Vec2",
				},
				{
					string Name = "FlipTextureX",
					string Description = "Texture flipping.",
					string Type = "bool",
				},
				{
					string Name = "FlipTextureY",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "UseDecayCurve",
					string Description = "Whether or not the decay curve is being used(this flag is needed because the engine does not support NULL resourced)",
					string Type = "bool",
				},
				{
					string Name = "DecayCurve",
					string Description = "Decay curve setter/getter.",
					string Type = "SampleCurve",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "MainConfig",
			string BaseClass = "Component",
			string Description = "Main configuration component.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ApplicationName",
					string Description = "Name of the application for separating config files.",
					string Type = "String",
				},
				{
					string Name = "BuildDate",
					string Description = "Build date.",
					string Type = "String",
				},
				{
					string Name = "BuildVersion",
					string Description = "Repository version.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "LockStepGame",
			string BaseClass = "Component",
			string Description = "Manages all the client/server/peer connections.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "QueueSyncedEvent",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(String eventId, LockStepEvent event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "LockStepEvent",
							string Name = "event",
						},
					],
				},
				{
					string Name = "GetPeerByGuid",
					string Description = "",
					string ReturnValue = "LockStepPeer",
					string Arguments = "(NetGuid guid)",
					Array ParsedArguments = 
					[
						{
							string Type = "NetGuid",
							string Name = "guid",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "BufferFramesAllowed",
					string Description = "How many frames of input buffering that we allow(should remain constant!) Note that this parameter.",
					string Type = "Frame",
				},
				{
					string Name = "DebugMode",
					string Description = "Controls whether we send/store extra information Typically used to find desyncs.",
					string Type = "bool",
				},
				{
					string Name = "UnsafeLocalPeer",
					string Description = "",
					string Type = "LockStepPeer",
				},
				{
					string Name = "UnsafeLocalPeerGuid",
					string Description = "",
					string Type = "NetGuid",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "LockStepBeginFrame",
					string EventType = "LockStepUpdateEvent",
				},
				{
					string EventName = "LockStepEndFrame",
					string EventType = "LockStepUpdateEvent",
				},
				{
					string EventName = "LockStepGameStarted",
					string EventType = "LockStepGameStartEvent",
				},
				{
					string EventName = "LockStepBeforeAcitveFrame",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "ThrustEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a directional force at the thrust effects center. When applied to a rigid body, this force will cause the rigid body to torque if the force's direction does not go through the center of mass. Useful for modeling any sort of a thruster.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "LocalSpaceDirection",
					string Description = "Determines if this force is to be applied in local or in world space.",
					string Type = "bool",
				},
				{
					string Name = "ForceStrength",
					string Description = "The strength of the force being applied in the force direction.",
					string Type = "float",
				},
				{
					string Name = "ForceDirection",
					string Description = "The direction that the force should be applied.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "Gamepad",
			string BaseClass = "ZeroObject",
			string Description = "Game pad is a object for getting game pad input.",
			Array Methods = 
			[
				{
					string Name = "IsButtonPressed",
					string Description = "Has the button just been pressed this frame.",
					string ReturnValue = "bool",
					string Arguments = "(int index)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "index",
						},
					],
				},
				{
					string Name = "IsButtonHeld",
					string Description = "Is the button currently being held down.",
					string ReturnValue = "bool",
					string Arguments = "(int index)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "index",
						},
					],
				},
				{
					string Name = "IsButtonReleased",
					string Description = "Is the button just been released.",
					string ReturnValue = "bool",
					string Arguments = "(int index)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "index",
						},
					],
				},
				{
					string Name = "TimeButtonHeld",
					string Description = "How long has this button been held down.",
					string ReturnValue = "float",
					string Arguments = "(int index)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "index",
						},
					],
				},
				{
					string Name = "Vibrate",
					string Description = "Vibrate this controller for a given time. Speed is a value between zero and one.",
					string ReturnValue = "void",
					string Arguments = "(float time, float LeftSpeed, float RightSpeed)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "time",
						},
						{
							string Type = "float",
							string Name = "LeftSpeed",
						},
						{
							string Type = "float",
							string Name = "RightSpeed",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "IsActive",
					string Description = "Is this controller turned on and plugged in.",
					string Type = "bool",
				},
				{
					string Name = "GamepadIndex",
					string Description = "Index of this gamepad.",
					string Type = "int",
				},
				{
					string Name = "LeftStick",
					string Description = "Current offset[-1,1] from the center of the left stick.",
					string Type = "Vec2",
				},
				{
					string Name = "RightStick",
					string Description = "Current offset[-1,1] from the center of the right stick.",
					string Type = "Vec2",
				},
				{
					string Name = "LeftStickDelta",
					string Description = "Change in the left stick this frame.",
					string Type = "Vec2",
				},
				{
					string Name = "RightStickDelta",
					string Description = "Change in the right stick this frame.",
					string Type = "Vec2",
				},
				{
					string Name = "LeftTrigger",
					string Description = "Value of how much the Left Trigger is down. Range[0,1].",
					string Type = "float",
				},
				{
					string Name = "RightTrigger",
					string Description = "Value of how much the Right Trigger is down. Range[0,1].",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "ButtonDown",
					string EventType = "GamepadEvent",
				},
				{
					string EventName = "ButtonUp",
					string EventType = "GamepadEvent",
				},
				{
					string EventName = "GamepadUpdated",
					string EventType = "ObjectEvent",
				},
				{
					string EventName = "GamepadStickFlicked",
					string EventType = "GamepadEvent",
				},
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "LockStepGamepadStatusEvent",
			string BaseClass = "LockStepGamepadEvent",
			string Description = "A synced gamepad status event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Peer",
					string Description = "",
					string Type = "LockStepPeer",
				},
				{
					string Name = "Index",
					string Description = "The index of the gamepad that was activated or deactivated.",
					string Type = "uint",
				},
				{
					string Name = "Active",
					string Description = "Whether or not the gamepad was active.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "NetLevelStarted",
			string BaseClass = "Event",
			string Description = "Dispatched after fully loading and synchronizing a level in a net space.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "GameSession",
					string Description = "Data.",
					string Type = "GameSession",
				},
				{
					string Name = "Space",
					string Description = "Network game session.",
					string Type = "Space",
				},
				{
					string Name = "LevelName",
					string Description = "Network space.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "GameSession",
			string BaseClass = "Cog",
			string Description = "The GameSession manages all spaces and data for a a game.",
			Array Methods = 
			[
				{
					string Name = "Destroy",
					string Description = "Destroy an object removing it from the Space.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "DispatchEvent",
					string Description = "Dispatches an event on this object.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "AddComponentByName",
					string Description = "Add a component by name.",
					string ReturnValue = "bool",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "RemoveComponentByName",
					string Description = "Remove a component by name. Returns true if the component existed.",
					string ReturnValue = "bool",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "Start",
					string Description = "Start the game.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Quit",
					string Description = "Quit the game and exit the engine if not in editor.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "RequestQuit",
					string Description = "Request to quit sending out the GameRequestQuit event.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "CreateSpace",
					string Description = "Create a space in the game. Use the archetype's name.",
					string ReturnValue = "Space",
					string Arguments = "(Archetype archetype)",
					Array ParsedArguments = 
					[
						{
							string Type = "Archetype",
							string Name = "archetype",
						},
					],
				},
				{
					string Name = "CreateNamedSpace",
					string Description = "Create a space from an archetype with the given name.",
					string ReturnValue = "Space",
					string Arguments = "(String name, Archetype archetype)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
						{
							string Type = "Archetype",
							string Name = "archetype",
						},
					],
				},
				{
					string Name = "ChangeResolution",
					string Description = "Change display mode of primary window.",
					string ReturnValue = "void",
					string Arguments = "(bool fullscreen, Vec2 resolution)",
					Array ParsedArguments = 
					[
						{
							string Type = "bool",
							string Name = "fullscreen",
						},
						{
							string Type = "Vec2",
							string Name = "resolution",
						},
					],
				},
				{
					string Name = "FindSpaceByName",
					string Description = "Find a named space.",
					string ReturnValue = "Space",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindAllSpacesByName",
					string Description = "",
					string ReturnValue = "SpaceMap::valueRange",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Calls DebugDraw on all components in this cog.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AttachTo",
					string Description = "Attach to a parent object.",
					string ReturnValue = "void",
					string Arguments = "(Cog parent)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "parent",
						},
					],
				},
				{
					string Name = "Detach",
					string Description = "Detach from a parent object.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AttachToRelative",
					string Description = "Attach to a parent object and compute the new transform so that the objects are relative.",
					string ReturnValue = "void",
					string Arguments = "(Cog parent)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "parent",
						},
					],
				},
				{
					string Name = "DetachRelative",
					string Description = "Detach from a parent object and compute the new transform so that the objects are relative.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindChildByName",
					string Description = "Find a child object with the given name.",
					string ReturnValue = "Cog",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindAllChildrenByName",
					string Description = "",
					string ReturnValue = "HierarchyNameRange",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "DispatchUp",
					string Description = "Dispatches an event up the tree on each parent recursively(pre-order traversal)",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchDown",
					string Description = "Dispatches an event down the tree on all children recursively(pre-order traversal)",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "FindRoot",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "UploadToArchetype",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ModifiedFromArchetype",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Clone",
					string Description = "Game Session cannot be cloned, so throw an exception.",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ClearArchetype",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindNextSibling",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindPreviousSibling",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindNextInOrder",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindPreviousInOrder",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "IsDescendant",
					string Description = "Returns whether or not the given cog is a descendant of us.",
					string ReturnValue = "bool",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetComponentByName",
					string Description = "",
					string ReturnValue = "Component",
					string Arguments = "(String componentTypeName)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "componentTypeName",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of the Object.",
					string Type = "String",
				},
				{
					string Name = "ArchetypeName",
					string Description = "The name of the archetype this object was created from.",
					string Type = "String",
				},
				{
					string Name = "RuntimeId",
					string Description = "Gets a unique integer for this object(used primarily for debugging)",
					string Type = "u32",
				},
				{
					string Name = "Actions",
					string Description = "",
					string Type = "Actions",
				},
				{
					string Name = "AllSpaces",
					string Description = "",
					string Type = "SpaceMap::valueRange",
				},
				{
					string Name = "Focused",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Resolution",
					string Description = "",
					string Type = "Vec2",
				},
				{
					string Name = "FullScreen",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Editing",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Space",
					string Description = "",
					string Type = "Space",
				},
				{
					string Name = "Parent",
					string Description = "Get the parent of this object in the Hierarchy.",
					string Type = "Cog",
				},
				{
					string Name = "IsBeingDestroyed",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Transient",
					string Description = "Object will not be saved.",
					string Type = "bool",
				},
				{
					string Name = "Persistent",
					string Description = "Object will not be destroyed on level load or change.",
					string Type = "bool",
				},
				{
					string Name = "EditorViewportHidden",
					string Description = "Hidden from view used for editor.",
					string Type = "bool",
				},
				{
					string Name = "ObjectViewHidden",
					string Description = "If the object needs to not show up in the object view.",
					string Type = "bool",
				},
				{
					string Name = "Locked",
					string Description = "Not able to be modified or selected in the viewport.",
					string Type = "bool",
				},
				{
					string Name = "Children",
					string Description = "Grab the children directly from the hierarchy component.",
					string Type = "HierarchyList::range",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "GameSetup",
					string EventType = "GameEvent",
				},
				{
					string EventName = "GameLoad",
					string EventType = "GameEvent",
				},
				{
					string EventName = "GameFocusIn",
					string EventType = "GameEvent",
				},
				{
					string EventName = "GameFocusOut",
					string EventType = "GameEvent",
				},
				{
					string EventName = "GameRequestQuit",
					string EventType = "GameEvent",
				},
				{
					string EventName = "GameStarted",
					string EventType = "GameEvent",
				},
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "TcpSocket",
			string BaseClass = "ZeroObject",
			string Description = "Manages all the client/server/peer connections.",
			Array Methods = 
			[
				{
					string Name = "Connect",
					string Description = "Attempt to connect to a host on the given port.",
					string ReturnValue = "void",
					string Arguments = "(String host, int port)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "host",
						},
						{
							string Type = "int",
							string Name = "port",
						},
					],
				},
				{
					string Name = "Listen",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(port : Integer, maxConnections : Integer)",
					Array ParsedArguments = 
					[
						{
							string Type = "Integer",
							string Name = "port",
						},
						{
							string Type = "Integer",
							string Name = "maxConnections",
						},
					],
				},
				{
					string Name = "Listen",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(int port, uint maxConnections, TcpSocketBind::Enum bindTo)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "port",
						},
						{
							string Type = "uint",
							string Name = "maxConnections",
						},
						{
							string Type = "TcpSocketBind::Enum",
							string Name = "bindTo",
						},
					],
				},
				{
					string Name = "Close",
					string Description = "Close all activity(whether listening or connected to a server)",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "CloseConnection",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SendTo",
					string Description = "Send an event to a specific connection index.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, SendableEvent event, uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "SendableEvent",
							string Name = "event",
						},
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SendToAll",
					string Description = "Send an event to all connections.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, SendableEvent event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "SendableEvent",
							string Name = "event",
						},
					],
				},
				{
					string Name = "SendToAllExcept",
					string Description = "Send an event to all connections except a particular connection index.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, SendableEvent event, uint exceptIndex)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "SendableEvent",
							string Name = "event",
						},
						{
							string Type = "uint",
							string Name = "exceptIndex",
						},
					],
				},
				{
					string Name = "SendToAllAndSelf",
					string Description = "Send an event to all connections and dispatch on self.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, SendableEvent event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "SendableEvent",
							string Name = "event",
						},
					],
				},
				{
					string Name = "IsConnected",
					string Description = "Check if we are currently connected to anyone.",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "OutgoingConnectionCount",
					string Description = "Get the number of outgoing connections.",
					string Type = "uint",
				},
				{
					string Name = "IncomingConnectionCount",
					string Description = "Get the number of incoming connections.",
					string Type = "uint",
				},
				{
					string Name = "ConnectionCount",
					string Description = "Get the number of connections we have.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "SocketError",
					string EventType = "TextEvent",
				},
				{
					string EventName = "ConnectionCompleted",
					string EventType = "ConnectionEvent",
				},
				{
					string EventName = "ConnectionFailed",
					string EventType = "ConnectionEvent",
				},
				{
					string EventName = "Disconnected",
					string EventType = "ConnectionEvent",
				},
				{
					string EventName = "ReceivedData",
					string EventType = "ReceivedDataEvent",
				},
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "LogicGraph",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "SoundListener",
			string BaseClass = "Component",
			string Description = "The SoundListener component uses the transform to compute all 3d sound effects./Doppler, Falloff, Reverb regions, etc.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is the SoundListener currently active?",
					string Type = "bool",
				},
				{
					string Name = "Volume",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Sound",
			],
		},
		{
			string Name = "SpriteLayerOrder",
			string BaseClass = "Resource",
			string Description = "Defines the order in which a set of SpriteLayers should be drawn.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "RevoluteJoint",
			string BaseClass = "Joint",
			string Description = "A revolute joint is used to create a wheel or a hinge. A revolute joint bring the two locally defined axes together and allows free rotation on only that axis. This axis is also where the motor is applied. The two axes that are orthogonal to the motor axis have their rotation locked(objects rotate together unless on the motor axis). Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
				{
					string Name = "EditBasisA",
					string Description = "Spawns a proxy transform widget that allows the user to configure the basis for object A. The basis is used to specify the rotation basis and the other two axes used for computing the reference angles for limits.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "EditBasisB",
					string Description = "Spawns a proxy transform widget that allows the user to configure the basis for object B. The basis is used to specify the rotation basis and the other two axes used for computing the reference angles for limits.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "EditWorldBasis",
					string Description = "Same as Basis1 except this sets the basis for both objects simultaneously.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SetWorldFrame",
					string Description = "Used to set the entire frame in world space for this joint. The x and y axes are used as a basis for limiting the joint. The x axis is at angle 0 and the y axis is at angle 90. The z axis is the axis of rotational freedom.",
					string ReturnValue = "void",
					string Arguments = "(QuatParam rot)",
					Array ParsedArguments = 
					[
						{
							string Type = "QuatParam",
							string Name = "rot",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "UseFrameA",
					string Description = "Should the default frame of the constraint be object A or B? This determines which object's world axis is used when constructing the basis for the constraint. In the case of a dynamic and static object, the static object is generally the better choice. As a general rule of thumb, it should be the heavier/most important object.",
					string Type = "bool",
				},
				{
					string Name = "WorldAxis",
					string Description = "The axis of freedom for the joint in world space. This is the axis that rotational movement is allowed on. Which object's axis is used to compute this is determined by UseFrameA.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "ParticleColorAnimator",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Color0",
					string Description = "",
					string Type = "Vec4",
				},
				{
					string Name = "Color1",
					string Description = "",
					string Type = "Vec4",
				},
				{
					string Name = "Color2",
					string Description = "",
					string Type = "Vec4",
				},
				{
					string Name = "Color3",
					string Description = "",
					string Type = "Vec4",
				},
				{
					string Name = "Color4",
					string Description = "",
					string Type = "Vec4",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "NetEventReceived",
			string BaseClass = "Event",
			string Description = "Dispatched before a received net event is dispatched.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirNetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
				{
					string Name = "NetEvent",
					string Description = "Their net peer ID.",
					string Type = "Event",
				},
				{
					string Name = "Destination",
					string Description = "Network event received.",
					string Type = "Cog",
				},
				{
					string Name = "ReturnAllow",
					string Description = "Dispatch destination object(null if the net object could not be found locally)",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "PointForceEffect",
			string BaseClass = "BasicPointEffect",
			string Description = "A force effect who's direction and strength is based upon the distance from a central point. The direction of the force will always point to the center of the field, but the strength will vary depending on the min/max distance and strength values. Useful to make planetary force field like effects.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "MinDistance",
					string Description = "The first distance at which attenuation will start. If an object is under the min distance, it will get the strength at min applied. If an object is in between min and max, then it will attenuate.",
					string Type = "float",
				},
				{
					string Name = "MaxDistance",
					string Description = "The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition.",
					string Type = "float",
				},
				{
					string Name = "StrengthAtMin",
					string Description = "The strength that this effect applies at the min distance.",
					string Type = "float",
				},
				{
					string Name = "StrengthAtMax",
					string Description = "The strength that this effect applies at the max distance.",
					string Type = "float",
				},
				{
					string Name = "LocalPositionOffset",
					string Description = "The offset from the transform position(in local space) that the point effect will be applied at.",
					string Type = "Vec3",
				},
				{
					string Name = "InterpolationType",
					string Description = "The type of interpolation used(ie. Linear, Quadratic) for the effect.",
					string Type = "PointInterpolationStates::Enum",
				},
				{
					string Name = "EndCondition",
					string Description = "How the interpolation should be handled at the max distance. ClampToMax will clamp to strength at max. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation(this may go negative).",
					string Type = "PointEndCondition::Enum",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "Joint",
			string BaseClass = "Component",
			string Description = "A base joint class. Joints are used to connect two objects together with some sort of a mathematical rule in terms of an object's position and velocity.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "PhysicsEffect",
			string BaseClass = "Component",
			string Description = "A common interface for all effects in physics. An effect is something that can be attached to a collider, rigid body, region or even a space. This effect will then perform its action every frame according to the rules of the object it is attached to.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "PhysicsMesh",
			string BaseClass = "Resource",
			string Description = "Used to represent the game world or a static object as a mesh of triangles. Used by the StaticMeshCollider class.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
		},
		{
			string Name = "UiFocusEvent",
			string BaseClass = "Event",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "DeformableCollider",
			string BaseClass = "Collider",
			string Description = "A collider to store a deformable object. This object is made up of a collection of tetrahedra and is solved with finite element method. Used to create a deformable object that can be bent and broken.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
				{
					string Name = "ApplyForceAtPoint",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Vec3 point, Vec3 force)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "point",
						},
						{
							string Type = "Vec3",
							string Name = "force",
						},
					],
				},
				{
					string Name = "ClearForces",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddVertex",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Vec3 localPos)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "localPos",
						},
					],
				},
				{
					string Name = "AddTetrahedra",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(uint index1, uint index2, uint index3, uint index4)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index1",
						},
						{
							string Type = "uint",
							string Name = "index2",
						},
						{
							string Type = "uint",
							string Name = "index3",
						},
						{
							string Type = "uint",
							string Name = "index4",
						},
					],
				},
				{
					string Name = "AddSurfaceTriangle",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(uint index1, uint index2, uint index3)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index1",
						},
						{
							string Type = "uint",
							string Name = "index2",
						},
						{
							string Type = "uint",
							string Name = "index3",
						},
					],
				},
				{
					string Name = "SetFixed",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(uint vertexIndex, bool state)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "vertexIndex",
						},
						{
							string Type = "bool",
							string Name = "state",
						},
					],
				},
				{
					string Name = "RemoveInvalidVertices",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetTetrahedraAtPoint",
					string Description = "",
					string ReturnValue = "uint",
					string Arguments = "(Vec3 point)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "point",
						},
					],
				},
				{
					string Name = "GetBarycentricCoordinates",
					string Description = "",
					string ReturnValue = "Vec4",
					string Arguments = "(uint index, Vec3 point)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
						{
							string Type = "Vec3",
							string Name = "point",
						},
					],
				},
				{
					string Name = "GetWorldPosition",
					string Description = "",
					string ReturnValue = "Vec3",
					string Arguments = "(uint index, Vec4 barycentricCoordinates)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
						{
							string Type = "Vec4",
							string Name = "barycentricCoordinates",
						},
					],
				},
				{
					string Name = "ClearPlastic",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
				{
					string Name = "DrawWireframe",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "StiffnessWarping",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "YoungsModulus",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "PoissonRatio",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Density",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "OptimizedMode",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Plastic",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Yield",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Creep",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Max",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "MassDampening",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "StiffnessDampening",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "HeightMapModel",
			string BaseClass = "Graphical",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "Material",
					string Description = "Material to use on the this height map.",
					string Type = "Material",
				},
				{
					string Name = "Color",
					string Description = "Color used for per instance color effects.",
					string Type = "Vec4",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "CogTransformGizmo",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddObject",
					string Description = "Adds an object to be modified by this gizmo.",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "RemoveObject",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "ClearObjects",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SetOperationQueue",
					string Description = "If set, this Gizmo will add operations for all modifications to cogs.",
					string ReturnValue = "void",
					string Arguments = "(OperationQueue opQueue)",
					Array ParsedArguments = 
					[
						{
							string Type = "OperationQueue",
							string Name = "opQueue",
						},
					],
				},
				{
					string Name = "ToggleCoordinateMode",
					string Description = "Toggle between local/ world.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetObjectAtIndex",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Basis",
					string Description = "",
					string Type = "GizmoBasis::Enum",
				},
				{
					string Name = "Pivot",
					string Description = "",
					string Type = "GizmoPivot::Enum",
				},
				{
					string Name = "ObjectCount",
					string Description = "Object getters.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "GizmoObjectsDuplicated",
					string EventType = "Event",
				},
			],
			Array Tags = 
			[
				"Component",
				"Gizmo",
			],
		},
		{
			string Name = "SpriteBeam",
			string BaseClass = "BaseSprite",
			string Description = "SpriteBeam is a repeated series of sprites rendering along a link.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "Color",
					string Description = "Modulation color of this sprite.",
					string Type = "Vec4",
				},
				{
					string Name = "BlendMode",
					string Description = "Blend Mode of the sprite.",
					string Type = "BlendMode::Type",
				},
				{
					string Name = "GeometryMode",
					string Description = "Geometry mode determines how the sprite is mapped to 3d.",
					string Type = "SpriteGeometryMode::Type",
				},
				{
					string Name = "SpriteLayer",
					string Description = "",
					string Type = "SpriteLayer",
				},
				{
					string Name = "BeamGeometryMode",
					string Description = "How is the beams geometry generated?",
					string Type = "BeamGeometryMode::Type",
				},
				{
					string Name = "SpriteSource",
					string Description = "Sprite used to render this beam.",
					string Type = "SpriteSource",
				},
				{
					string Name = "SpriteThickness",
					string Description = "Thickness of the beam. 0 is default sprite height.",
					string Type = "float",
				},
				{
					string Name = "SpriteLength",
					string Description = "How long each sprite is in beam. O is default sprite width.",
					string Type = "float",
				},
				{
					string Name = "RepeatCount",
					string Description = "How many times does the sprite repeat?",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "SpriteAnimationEnded",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "Attractive",
			string BaseClass = "Component",
			string Description = "Attracts objects with the Attractor component.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is this object currently attractive.",
					string Type = "bool",
				},
				{
					string Name = "Strength",
					string Description = "How attractive the object is.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "GraphicsSpace",
			string BaseClass = "Component",
			string Description = "A Space of geometric objects. The space contains Models and other 3d objects.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "TransparentSort",
					string Description = "How transparent objects will be sorted if the camera does not.",
					string Type = "TransparentSort::Type",
				},
				{
					string Name = "SpriteLayerOrder",
					string Description = "",
					string Type = "SpriteLayerOrder",
				},
				{
					string Name = "Active",
					string Description = "Prevent Visibility, Particle System, and Render updates.",
					string Type = "bool",
				},
				{
					string Name = "UseRandomSeed",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "RandomSeed",
					string Description = "",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
			],
		},
		{
			string Name = "MainWindowConfig",
			string BaseClass = "Component",
			string Description = "Configuration component that contains data for the main window. Used to control window size and placement. Also stores graphics context shared between graphics and the platform.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Title",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "MaxSize",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "DesktopIndex",
					string Description = "",
					string Type = "int",
				},
				{
					string Name = "Width",
					string Description = "",
					string Type = "int",
				},
				{
					string Name = "Height",
					string Description = "",
					string Type = "int",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "RopeCreator",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Slices",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "Thickness",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "LengthUvScale",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "RadialUvScale",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "AllowUvStretching",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "JointSpring",
			string BaseClass = "Component",
			string Description = "A spring for a joint. Used to make a joint soft and therefore behave spring-like. A joint spring has a frequency in hertz at which to oscillate as well as a dampening ratio. The ratio should vary from 0 to 1 where 0 is no dampening and 1 is critical dampening. See each joint for a description of how it reacts to a spring.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this motor is currently active.",
					string Type = "bool",
				},
				{
					string Name = "FrequencyHz",
					string Description = "The oscillation frequency of the spring in Hertz(cycles per second).",
					string Type = "float",
				},
				{
					string Name = "DampRatio",
					string Description = "The dampening ratio of this spring. The value should range from 0 to 1 where 0 is no dampening and 1 is critical dampening.",
					string Type = "float",
				},
				{
					string Name = "AtomIds",
					string Description = "Signifies what atoms on the joint this effects.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "NetGameStarted",
			string BaseClass = "Event",
			string Description = "Dispatched after fully joining or hosting a network game.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "GameSession",
					string Description = "Data.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "MouseCapture",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Capture",
					string Description = "Starts the mouse manipulation. All mouse events will now only go to the owner of this Component. Returns whether or not the manipulation can be started.",
					string ReturnValue = "bool",
					string Arguments = "(ViewportMouseEvent e)",
					Array ParsedArguments = 
					[
						{
							string Type = "ViewportMouseEvent",
							string Name = "e",
						},
					],
				},
				{
					string Name = "ReleaseCapture",
					string Description = "Releases the mouse manipulation.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "IsCaptured",
					string Description = "Returns whether or not this has an active mouse capture.",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "MouseDragStart",
					string EventType = "ViewportMouseEvent",
				},
				{
					string EventName = "MouseDragMove",
					string EventType = "ViewportMouseEvent",
				},
				{
					string EventName = "MouseDragEnd",
					string EventType = "Event",
				},
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "Level",
			string BaseClass = "Resource",
			string Description = "A level is resource that stores a set of objects that can be loaded into a space. Level is different from most resource types in that it does not really store the level data on the object but always loads the data from the file system.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "CameraViewports",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Viewports",
					string Description = "Returns a range of all viewports.",
					string Type = "CameraViewportList::range",
				},
				{
					string Name = "VisibleSortedViewports",
					string Description = "Returns a range of all the visible sorted viewports.",
					string Type = "CameraViewport",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "NetPeer",
			string BaseClass = "NetObject",
			string Description = "Network Peer Acts as a host on the network Manages network object state and event replication.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Forget",
					string Description = "[Client] Forgets the online net object locally[Server] Forgets the online net object locally and remotely for all relevant peers Effectively removes the net object from the network system without destroying it Returns true if successful, else false",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SelectRemote",
					string Description = "[Client] Selects the remote net object on the first server peer found running in another game session instance on the engine[Server] Selects the remote net object on the first client peer found running in another game session instance on the engine Will fail if the net object is not online, or not found remotely Returns true if successful, else false",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "HasNetChannel",
					string Description = "",
					string ReturnValue = "",
					string Arguments = "",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "HasNetChannel",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(NetChannelConfig netChannelConfig) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetChannelConfig",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "GetNetChannel",
					string Description = "",
					string ReturnValue = "",
					string Arguments = "",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetNetChannel",
					string Description = "",
					string ReturnValue = "NetChannel",
					string Arguments = "(NetChannelConfig netChannelConfig) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetChannelConfig",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "DispatchLocal",
					string Description = "Dispatches the net event on the net object for the local peer.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchRemote",
					string Description = "Dispatches the net event on the net object for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event, NetPeerId netPeerId)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DispatchBroadcast",
					string Description = "Dispatches the net event on the net object for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchLocalAndRemote",
					string Description = "Dispatches the net event on the net object for the local peer and for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event, NetPeerId netPeerId)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DispatchLocalAndBroadcast",
					string Description = "Dispatches the net event on the net object for the local peer and for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "Open",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(role : NetRole, Integer, Integer)",
					Array ParsedArguments = 
					[
						{
							string Type = "NetRole",
							string Name = "role",
						},
						{
							string Type = "Integer",
							string Name = "",
						},
						{
							string Type = "Integer",
							string Name = "",
						},
					],
				},
				{
					string Name = "Open",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(role : NetRole, Integer)",
					Array ParsedArguments = 
					[
						{
							string Type = "NetRole",
							string Name = "role",
						},
						{
							string Type = "Integer",
							string Name = "",
						},
					],
				},
				{
					string Name = "Open",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(Role::Enum role)",
					Array ParsedArguments = 
					[
						{
							string Type = "Role::Enum",
							string Name = "role",
						},
					],
				},
				{
					string Name = "Close",
					string Description = "Closes the peer(safe to call multiple times)",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ConnectLink",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(ipAddress : IpAddress, EventBundle)",
					Array ParsedArguments = 
					[
						{
							string Type = "IpAddress",
							string Name = "ipAddress",
						},
						{
							string Type = "EventBundle",
							string Name = "",
						},
					],
				},
				{
					string Name = "ConnectLink",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(ipAddress : IpAddress, Event)",
					Array ParsedArguments = 
					[
						{
							string Type = "IpAddress",
							string Name = "ipAddress",
						},
						{
							string Type = "Event",
							string Name = "",
						},
					],
				},
				{
					string Name = "ConnectLink",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(const IpAddress ipAddress)",
					Array ParsedArguments = 
					[
						{
							string Type = "const IpAddress",
							string Name = "ipAddress",
						},
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(netPeerId : IpAddress, EventBundle)",
					Array ParsedArguments = 
					[
						{
							string Type = "IpAddress",
							string Name = "netPeerId",
						},
						{
							string Type = "EventBundle",
							string Name = "",
						},
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(netPeerId : IpAddress, Event)",
					Array ParsedArguments = 
					[
						{
							string Type = "IpAddress",
							string Name = "netPeerId",
						},
						{
							string Type = "Event",
							string Name = "",
						},
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(netPeerId : IpAddress)",
					Array ParsedArguments = 
					[
						{
							string Type = "IpAddress",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(netPeerId : Integer, EventBundle)",
					Array ParsedArguments = 
					[
						{
							string Type = "Integer",
							string Name = "netPeerId",
						},
						{
							string Type = "EventBundle",
							string Name = "",
						},
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(netPeerId : Integer, Event)",
					Array ParsedArguments = 
					[
						{
							string Type = "Integer",
							string Name = "netPeerId",
						},
						{
							string Type = "Event",
							string Name = "",
						},
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(NetPeerId netPeerId)",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DisconnectAllLinks",
					string Description = "",
					string ReturnValue = "Integer",
					string Arguments = "(EventBundle)",
					Array ParsedArguments = 
					[
						{
							string Type = "EventBundle",
							string Name = "",
						},
					],
				},
				{
					string Name = "DisconnectAllLinks",
					string Description = "",
					string ReturnValue = "Integer",
					string Arguments = "(Event)",
					Array ParsedArguments = 
					[
						{
							string Type = "Event",
							string Name = "",
						},
					],
				},
				{
					string Name = "DisconnectAllLinks",
					string Description = "",
					string ReturnValue = "uint",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetLinkCreationDirection",
					string Description = "[Client/Server] Returns the direction in which the link was created(which peer initiated the connection), else TransmissionDirection::Unspecified",
					string ReturnValue = "TransmissionDirection::Enum",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "GetLinkStatus",
					string Description = "[Client/Server] Returns the link's overall status, else LinkStatus::Unspecified",
					string ReturnValue = "LinkStatus::Enum",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "GetLinkState",
					string Description = "[Client/Server] Returns the link's specific state, else LinkState::Unspecified",
					string ReturnValue = "LinkState::Enum",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "GetLinkIpAddress",
					string Description = "[Client/Server] Returns the remote peer's IP address(as seen from our perspective), else IpAddress() For outgoing links this is the same IP address specified in our connect call This IP address will never change for the lifetime of this link",
					string ReturnValue = "IpAddress",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "GetOurIpAddressFromLink",
					string Description = "[Client/Server] Returns our peer's IP address(as seen from their perspective), else IpAddress() For incoming links this is the same IP address specified in their connect call Set if the link is connected or incoming and attempting connection It is absolutely possible that this does not match our local IP address",
					string ReturnValue = "IpAddress",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "GetLinkInternetProtocol",
					string Description = "[Client/Server] Returns the link's IP address protocol version, else InternetProtocol::Unspecified This IP address protocol will never change for the lifetime of this link",
					string ReturnValue = "InternetProtocol::Enum",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "GetLinkNetPeerId",
					string Description = "Returns the remote peer's unique network identifier, else 0[Server] This will be non-zero if the client is connected, else zero[Client] This will always be zero.",
					string ReturnValue = "NetPeerId",
					string Arguments = "(const IpAddress ipAddress) const",
					Array ParsedArguments = 
					[
						{
							string Type = "const IpAddress",
							string Name = "ipAddress",
						},
					],
				},
				{
					string Name = "AddUser",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(EventBundle)",
					Array ParsedArguments = 
					[
						{
							string Type = "EventBundle",
							string Name = "",
						},
					],
				},
				{
					string Name = "AddUser",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(Event)",
					Array ParsedArguments = 
					[
						{
							string Type = "Event",
							string Name = "",
						},
					],
				},
				{
					string Name = "AddUser",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetUser",
					string Description = "Returns the specified network user, else nullptr.",
					string ReturnValue = "Cog",
					string Arguments = "(NetUserId netUserId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetUserId",
							string Name = "netUserId",
						},
					],
				},
				{
					string Name = "GetUsersAddedByPeer",
					string Description = "Returns the network users added by the specified peer.",
					string ReturnValue = "NetUserRange",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "RemoveUser",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(cog : Cog, EventBundle)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
						{
							string Type = "EventBundle",
							string Name = "",
						},
					],
				},
				{
					string Name = "RemoveUser",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(cog : Cog, Event)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
						{
							string Type = "Event",
							string Name = "",
						},
					],
				},
				{
					string Name = "RemoveUser",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetNetSpace",
					string Description = "Returns the live net space specified if it is known locally, else nullptr.",
					string ReturnValue = "Space",
					string Arguments = "(NetObjectId netObjectId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetObjectId",
							string Name = "netObjectId",
						},
					],
				},
				{
					string Name = "GetNetObject",
					string Description = "Returns the live net object specified if it is known locally, else nullptr.",
					string ReturnValue = "Cog",
					string Arguments = "(NetObjectId netObjectId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetObjectId",
							string Name = "netObjectId",
						},
					],
				},
				{
					string Name = "IsOwnedByUser",
					string Description = "Returns true if the net object is conceptually owned by the specified user, else false.",
					string ReturnValue = "bool",
					string Arguments = "(Cog cog) const",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "IsOwnedByPeer",
					string Description = "Returns true if the net object is conceptually owned by a user added by the specified peer, else false.",
					string ReturnValue = "bool",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "SetNetUserOwnerUp",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "SetNetUserOwnerDown",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Role",
					string Description = "Returns the open peer's network role(client, server, offline), else Role::Unspecified.",
					string Type = "Role::Enum",
				},
				{
					string Name = "IsClient",
					string Description = "Returns true if our open peer's network role is client, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServer",
					string Description = "Returns true if our open peer's network role is server, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOffline",
					string Description = "Returns true if our open peer's network role is offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientOrOffline",
					string Description = "Returns true if our open peer's network role is client or offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerOrOffline",
					string Description = "Returns true if our open peer's network role is server or offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientOrServer",
					string Description = "Returns true if our open peer's network role is client or server, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOnline",
					string Description = "Returns true if the net object is online, else false.",
					string Type = "bool",
				},
				{
					string Name = "NetObjectId",
					string Description = "Returns the net object ID(set if the net object is live), else 0.",
					string Type = "NetObjectId",
				},
				{
					string Name = "AutomaticChannel",
					string Description = "Returns the automatic net channel configuration resource(assigned to net properties unless another channel is specified)",
					string Type = "NetChannelConfig",
				},
				{
					string Name = "IsOpen",
					string Description = "Returns true if the peer is open, else false.",
					string Type = "bool",
				},
				{
					string Name = "NetPeerId",
					string Description = "Returns the open peer's unique network identifier, else 0[Server/Offline] This will always be zero[Client] This will be non-zero once connected to a server, else zero.",
					string Type = "NetPeerId",
				},
				{
					string Name = "Ipv4Address",
					string Description = "Returns the peer's local IPv4 address, else IpAddress() Set if the peer is open with an IPv4 socket.",
					string Type = "const IpAddress",
				},
				{
					string Name = "Ipv4Host",
					string Description = "Returns the peer's local IPv4 address host as a numeric address string, else String()",
					string Type = "String",
				},
				{
					string Name = "Ipv4Port",
					string Description = "Returns the peer's local IPv4 address port, else String()",
					string Type = "uint",
				},
				{
					string Name = "Ipv6Address",
					string Description = "Returns the peer's local IPv6 address, else IpAddress() Set if the peer is open with an IPv6 socket.",
					string Type = "const IpAddress",
				},
				{
					string Name = "Ipv6Host",
					string Description = "Returns the peer's local IPv6 address host as a numeric address string, else String()",
					string Type = "String",
				},
				{
					string Name = "Ipv6Port",
					string Description = "Returns the peer's local IPv6 address port, else String()",
					string Type = "uint",
				},
				{
					string Name = "NetObjectCount",
					string Description = "Returns the number of net objects in this game session(but not including the net peer itself)",
					string Type = "uint",
				},
				{
					string Name = "NetUserCount",
					string Description = "Returns the number of net users in this game session.",
					string Type = "uint",
				},
				{
					string Name = "NetSpaceCount",
					string Description = "Returns the number of net spaces in this game session.",
					string Type = "uint",
				},
				{
					string Name = "LinkCount",
					string Description = "[Client/Server] Returns the number of connected network links managed by this peer",
					string Type = "uint",
				},
				{
					string Name = "UsersAddedByMyPeer",
					string Description = "Returns the network users added by our local peer.",
					string Type = "NetUserRange",
				},
				{
					string Name = "Users",
					string Description = "Returns all added network users.",
					string Type = "NetUserRange",
				},
				{
					string Name = "UserCount",
					string Description = "Returns the number of added network users.",
					string Type = "uint",
				},
				{
					string Name = "IsOwnedByAUser",
					string Description = "Returns true if the net object is conceptually owned by a user, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsNotOwnedByAUser",
					string Description = "Returns true if the net object is not conceptually owned by a user, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsMine",
					string Description = "Returns true if the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsNotMine",
					string Description = "Returns true if the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientAndMine",
					string Description = "Returns true if our open peer's network role is client and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientButNotMine",
					string Description = "Returns true if our open peer's network role is client and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerAndMine",
					string Description = "Returns true if our open peer's network role is server and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerButNotMine",
					string Description = "Returns true if our open peer's network role is server and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOfflineAndMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOfflineButNotMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "NetUserOwner",
					string Description = "Returns the network user this object conceptually belongs to, else nullptr.",
					string Type = "Cog",
				},
				{
					string Name = "NetUserOwnerUserId",
					string Description = "Returns the network user identifier of the user this object conceptually belongs to, else 0.",
					string Type = "NetUserId",
				},
				{
					string Name = "NetUserOwnerPeerId",
					string Description = "Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0.",
					string Type = "NetPeerId",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "NetPeerOpened",
					string EventType = "NetPeerOpened",
				},
				{
					string EventName = "NetPeerClosed",
					string EventType = "NetPeerClosed",
				},
				{
					string EventName = "NetGameOnline",
					string EventType = "NetObjectOnline",
				},
				{
					string EventName = "NetGameOffline",
					string EventType = "NetObjectOffline",
				},
				{
					string EventName = "NetGameStarted",
					string EventType = "NetGameStarted",
				},
				{
					string EventName = "NetPeerSentConnectRequest",
					string EventType = "NetPeerSentConnectRequest",
				},
				{
					string EventName = "NetPeerReceivedConnectRequest",
					string EventType = "NetPeerReceivedConnectRequest",
				},
				{
					string EventName = "NetPeerSentConnectResponse",
					string EventType = "NetPeerSentConnectResponse",
				},
				{
					string EventName = "NetPeerReceivedConnectResponse",
					string EventType = "NetPeerReceivedConnectResponse",
				},
				{
					string EventName = "NetLinkConnected",
					string EventType = "NetLinkConnected",
				},
				{
					string EventName = "NetLinkDisconnected",
					string EventType = "NetLinkDisconnected",
				},
				{
					string EventName = "NetSpaceOnline",
					string EventType = "NetObjectOnline",
				},
				{
					string EventName = "NetSpaceOffline",
					string EventType = "NetObjectOffline",
				},
				{
					string EventName = "NetLevelStarted",
					string EventType = "NetLevelStarted",
				},
				{
					string EventName = "NetPeerSentUserAddRequest",
					string EventType = "NetPeerSentUserAddRequest",
				},
				{
					string EventName = "NetPeerReceivedUserAddRequest",
					string EventType = "NetPeerReceivedUserAddRequest",
				},
				{
					string EventName = "NetPeerSentUserAddResponse",
					string EventType = "NetPeerSentUserAddResponse",
				},
				{
					string EventName = "NetPeerReceivedUserAddResponse",
					string EventType = "NetPeerReceivedUserAddResponse",
				},
				{
					string EventName = "NetUserOnline",
					string EventType = "NetObjectOnline",
				},
				{
					string EventName = "NetUserOffline",
					string EventType = "NetObjectOffline",
				},
				{
					string EventName = "NetUserLostObjectOwnership",
					string EventType = "NetUserLostObjectOwnership",
				},
				{
					string EventName = "NetUserAcquiredObjectOwnership",
					string EventType = "NetUserAcquiredObjectOwnership",
				},
				{
					string EventName = "NetObjectOnline",
					string EventType = "NetObjectOnline",
				},
				{
					string EventName = "NetObjectOffline",
					string EventType = "NetObjectOffline",
				},
				{
					string EventName = "NetUserOwnerChanged",
					string EventType = "NetUserOwnerChanged",
				},
				{
					string EventName = "NetChannelOutgoingPropertyInitialized",
					string EventType = "NetChannelPropertyChange",
				},
				{
					string EventName = "NetChannelIncomingPropertyInitialized",
					string EventType = "NetChannelPropertyChange",
				},
				{
					string EventName = "NetChannelOutgoingPropertyUninitialized",
					string EventType = "NetChannelPropertyChange",
				},
				{
					string EventName = "NetChannelIncomingPropertyUninitialized",
					string EventType = "NetChannelPropertyChange",
				},
				{
					string EventName = "NetChannelOutgoingPropertyChanged",
					string EventType = "NetChannelPropertyChange",
				},
				{
					string EventName = "NetChannelIncomingPropertyChanged",
					string EventType = "NetChannelPropertyChange",
				},
				{
					string EventName = "NetEventSent",
					string EventType = "NetEventSent",
				},
				{
					string EventName = "NetEventReceived",
					string EventType = "NetEventReceived",
				},
			],
			Array Tags = 
			[
				"Networking",
				"Component",
			],
		},
		{
			string Name = "GraphicsMaterialBlock",
			string BaseClass = "GeometryMaterialBlock",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "FaceMaterial",
					string Description = "Material used for the face(front) of the mesh.",
					string Type = "Material",
				},
				{
					string Name = "SurfaceMaterial",
					string Description = "Material used for the surface(top) of the mesh.",
					string Type = "Material",
				},
				{
					string Name = "TextureScalarFace",
					string Description = "",
					string Type = "Vec2",
				},
				{
					string Name = "TextureScalarSurface",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "DoubleSided",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "RegisterCppNetProperties",
			string BaseClass = "Event",
			string Description = "Dispatched while adding C++ component net properties to a NetObject.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ParticleEmitter",
			string BaseClass = "Component",
			string Description = "Particle emitters add new particles to the system and control where the particles will appear(sphere emitter, mesh emitter, etc)",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "NetObjectOffline",
			string BaseClass = "Event",
			string Description = "Dispatched before the net object is taken offline.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "GameSession",
					string Description = "Data.",
					string Type = "GameSession",
				},
				{
					string Name = "Space",
					string Description = "Network game session.",
					string Type = "Space",
				},
				{
					string Name = "Object",
					string Description = "Network space.",
					string Type = "Cog",
				},
				{
					string Name = "IsEndOfLifespan",
					string Description = "Network object.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "KeyboardTextEvent",
			string BaseClass = "Event",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Character",
					string Description = "",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "HeightMapSource",
			string BaseClass = "Resource",
			string Description = "HeightMapSource stores data needed for height maps. Data is stored on PatchData which are indexed by x,y. Each PatchData stores layers that represent different data. The primary layer is height and paint values but additional layers can be added to store data like foliage or custom game data.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "GeneratedSound",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "WaveType",
					string Description = "",
					string Type = "SynthWaveType::Type",
				},
				{
					string Name = "WaveFrequency",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Length",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "ObjectLinkPointChangedEvent",
			string BaseClass = "Event",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "OldLocalPoint",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "NewLocalPoint",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "EdgeId",
					string Description = "The index on the edge that is being overridden.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "Renderer",
			string BaseClass = "Component",
			string Description = "Scene rendering interface used to render 3d scene in a DisplayScene.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ClearColor",
					string Description = "Color to clear the screen.",
					string Type = "Vec4",
				},
				{
					string Name = "DrawNonVisible",
					string Description = "Draw editor only materials.",
					string Type = "bool",
				},
				{
					string Name = "DrawDebugObjects",
					string Description = "Do debug drawing.",
					string Type = "bool",
				},
				{
					string Name = "DrawEditorIcons",
					string Description = "Draw editor icons.",
					string Type = "bool",
				},
				{
					string Name = "EditorIconDepth",
					string Description = "Depth for editor icons.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Renderer",
			],
		},
		{
			string Name = "CustomPhysicsEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "A physics effect that sends events out so users can apply custom logic for forces. This sends out the ApplyCustomPhysicsEffect event.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CustomPhysicsEffectPrecalculatePhase",
					string EventType = "CustomPhysicsEffectEvent",
				},
				{
					string EventName = "ApplyCustomPhysicsEffect",
					string EventType = "CustomPhysicsEffectEvent",
				},
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "ZilchFragment",
			string BaseClass = "DocumentResource",
			string Description = "Zilch script file Resource.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "NetObject",
			string BaseClass = "Component",
			string Description = "Network Object Manages the replication of a single object on the network.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Forget",
					string Description = "[Client] Forgets the online net object locally[Server] Forgets the online net object locally and remotely for all relevant peers Effectively removes the net object from the network system without destroying it Returns true if successful, else false",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SelectRemote",
					string Description = "[Client] Selects the remote net object on the first server peer found running in another game session instance on the engine[Server] Selects the remote net object on the first client peer found running in another game session instance on the engine Will fail if the net object is not online, or not found remotely Returns true if successful, else false",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "HasNetChannel",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(netChannelConfig : String)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "HasNetChannel",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(NetChannelConfig netChannelConfig) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetChannelConfig",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "GetNetChannel",
					string Description = "",
					string ReturnValue = "NetChannel",
					string Arguments = "(netChannelConfig : String)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "GetNetChannel",
					string Description = "",
					string ReturnValue = "NetChannel",
					string Arguments = "(NetChannelConfig netChannelConfig) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetChannelConfig",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "IsOwnedByUser",
					string Description = "Returns true if the net object is conceptually owned by the specified user, else false.",
					string ReturnValue = "bool",
					string Arguments = "(Cog cog) const",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "IsOwnedByPeer",
					string Description = "Returns true if the net object is conceptually owned by a user added by the specified peer, else false.",
					string ReturnValue = "bool",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "SetNetUserOwnerUp",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "SetNetUserOwnerDown",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "DispatchLocal",
					string Description = "Dispatches the net event on the net object for the local peer.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchRemote",
					string Description = "Dispatches the net event on the net object for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event, NetPeerId netPeerId)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DispatchBroadcast",
					string Description = "Dispatches the net event on the net object for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchLocalAndRemote",
					string Description = "Dispatches the net event on the net object for the local peer and for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event, NetPeerId netPeerId)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DispatchLocalAndBroadcast",
					string Description = "Dispatches the net event on the net object for the local peer and for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "GetNetSpace",
					string Description = "Returns the operating net space(which may or may not be this net object)",
					string ReturnValue = "NetSpace",
					string Arguments = "() const",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Role",
					string Description = "Returns our open peer's network role(client, server, offline), else Role::Unspecified.",
					string Type = "Role::Enum",
				},
				{
					string Name = "IsClient",
					string Description = "Returns true if our open peer's network role is client, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServer",
					string Description = "Returns true if our open peer's network role is server, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOffline",
					string Description = "Returns true if our open peer's network role is offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientOrOffline",
					string Description = "Returns true if our open peer's network role is client or offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerOrOffline",
					string Description = "Returns true if our open peer's network role is server or offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientOrServer",
					string Description = "Returns true if our open peer's network role is client or server, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOnline",
					string Description = "Returns true if the net object is online, else false.",
					string Type = "bool",
				},
				{
					string Name = "NetObjectId",
					string Description = "Returns the net object ID(set if the net object is live), else 0.",
					string Type = "NetObjectId",
				},
				{
					string Name = "IsOwnedByAUser",
					string Description = "Returns true if the net object is conceptually owned by a user, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsNotOwnedByAUser",
					string Description = "Returns true if the net object is not conceptually owned by a user, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsMine",
					string Description = "Returns true if the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsNotMine",
					string Description = "Returns true if the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientAndMine",
					string Description = "Returns true if our open peer's network role is client and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientButNotMine",
					string Description = "Returns true if our open peer's network role is client and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerAndMine",
					string Description = "Returns true if our open peer's network role is server and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerButNotMine",
					string Description = "Returns true if our open peer's network role is server and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOfflineAndMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOfflineButNotMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "NetUserOwner",
					string Description = "Returns the network user this object conceptually belongs to, else nullptr.",
					string Type = "Cog",
				},
				{
					string Name = "NetUserOwnerUserId",
					string Description = "Returns the network user identifier of the user this object conceptually belongs to, else 0.",
					string Type = "NetUserId",
				},
				{
					string Name = "NetUserOwnerPeerId",
					string Description = "Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0.",
					string Type = "NetPeerId",
				},
				{
					string Name = "AutomaticChannel",
					string Description = "Returns the automatic net channel configuration resource(assigned to net properties unless another channel is specified)",
					string Type = "NetChannelConfig",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Networking",
				"Component",
			],
		},
		{
			string Name = "SimpleAnimation",
			string BaseClass = "Component",
			string Description = "Plays a single animation on Initialize.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "PlaySingle",
					string Description = "Play animations directly.",
					string ReturnValue = "AnimationNode",
					string Arguments = "(Animation animation, AnimPlayMode::Enum playMode)",
					Array ParsedArguments = 
					[
						{
							string Type = "Animation",
							string Name = "animation",
						},
						{
							string Type = "AnimPlayMode::Enum",
							string Name = "playMode",
						},
					],
				},
				{
					string Name = "DirectBlend",
					string Description = "",
					string ReturnValue = "AnimationNode",
					string Arguments = "(Animation animation, float transitionTime, AnimPlayMode::Enum playMode)",
					Array ParsedArguments = 
					[
						{
							string Type = "Animation",
							string Name = "animation",
						},
						{
							string Type = "float",
							string Name = "transitionTime",
						},
						{
							string Type = "AnimPlayMode::Enum",
							string Name = "playMode",
						},
					],
				},
				{
					string Name = "CrossBlend",
					string Description = "",
					string ReturnValue = "AnimationNode",
					string Arguments = "(Animation animation, float transitionTime, AnimPlayMode::Enum playMode)",
					Array ParsedArguments = 
					[
						{
							string Type = "Animation",
							string Name = "animation",
						},
						{
							string Type = "float",
							string Name = "transitionTime",
						},
						{
							string Type = "AnimPlayMode::Enum",
							string Name = "playMode",
						},
					],
				},
				{
					string Name = "PlayIsolatedAnimation",
					string Description = "",
					string ReturnValue = "AnimationNode",
					string Arguments = "(Animation animation, Cog rootBone, AnimPlayMode::Enum playMode)",
					Array ParsedArguments = 
					[
						{
							string Type = "Animation",
							string Name = "animation",
						},
						{
							string Type = "Cog",
							string Name = "rootBone",
						},
						{
							string Type = "AnimPlayMode::Enum",
							string Name = "playMode",
						},
					],
				},
				{
					string Name = "ChainAnimation",
					string Description = "",
					string ReturnValue = "AnimationNode",
					string Arguments = "(Animation animation, AnimPlayMode::Enum playMode)",
					Array ParsedArguments = 
					[
						{
							string Type = "Animation",
							string Name = "animation",
						},
						{
							string Type = "AnimPlayMode::Enum",
							string Name = "playMode",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "PlayMode",
					string Description = "Play mode getter/setter.",
					string Type = "AnimPlayMode::Enum",
				},
				{
					string Name = "Animation",
					string Description = "Animation getter/setter.",
					string Type = "Animation",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "NetUserAcquiredObjectOwnership",
			string BaseClass = "Event",
			string Description = "Dispatched after the net user acquires network ownership of a net object.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "AcquiredObject",
					string Description = "Data.",
					string Type = "Cog",
				},
				{
					string Name = "PreviousNetUserOwner",
					string Description = "The object this user just acquired network ownership of.",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "GearJoint",
			string BaseClass = "Joint",
			string Description = "A gear connects two joints on two objects together. Either joint can be a prismatic or a revolute. A gear ratio is used to bind the two joints together. Limits, motors and springs should most likely not be used on this.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "Ratio",
					string Description = "The gear ratio that the two constraints are bound with.",
					string Type = "float",
				},
				{
					string Name = "Constant",
					string Description = "The initial offset of the gear ratio.",
					string Type = "float",
				},
				{
					string Name = "JointA",
					string Description = "",
					string Type = "Cog",
				},
				{
					string Name = "JointB",
					string Description = "",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "FocusEvent",
			string BaseClass = "Event",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "HeightMapEvent",
			string BaseClass = "Event",
			string Description = "Used by any height map event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "SampleCurve",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Sample",
					string Description = "Sample the curve at the given t.",
					string ReturnValue = "float",
					string Arguments = "(float t)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "t",
						},
					],
				},
				{
					string Name = "DebugSample",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "(float t, String id, Vec4 color)",
					Array ParsedArguments = 
					[
						{
							string Type = "float",
							string Name = "t",
						},
						{
							string Type = "String",
							string Name = "id",
						},
						{
							string Type = "Vec4",
							string Name = "color",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "NetSpace",
			string BaseClass = "NetObject",
			string Description = "Network Space Manages the replication of a single space on the network.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Forget",
					string Description = "[Client] Forgets the online net object locally[Server] Forgets the online net object locally and remotely for all relevant peers Effectively removes the net object from the network system without destroying it Returns true if successful, else false",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SelectRemote",
					string Description = "[Client] Selects the remote net object on the first server peer found running in another game session instance on the engine[Server] Selects the remote net object on the first client peer found running in another game session instance on the engine Will fail if the net object is not online, or not found remotely Returns true if successful, else false",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "HasNetChannel",
					string Description = "",
					string ReturnValue = "",
					string Arguments = "",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "HasNetChannel",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(NetChannelConfig netChannelConfig) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetChannelConfig",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "GetNetChannel",
					string Description = "",
					string ReturnValue = "",
					string Arguments = "",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetNetChannel",
					string Description = "",
					string ReturnValue = "NetChannel",
					string Arguments = "(NetChannelConfig netChannelConfig) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetChannelConfig",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "DispatchLocal",
					string Description = "Dispatches the net event on the net object for the local peer.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchRemote",
					string Description = "Dispatches the net event on the net object for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event, NetPeerId netPeerId)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DispatchBroadcast",
					string Description = "Dispatches the net event on the net object for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchLocalAndRemote",
					string Description = "Dispatches the net event on the net object for the local peer and for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event, NetPeerId netPeerId)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DispatchLocalAndBroadcast",
					string Description = "Dispatches the net event on the net object for the local peer and for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "IsOwnedByUser",
					string Description = "Returns true if the net object is conceptually owned by the specified user, else false.",
					string ReturnValue = "bool",
					string Arguments = "(Cog cog) const",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "IsOwnedByPeer",
					string Description = "Returns true if the net object is conceptually owned by a user added by the specified peer, else false.",
					string ReturnValue = "bool",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "SetNetUserOwnerUp",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "SetNetUserOwnerDown",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetNetSpace",
					string Description = "Returns the operating net space(which may or may not be this net object)",
					string ReturnValue = "NetSpace",
					string Arguments = "() const",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Role",
					string Description = "Returns our open peer's network role(client, server, offline), else Role::Unspecified.",
					string Type = "Role::Enum",
				},
				{
					string Name = "IsClient",
					string Description = "Returns true if our open peer's network role is client, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServer",
					string Description = "Returns true if our open peer's network role is server, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOffline",
					string Description = "Returns true if our open peer's network role is offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientOrOffline",
					string Description = "Returns true if our open peer's network role is client or offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerOrOffline",
					string Description = "Returns true if our open peer's network role is server or offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientOrServer",
					string Description = "Returns true if our open peer's network role is client or server, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOnline",
					string Description = "Returns true if the net object is online, else false.",
					string Type = "bool",
				},
				{
					string Name = "NetObjectId",
					string Description = "Returns the net object ID(set if the net object is live), else 0.",
					string Type = "NetObjectId",
				},
				{
					string Name = "AutomaticChannel",
					string Description = "Returns the automatic net channel configuration resource(assigned to net properties unless another channel is specified)",
					string Type = "NetChannelConfig",
				},
				{
					string Name = "NetObjectCount",
					string Description = "Returns the number of net objects in this space(but not including the net space itself)",
					string Type = "uint",
				},
				{
					string Name = "NetUserCount",
					string Description = "Returns the number of net users in this space.",
					string Type = "uint",
				},
				{
					string Name = "IsOwnedByAUser",
					string Description = "Returns true if the net object is conceptually owned by a user, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsNotOwnedByAUser",
					string Description = "Returns true if the net object is not conceptually owned by a user, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsMine",
					string Description = "Returns true if the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsNotMine",
					string Description = "Returns true if the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientAndMine",
					string Description = "Returns true if our open peer's network role is client and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientButNotMine",
					string Description = "Returns true if our open peer's network role is client and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerAndMine",
					string Description = "Returns true if our open peer's network role is server and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerButNotMine",
					string Description = "Returns true if our open peer's network role is server and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOfflineAndMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOfflineButNotMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "NetUserOwner",
					string Description = "Returns the network user this object conceptually belongs to, else nullptr.",
					string Type = "Cog",
				},
				{
					string Name = "NetUserOwnerUserId",
					string Description = "Returns the network user identifier of the user this object conceptually belongs to, else 0.",
					string Type = "NetUserId",
				},
				{
					string Name = "NetUserOwnerPeerId",
					string Description = "Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0.",
					string Type = "NetPeerId",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Networking",
				"Component",
			],
		},
		{
			string Name = "InputDeviceEvent",
			string BaseClass = "Event",
			string Description = "An event that informs us which input device is being used by the user.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Device",
					string Description = "",
					string Type = "InputDevice::Type",
				},
				{
					string Name = "LastDevice",
					string Description = "",
					string Type = "InputDevice::Type",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "LockStepMouse",
			string BaseClass = "Component",
			string Description = "Provides synced mouse input across lock step.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "InputCameraViewport",
					string Description = "",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "LockStepMouseMove",
					string EventType = "LockStepMouseEvent",
				},
				{
					string EventName = "LockStepMouseDown",
					string EventType = "LockStepMouseButtonEvent",
				},
				{
					string EventName = "LockStepMouseUp",
					string EventType = "LockStepMouseButtonEvent",
				},
				{
					string EventName = "LockStepMouseScroll",
					string EventType = "LockStepMouseScrollEvent",
				},
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "SizerGizmoEvent",
			string BaseClass = "GizmoUpdateEvent",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Gizmo",
					string Description = "",
					string Type = "",
				},
				{
					string Name = "ViewportMouseEvent",
					string Description = "",
					string Type = "",
				},
				{
					string Name = "MouseWorldMovement",
					string Description = "Movement of the mouse in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "InitialGrabPoint",
					string Description = "Where the gizmo was initially grabbed.",
					string Type = "Vec3",
				},
				{
					string Name = "StartExtents",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "NewExtents",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "StartPosition",
					string Description = "",
					string Type = "Vec3",
				},
				{
					string Name = "NewPosition",
					string Description = "",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "TextBlock",
			string BaseClass = "DocumentResource",
			string Description = "A Text resource is a generic resource for simple text data for game logic.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "Text",
					string Description = "",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "NetPeerSentConnectResponse",
			string BaseClass = "Event",
			string Description = "Dispatched after sending a connect response If denied, their net peer ID is released and link is destroyed immediately after this.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirNetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Their net peer ID(set only if accepted)",
					string Type = "IpAddress",
				},
				{
					string Name = "TheirRequestBundle",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "EventBundle",
				},
				{
					string Name = "TheirPendingUserAddRequestCount",
					string Description = "Their bundled request event data.",
					string Type = "uint",
				},
				{
					string Name = "OurIpAddress",
					string Description = "Their pending user add requests following this connect request(within the same frame)",
					string Type = "IpAddress",
				},
				{
					string Name = "OurConnectResponse",
					string Description = "Our IP address(as seen from their perspective)",
					string Type = "ConnectResponse::Enum",
				},
				{
					string Name = "OurResponseBundle",
					string Description = "Our connect response.",
					string Type = "EventBundle",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ZilchScript",
			string BaseClass = "DocumentResource",
			string Description = "Zilch script file Resource.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "SceneEffect",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
				"Rendering",
			],
		},
		{
			string Name = "DynamicMotor",
			string BaseClass = "Component",
			string Description = "A controller to move an object with physics. This gives the controller realistic reactions to the physics world for free.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "MoveInDirection",
					string Description = "Attempts to move the character in the given direction.",
					string ReturnValue = "void",
					string Arguments = "(Vec3 direction, Vec3 up)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "direction",
						},
						{
							string Type = "Vec3",
							string Name = "up",
						},
					],
				},
				{
					string Name = "SetReferenceFrameToWorld",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SetReferenceFrameToObject",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog object)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "object",
						},
					],
				},
				{
					string Name = "Deactivate",
					string Description = "Deactivates all functionality of the dynamic controller.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Activate",
					string Description = "Activates all functionality of the dynamic controller.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "MaxMoveForce",
					string Description = "Max movement force.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "MotionBlur",
			string BaseClass = "Component",
			string Description = "A camera component that provides motion blur.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Samples",
					string Description = "",
					string Type = "int",
				},
				{
					string Name = "Density",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "RadialOnly",
					string Description = "",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
			],
		},
		{
			string Name = "LockStepSyncChecker",
			string BaseClass = "Component",
			string Description = "Ensures that particular objects never fall out of sync.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "IncludeHierarchy",
					string Description = "Whether or not we should include the hierarchy.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "TouchEvent",
			string BaseClass = "Event",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Id",
					string Description = "",
					string Type = "int",
				},
				{
					string Name = "Position",
					string Description = "",
					string Type = "Vec2",
				},
				{
					string Name = "Delta",
					string Description = "",
					string Type = "Vec2",
				},
				{
					string Name = "Size",
					string Description = "",
					string Type = "Vec2",
				},
				{
					string Name = "Rotation",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "JointMotor",
			string BaseClass = "Component",
			string Description = "A motor for a joint. Used to add a constant pull or push to a joint. A motor defines a desired speed to move at as well as a max force that can be applied to reach that force at any timestep. See each joint for a description of how it reacts to a motor.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this motor is currently active.",
					string Type = "bool",
				},
				{
					string Name = "Reverse",
					string Description = "Determines if this motor should move in reverse. This is a quick hand instead of setting the speed to negative.",
					string Type = "bool",
				},
				{
					string Name = "Speed",
					string Description = "The desired speed for this motor. See wiki for each joint's details.",
					string Type = "float",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that the motor can apply each frame to reach the target speed.",
					string Type = "float",
				},
				{
					string Name = "AtomIds",
					string Description = "Signifies what atoms on the joint this effects.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "Mouse",
			string BaseClass = "",
			string Description = "Mouse object for Display System.",
			Array Methods = 
			[
				{
					string Name = "IsButtonDown",
					string Description = "Is a mouse button currently down?",
					string ReturnValue = "bool",
					string Arguments = "(MouseButtons::Enum button)",
					Array ParsedArguments = 
					[
						{
							string Type = "MouseButtons::Enum",
							string Name = "button",
						},
					],
				},
				{
					string Name = "ToggleTrapped",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Cursor",
					string Description = "Set the cursor of the mouse.",
					string Type = "Cursor::Enum",
				},
				{
					string Name = "ScreenPosition",
					string Description = "World Position of the mouse.",
					string Type = "Vec2",
				},
				{
					string Name = "ScreenMovement",
					string Description = "World Movement of the mouse.",
					string Type = "Vec2",
				},
				{
					string Name = "Trapped",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "RawMovement",
					string Description = "High precision raw movement of the mouse.",
					string Type = "Vec2",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "LockStepKeyboard",
			string BaseClass = "Component",
			string Description = "Provides synced keyboard input across lock step.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "LockStepKeyDown",
					string EventType = "LockStepKeyEvent",
				},
				{
					string EventName = "LockStepKeyUp",
					string EventType = "LockStepKeyEvent",
				},
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "DynamicMeshCollider",
			string BaseClass = "Collider",
			string Description = "Dynamic Mesh Collider is a collision primitive for colliding with a moving and deforming triangle mesh.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "BoxParticleEmitter",
			string BaseClass = "ParticleEmitterShared",
			string Description = "Emits particles inside a box.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ResetCount",
					string Description = "Reset the number of particles to emit back to EmitCount.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is this emitter currently emitting particles?",
					string Type = "bool",
				},
				{
					string Name = "EmitCount",
					string Description = "Number of particles to emit per reset.",
					string Type = "uint",
				},
				{
					string Name = "EmitRate",
					string Description = "Rate that particles spawn per second.",
					string Type = "float",
				},
				{
					string Name = "EmitVariance",
					string Description = "How much the emit can vary per sample.",
					string Type = "float",
				},
				{
					string Name = "Size",
					string Description = "Size of each particle spawned.",
					string Type = "float",
				},
				{
					string Name = "SizeVariance",
					string Description = "How much the emit can vary per sample.",
					string Type = "float",
				},
				{
					string Name = "Lifetime",
					string Description = "How a particle's starting lifetime is.",
					string Type = "float",
				},
				{
					string Name = "LifetimeVariance",
					string Description = "Hom much lifetime can vary per particle.",
					string Type = "float",
				},
				{
					string Name = "Spin",
					string Description = "Speed in rads per second of the particle.",
					string Type = "float",
				},
				{
					string Name = "SpinVariance",
					string Description = "Hom much speed speed can vary per particle.",
					string Type = "float",
				},
				{
					string Name = "RandomSpin",
					string Description = "Each particle should start with random spin.",
					string Type = "bool",
				},
				{
					string Name = "Fill",
					string Description = "How much area of the emitter to used 0 to 1.",
					string Type = "float",
				},
				{
					string Name = "EmitterVelocityPercent",
					string Description = "How much of the objects velocity is added to the particles.",
					string Type = "float",
				},
				{
					string Name = "StartVelocity",
					string Description = "Velocity of each particle at start.",
					string Type = "Vec3",
				},
				{
					string Name = "RandomVelocity",
					string Description = "Random Velocity per particle.",
					string Type = "Vec3",
				},
				{
					string Name = "TangentVelocity",
					string Description = "Velocity of each particle in x horizontal tangent y vertical tangent and z outward tangent.",
					string Type = "Vec3",
				},
				{
					string Name = "EmitterSize",
					string Description = "Size of the emitter.",
					string Type = "Vec3",
				},
				{
					string Name = "FastMovingEmitter",
					string Description = "Whether or not we attempt to emit along the vector between the previous position to the current position, which looks better for fast moving particle systems Note: Particle systems that teleport will emit along the teleport line.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "Exhausted",
					string EventType = "ObjectEvent",
				},
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "ObjectLinkEvent",
			string BaseClass = "Event",
			string Description = "An event sent when an object link changes one of its link edges.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "NewCog",
					string Description = "The new cog being set.",
					string Type = "Cog",
				},
				{
					string Name = "OldCog",
					string Description = "The old cog being overridden.",
					string Type = "Cog",
				},
				{
					string Name = "EdgeId",
					string Description = "The index on the edge that is being overridden.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "WindEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a wind force to an object in a given direction. A wind force approximates the surface area of the object in the direction of the force to determine how large the force should be.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "WindSpeed",
					string Description = "The speed that the wind is blowing.",
					string Type = "float",
				},
				{
					string Name = "WindDirection",
					string Description = "The direction that the wind is blowing.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "LevelGeometry",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "LayerDepth",
					string Description = "Layer depth setter/ getter.",
					string Type = "float",
				},
				{
					string Name = "CsgErrorCount",
					string Description = "",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "NetUser",
			string BaseClass = "NetObject",
			string Description = "Network User Manages the replication of a single negotiated user on the network.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Forget",
					string Description = "[Client] Forgets the online net object locally[Server] Forgets the online net object locally and remotely for all relevant peers Effectively removes the net object from the network system without destroying it Returns true if successful, else false",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SelectRemote",
					string Description = "[Client] Selects the remote net object on the first server peer found running in another game session instance on the engine[Server] Selects the remote net object on the first client peer found running in another game session instance on the engine Will fail if the net object is not online, or not found remotely Returns true if successful, else false",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "HasNetChannel",
					string Description = "",
					string ReturnValue = "",
					string Arguments = "",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "HasNetChannel",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(NetChannelConfig netChannelConfig) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetChannelConfig",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "GetNetChannel",
					string Description = "",
					string ReturnValue = "",
					string Arguments = "",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetNetChannel",
					string Description = "",
					string ReturnValue = "NetChannel",
					string Arguments = "(NetChannelConfig netChannelConfig) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetChannelConfig",
							string Name = "netChannelConfig",
						},
					],
				},
				{
					string Name = "IsOwnedByUser",
					string Description = "Returns true if the net object is conceptually owned by the specified user, else false.",
					string ReturnValue = "bool",
					string Arguments = "(Cog cog) const",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "IsOwnedByPeer",
					string Description = "Returns true if the net object is conceptually owned by a user added by the specified peer, else false.",
					string ReturnValue = "bool",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "SetNetUserOwnerUp",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "SetNetUserOwnerDown",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "DispatchLocal",
					string Description = "Dispatches the net event on the net object for the local peer.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchRemote",
					string Description = "Dispatches the net event on the net object for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event, NetPeerId netPeerId)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DispatchBroadcast",
					string Description = "Dispatches the net event on the net object for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchLocalAndRemote",
					string Description = "Dispatches the net event on the net object for the local peer and for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event, NetPeerId netPeerId)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "DispatchLocalAndBroadcast",
					string Description = "Dispatches the net event on the net object for the local peer and for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "AddedByPeer",
					string Description = "Returns true if the user was added by the specified peer, else false.",
					string ReturnValue = "bool",
					string Arguments = "(NetPeerId netPeerId) const",
					Array ParsedArguments = 
					[
						{
							string Type = "NetPeerId",
							string Name = "netPeerId",
						},
					],
				},
				{
					string Name = "FindOwnedNetObjectByNameInSpace",
					string Description = "Finds a net object with the given name owned by this user in the specified space, else nullptr.",
					string ReturnValue = "Cog",
					string Arguments = "(String name, Space space) const",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
						{
							string Type = "Space",
							string Name = "space",
						},
					],
				},
				{
					string Name = "FindOwnedNetObjectByName",
					string Description = "Finds a net object with the given name owned by this user in any space, else nullptr.",
					string ReturnValue = "Cog",
					string Arguments = "(String name) const",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "ReleaseOwnedNetObjects",
					string Description = "[Server/Offline] Releases ownership of all net objects owned by this user in all spaces",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetNetSpace",
					string Description = "Returns the operating net space(which may or may not be this net object)",
					string ReturnValue = "NetSpace",
					string Arguments = "() const",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Role",
					string Description = "Returns our open peer's network role(client, server, offline), else Role::Unspecified.",
					string Type = "Role::Enum",
				},
				{
					string Name = "IsClient",
					string Description = "Returns true if our open peer's network role is client, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServer",
					string Description = "Returns true if our open peer's network role is server, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOffline",
					string Description = "Returns true if our open peer's network role is offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientOrOffline",
					string Description = "Returns true if our open peer's network role is client or offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerOrOffline",
					string Description = "Returns true if our open peer's network role is server or offline, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientOrServer",
					string Description = "Returns true if our open peer's network role is client or server, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOnline",
					string Description = "Returns true if the net object is online, else false.",
					string Type = "bool",
				},
				{
					string Name = "NetObjectId",
					string Description = "Returns the net object ID(set if the net object is live), else 0.",
					string Type = "NetObjectId",
				},
				{
					string Name = "IsOwnedByAUser",
					string Description = "Returns true if the net object is conceptually owned by a user, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsNotOwnedByAUser",
					string Description = "Returns true if the net object is not conceptually owned by a user, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsMine",
					string Description = "Returns true if the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsNotMine",
					string Description = "Returns true if the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientAndMine",
					string Description = "Returns true if our open peer's network role is client and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsClientButNotMine",
					string Description = "Returns true if our open peer's network role is client and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerAndMine",
					string Description = "Returns true if our open peer's network role is server and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsServerButNotMine",
					string Description = "Returns true if our open peer's network role is server and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOfflineAndMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "IsOfflineButNotMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is not conceptually owned by a user added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "NetUserOwner",
					string Description = "Returns the network user this object conceptually belongs to, else nullptr.",
					string Type = "Cog",
				},
				{
					string Name = "NetUserOwnerUserId",
					string Description = "Returns the network user identifier of the user this object conceptually belongs to, else 0.",
					string Type = "NetUserId",
				},
				{
					string Name = "NetUserOwnerPeerId",
					string Description = "Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0.",
					string Type = "NetPeerId",
				},
				{
					string Name = "AutomaticChannel",
					string Description = "Returns the automatic net channel configuration resource(assigned to net properties unless another channel is specified)",
					string Type = "NetChannelConfig",
				},
				{
					string Name = "AddedByMyPeer",
					string Description = "Returns true if the user was added by our local peer, else false.",
					string Type = "bool",
				},
				{
					string Name = "OwnedNetObjects",
					string Description = "Returns all net objects owned by this user in all spaces.",
					string Type = "CogHashSetRange",
				},
				{
					string Name = "OwnedNetObjectCount",
					string Description = "Returns the number of net objects owned by this user in all spaces.",
					string Type = "uint",
				},
				{
					string Name = "NetUserId",
					string Description = "Adding network peer identifier.",
					string Type = "NetUserId",
				},
				{
					string Name = "NetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Networking",
				"Component",
			],
		},
		{
			string Name = "WheelJoint",
			string BaseClass = "Joint",
			string Description = "A joint that models a wheel with shocks. A wheel aligns the two local axes together and allows free rotation about this axis. The specified shock axis is turned into a soft constraint to model the shocks. Note: object 0 should be the root object as the shock axis rotates with this object. If object 0 is the wheel, then the shock axis will rotate with the wheel, causing the shocks to not stay aligned. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "SetWorldPoints",
					string Description = "Sets the position of the anchor on object A and B given a position in world space",
					string ReturnValue = "void",
					string Arguments = "Vec3",
					Array ParsedArguments = 
					[
						{
							string Type = "Real3",
							string Name = "",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "LocalPointA",
					string Description = "The local point of the anchor on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalPointB",
					string Description = "The local point of the anchor on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointA",
					string Description = "The position of the anchor on object A in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldPointB",
					string Description = "The position of the anchor on object B in world space.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAngleA",
					string Description = "The rotation on object A that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "LocalAngleB",
					string Description = "The rotation on object B that is being aligned to.",
					string Type = "Quat",
				},
				{
					string Name = "LocalAxisA",
					string Description = "The locally defined axis on object A.",
					string Type = "Vec3",
				},
				{
					string Name = "LocalAxisB",
					string Description = "The locally defined axis on object B.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldAxis",
					string Description = "The axis in world space that is being rotated about.",
					string Type = "Vec3",
				},
				{
					string Name = "WorldShockAxis",
					string Description = "The shock axis after it has been translated into world coordinates.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "DefinitionSet",
			string BaseClass = "Resource",
			string Description = "Base Definition Collection.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "MeshBenderTool",
			string BaseClass = "Tool",
			string Description = "An efficient way to make per instance modifications to meshes(eg. bending level geometry)",
			Array Methods = 
			[
				{
					string Name = "BeginDrag",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "(Viewport viewport)",
					Array ParsedArguments = 
					[
						{
							string Type = "Viewport",
							string Name = "viewport",
						},
					],
				},
			],
			Array Properties = 
			[
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "ScreenDrops",
			string BaseClass = "Component",
			string Description = "A camera component that provides screen drops blur.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
			],
		},
		{
			string Name = "Shadow",
			string BaseClass = "Component",
			string Description = "Shadow component for dynamic shadowing with lights.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Quality",
					string Description = "",
					string Type = "unsigned",
				},
				{
					string Name = "ShadowMapping",
					string Description = "",
					string Type = "ShadowMapping::Type",
				},
				{
					string Name = "ShadowSoftening",
					string Description = "",
					string Type = "ShadowSoftening::Type",
				},
				{
					string Name = "Color",
					string Description = "Color of the shadow.",
					string Type = "Vec4",
				},
				{
					string Name = "NormalOffsetBias",
					string Description = "How far to move the shadow sample in world units along the surface normal.",
					string Type = "float",
				},
				{
					string Name = "MinFrustumDepth",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "SplitPlaneDistribution",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "ShowCascadeColors",
					string Description = "Alters the light colors to visualize where the cascaded splits are(white, red, green, blue) from near to far.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
			],
		},
		{
			string Name = "ZilchPluginLibrary",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "DynamicMeshGenerator",
			string BaseClass = "Component",
			string Description = "Used to generate Dynamic Meshes from the Mesh resource.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddMesh",
					string Description = "Adds all the vertices and indices of a mesh with a given offset.",
					string ReturnValue = "void",
					string Arguments = "(Mesh mesh, Vec3 translation, QuatParam rotation, Vec3 scale)",
					Array ParsedArguments = 
					[
						{
							string Type = "Mesh",
							string Name = "mesh",
						},
						{
							string Type = "Vec3",
							string Name = "translation",
						},
						{
							string Type = "QuatParam",
							string Name = "rotation",
						},
						{
							string Type = "Vec3",
							string Name = "scale",
						},
					],
				},
				{
					string Name = "BuildFromMesh",
					string Description = "Copies the mesh info from the Mesh resource passed in.",
					string ReturnValue = "void",
					string Arguments = "(Mesh mesh)",
					Array ParsedArguments = 
					[
						{
							string Type = "Mesh",
							string Name = "mesh",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Mesh",
					string Description = "",
					string Type = "Mesh",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "Light",
			string BaseClass = "Graphical",
			string Description = "Light component for dynamic scene lighting.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "LightType",
					string Description = "Type of the Light(Point, Spot, Etc)",
					string Type = "LightType::Enum",
				},
				{
					string Name = "Color",
					string Description = "Color of the light.",
					string Type = "Vec4",
				},
				{
					string Name = "Intensity",
					string Description = "Intensity of the light.",
					string Type = "float",
				},
				{
					string Name = "Range",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Falloff",
					string Description = "Falloff exponent, 1 is linear.",
					string Type = "float",
				},
				{
					string Name = "Angle",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Size",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "VoxelChunkMaterials",
			string BaseClass = "Component",
			string Description = "Contains all the material definitions used by VoxelChunks when building the meshes The materials should generally be setup by script(typically the integer id used is an enum in script)",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "SetFaceGraphicsMaterial",
					string Description = "Sets the graphical material used to draw the voxels(all faces/sides must be set using SetMaterialFaceSprite)",
					string ReturnValue = "void",
					string Arguments = "(int voxelType, VoxelFace::Enum face, Material graphicsMaterial)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "voxelType",
						},
						{
							string Type = "VoxelFace::Enum",
							string Name = "face",
						},
						{
							string Type = "Material",
							string Name = "graphicsMaterial",
						},
					],
				},
				{
					string Name = "SetFaceSprite",
					string Description = "Sets one face/side of a material to the given sprite source.",
					string ReturnValue = "void",
					string Arguments = "(int voxelType, VoxelFace::Enum face, SpriteSource spriteSource)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "voxelType",
						},
						{
							string Type = "VoxelFace::Enum",
							string Name = "face",
						},
						{
							string Type = "SpriteSource",
							string Name = "spriteSource",
						},
					],
				},
				{
					string Name = "SetInternalFaceCullGroup",
					string Description = "Sets one face/side of a material to be within a certain culling group All materials in the same culling group will cull faces if they are next to another mateiral in the same group.",
					string ReturnValue = "void",
					string Arguments = "(int voxelType, VoxelFace::Enum face, int internalFaceCullGroup)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "voxelType",
						},
						{
							string Type = "VoxelFace::Enum",
							string Name = "face",
						},
						{
							string Type = "int",
							string Name = "internalFaceCullGroup",
						},
					],
				},
				{
					string Name = "SetTransparent",
					string Description = "If a block is considered transparent, then shared faces of opaque voxels will not be culled.",
					string ReturnValue = "void",
					string Arguments = "(int voxelType, VoxelFace::Enum face, bool transparent)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "voxelType",
						},
						{
							string Type = "VoxelFace::Enum",
							string Name = "face",
						},
						{
							string Type = "bool",
							string Name = "transparent",
						},
					],
				},
				{
					string Name = "SetUniformMaterial",
					string Description = "Sets both the graphics material and all sides of the voxel to the given sprite.",
					string ReturnValue = "void",
					string Arguments = "(int voxelType, Material graphicsMaterial, SpriteSource source, bool transparent)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "voxelType",
						},
						{
							string Type = "Material",
							string Name = "graphicsMaterial",
						},
						{
							string Type = "SpriteSource",
							string Name = "source",
						},
						{
							string Type = "bool",
							string Name = "transparent",
						},
					],
				},
				{
					string Name = "ClearMaterial",
					string Description = "Removes a material by id, or returns false if the material didn't exist.",
					string ReturnValue = "bool",
					string Arguments = "(int voxelType)",
					Array ParsedArguments = 
					[
						{
							string Type = "int",
							string Name = "voxelType",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "SpriteLayer",
			string BaseClass = "Resource",
			string Description = "Just a named resource for defining sprite sort order, no other data.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "SpriteTextBlock",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "TextBlock",
					string Description = "Text block to display on Sprite Text.",
					string Type = "TextBlock",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "FragmentSource",
			string BaseClass = "DocumentResource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "Material",
			string BaseClass = "Resource",
			string Description = "Material resource class. The material resource contains the data and resources needed to render a model.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "NetPropertyConfig",
			string BaseClass = "",
			string Description = "Network Property Configuration Configures a network property.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Component",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "Property",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "NetChannel",
					string Description = "",
					string Type = "NetChannelConfig",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "Animation",
			string BaseClass = "Resource",
			string Description = "The Animation resource class is used to store animations of game objects and their properties.",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "Duration",
					string Description = "Duration of the animation in seconds.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "GeometryMesh",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Debug draw.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "GeometryMaterial",
					string Description = "",
					string Type = "GeometryMaterial",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "EventBundle",
			string BaseClass = "ZeroObject",
			string Description = "Event Bundle Serialized event storage container.",
			Array Methods = 
			[
				{
					string Name = "AddEvent",
					string Description = "Adds the event to back of the event bundle Returns true if successful, else false(an event of that type has already been added)",
					string ReturnValue = "bool",
					string Arguments = "(Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "GetEvents",
					string Description = "Returns all the events that have been added to the event bundle.",
					string ReturnValue = "EventRange",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "RemoveEvent",
					string Description = "",
					string ReturnValue = "Boolean",
					string Arguments = "(event : Event)",
					Array ParsedArguments = 
					[
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "RemoveEvent",
					string Description = "Removes the event specified from the event bundle Returns true if successful, else false(an event of that type has already been added)",
					string ReturnValue = "bool",
					string Arguments = "(Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "Clear",
					string Description = "Clears the event bundle.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "IsEmpty",
					string Description = "Returns true if the event bundle is empty(doesn't contain any events), else false.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "ScreenWarpRing",
			string BaseClass = "Component",
			string Description = "A component that creates a graphical warping effect(in a ring). Requires the deferred renderer and that Refraction is enabled.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Size",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Thickness",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "Intensity",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
			],
		},
		{
			string Name = "Model",
			string BaseClass = "Graphical",
			string Description = "3D Model component. Basic 3D model made of a 3D polygonal mesh. Uses Transform component position, rotation, and scale.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Visible",
					string Description = "If object should be rendered.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityCulling",
					string Description = "If object is culled and not graphically updated when it's not visible.",
					string Type = "bool",
				},
				{
					string Name = "VisibilityEvents",
					string Description = "If object receives events when entering/exiting the view of a rendering camera or shadow.",
					string Type = "bool",
				},
				{
					string Name = "CastShadows",
					string Description = "If object is rendered to shadow maps.",
					string Type = "bool",
				},
				{
					string Name = "Material",
					string Description = "Material Used to Render this Model.",
					string Type = "Material",
				},
				{
					string Name = "Mesh",
					string Description = "Mesh used for this Model.",
					string Type = "Mesh",
				},
				{
					string Name = "Color",
					string Description = "Color used for per instance color effects.",
					string Type = "Vec4",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "EnterView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "EnterViewAny",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitView",
					string EventType = "GraphicalEvent",
				},
				{
					string EventName = "ExitViewAll",
					string EventType = "GraphicalEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Graphical",
				"Graphics",
			],
		},
		{
			string Name = "PathFinderSettings",
			string BaseClass = "",
			string Description = "",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Heuristic",
					string Description = "Heuristic type.",
					string Type = "Heuristic::Type",
				},
				{
					string Name = "HeuristicWeight",
					string Description = "The heuristic weight.",
					string Type = "float",
				},
				{
					string Name = "Rubberbanding",
					string Description = "The type of rubber banding.",
					string Type = "RubberBanding::Type",
				},
				{
					string Name = "RemoveCoLinearPoints",
					string Description = "Whether or not to remove CoLinear points after rubber banding.",
					string Type = "bool",
				},
				{
					string Name = "CurveType",
					string Description = "The type of curve generated.",
					string Type = "Math::CurveType::Type",
				},
				{
					string Name = "PathResolution",
					string Description = "The resolution of the curve(detail).",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "NetPeerReceivedUserAddResponse",
			string BaseClass = "Event",
			string Description = "Dispatched after receiving a net user add response.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirNetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Their net peer ID.",
					string Type = "IpAddress",
				},
				{
					string Name = "OurRequestBundle",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "EventBundle",
				},
				{
					string Name = "TheirAddResponse",
					string Description = "Our bundled request event data.",
					string Type = "NetUserAddResponse::Enum",
				},
				{
					string Name = "TheirResponseBundle",
					string Description = "Their add response.",
					string Type = "EventBundle",
				},
				{
					string Name = "OurNetUserId",
					string Description = "Their bundled response event data.",
					string Type = "NetUserId",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ReactiveSpace",
			string BaseClass = "Component",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Over",
					string Description = "",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "Camera",
			string BaseClass = "Component",
			string Description = "3D Camera class. The camera uses the position and rotation of the Transform component.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ProjectionMode",
					string Description = "How the geometry in the scene is projected. Perspective or Orthographic.",
					string Type = "ProjectionMode::Type",
				},
				{
					string Name = "Facing",
					string Description = "Direction the camera is facing.",
					string Type = "Facing::Enum",
				},
				{
					string Name = "TransparentSort",
					string Description = "How transparent objects will be sorted relative to this camera.",
					string Type = "CameraTransparentSort::Type",
				},
				{
					string Name = "FieldOfView",
					string Description = "The Field of View of the Camera in Degrees.",
					string Type = "float",
				},
				{
					string Name = "NearPlane",
					string Description = "The near clipping plane of the camera.",
					string Type = "float",
				},
				{
					string Name = "FarPlane",
					string Description = "The far clipping plane of the camera.",
					string Type = "float",
				},
				{
					string Name = "Size",
					string Description = "Size of the orthographic projection.",
					string Type = "float",
				},
				{
					string Name = "Viewport",
					string Description = "Viewport Object using this camera.",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
				"Rendering",
			],
		},
		{
			string Name = "PhysicsSolverConfig",
			string BaseClass = "Resource",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnValue = "Resource",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of resource for display.",
					string Type = "String",
				},
				{
					string Name = "SolverIterationCount",
					string Description = "The number of iterations used in the constraint solver. Affects how stiff joints will be.",
					string Type = "uint",
				},
				{
					string Name = "PositionIterationCount",
					string Description = "The number of iterations used for position correction(if position correction is used).",
					string Type = "uint",
				},
				{
					string Name = "VelocityRestitutionThreshold",
					string Description = "To prevent numerical issues, restitution is only applied if the relative velocity between the two objects is above this value.",
					string Type = "float",
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "CacheContacts",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "SolverType",
					string Description = "The kind of solver used. For the most part this is internal and should only affect performance.",
					string Type = "uint",
				},
				{
					string Name = "PositionCorrectionType",
					string Description = "What method should be used to fix errors in joints. Baumgarte fixes errors by adding extra velocity but results in a more spongy behavior. Post Stabilization.",
					string Type = "uint",
				},
				{
					string Name = "SubCorrectionType",
					string Description = "What kind of solver to use for post stabilization. Mostly for testing.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Resource",
			],
		},
		{
			string Name = "NetPeerReceivedUserAddRequest",
			string BaseClass = "Event",
			string Description = "Dispatched after receiving a net user add request.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "TheirNetPeerId",
					string Description = "Data.",
					string Type = "NetPeerId",
				},
				{
					string Name = "TheirIpAddress",
					string Description = "Their net peer ID.",
					string Type = "IpAddress",
				},
				{
					string Name = "TheirRequestBundle",
					string Description = "Their IP address(as seen from our perspective)",
					string Type = "EventBundle",
				},
				{
					string Name = "ReturnOurAddResponse",
					string Description = "Their bundled request event data.",
					string Type = "bool",
				},
				{
					string Name = "ReturnOurResponseBundle",
					string Description = "Return: Our add response(accept the add request?)",
					string Type = "EventBundle",
				},
				{
					string Name = "ReturnTheirNetUser",
					string Description = "Return: Our bundled response event data.",
					string Type = "Cog",
				},
				{
					string Name = "TheirNetUserId",
					string Description = "Return: Their network user object(must have a NetUser component)",
					string Type = "NetUserId",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "Attractor",
			string BaseClass = "MovementBase",
			string Description = "Orients the object towards other objects with the Attractive component.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draw the object.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeRadians",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeDegrees",
					string Description = "",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetObject",
					string Description = "Returns the object at the given index.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
				{
					string Name = "ObjectsAttractedTo",
					string Description = "Returns the amount of objects it is currently being attracted to.",
					string ReturnValue = "uint",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Is the component active.",
					string Type = "bool",
				},
				{
					string Name = "MaxAngleChange",
					string Description = "The maximum angle that this component can output.",
					string Type = "float",
				},
				{
					string Name = "Strength",
					string Description = "The strength of this particular movement component.",
					string Type = "float",
				},
				{
					string Name = "QueryOnly",
					string Description = "Do we query the component(and not rotate our object?)",
					string Type = "bool",
				},
				{
					string Name = "DebugDraw",
					string Description = "Do we draw the debug information?",
					string Type = "bool",
				},
				{
					string Name = "CheckRadius",
					string Description = "The radius of the sphere cast each frame to find objects the Attractive component.",
					string Type = "float",
				},
				{
					string Name = "MaxObjects",
					string Description = "The maximum amount of objects to look for at a time.",
					string Type = "uint",
				},
				{
					string Name = "TimeBetweenChecks",
					string Description = "How much time in between sphere casts(in seconds).",
					string Type = "float",
				},
				{
					string Name = "AttractiveMustBeVisible",
					string Description = "If the object must be visible to be attracted to it(done with ray casts).",
					string Type = "bool",
				},
				{
					string Name = "IgnoreStaticObjects",
					string Description = "Whether or not we only want Dynamic objects.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "LockStepGamepadEvent",
			string BaseClass = "LockStepEvent",
			string Description = "A synced gamepad event.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Peer",
					string Description = "",
					string Type = "LockStepPeer",
				},
				{
					string Name = "Index",
					string Description = "The index of the gamepad that was activated or deactivated.",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "PulleyJoint",
			string BaseClass = "Joint",
			string Description = "A PulleyJoint turn two StickJoints into a pulley via a pulley ratio. A PulleyJoint connects the two free objects of two different stick joints. These two objects will then be bound to move together via the formula length0+ ratio* length1= 0. Limits, motors and springs should not be used on a pulley.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnValue = "Cog",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnValue = "Cog",
					string Arguments = "(uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
					string Type = "bool",
				},
				{
					string Name = "AutoSnaps",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
					string Type = "bool",
				},
				{
					string Name = "CollideConnected",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
					string Type = "bool",
				},
				{
					string Name = "MaxForce",
					string Description = "The maximum force that this joint can apply to correct itself.",
					string Type = "float",
				},
				{
					string Name = "Ratio",
					string Description = "The ratio between the two stick joints. The ratio is used in the formula length0+ ratio length1= 0.",
					string Type = "float",
				},
				{
					string Name = "JointA",
					string Description = "",
					string Type = "Cog",
				},
				{
					string Name = "JointB",
					string Description = "",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "JointExceedForceLimit",
					string EventType = "JointEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
		},
		{
			string Name = "LockStepUpdateEvent",
			string BaseClass = "UpdateEvent",
			string Description = "A frame update event that is expected to be synced.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Dt",
					string Description = "The amount of time that passed between this frame and the last(scaled by TimeSpace.TimeScale).",
					string Type = "float",
				},
				{
					string Name = "TimePassed",
					string Description = "The amount of time that has passed since this space was created(TimeSpace.TimeScale affects this value).",
					string Type = "float",
				},
				{
					string Name = "RealTimePassed",
					string Description = "The float amount of time that has passed since this space was created(uncaped and unclamped).",
					string Type = "float",
				},
				{
					string Name = "CurrentFrame",
					string Description = "The current synced frame(it is ok to reply upon this value)",
					string Type = "Frame",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "HeightMap",
			string BaseClass = "Component",
			string Description = "A common class that represents height map data.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Source",
					string Description = "Get source for height map.",
					string Type = "HeightMapSource",
				},
				{
					string Name = "UnitsPerPatch",
					string Description = "Gets/sets the number of units per patch.",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "NetChannelPropertyChange",
			string BaseClass = "Event",
			string Description = "Dispatched after an outgoing/incoming net channel property change is detected during a particular replication phase.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "ReplicationPhase",
					string Description = "Data.",
					string Type = "ReplicationPhase::Enum",
				},
				{
					string Name = "Direction",
					string Description = "The replication phase.",
					string Type = "TransmissionDirection::Enum",
				},
				{
					string Name = "Object",
					string Description = "The change direction.",
					string Type = "Cog",
				},
				{
					string Name = "ChannelName",
					string Description = "The changed net object.",
					string Type = "String",
				},
				{
					string Name = "ComponentName",
					string Description = "The changed net channel.",
					string Type = "String",
				},
				{
					string Name = "PropertyName",
					string Description = "The component which declared the changed net property.",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "ParticleCollisionHeightmap",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Restitution",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "HeightMap",
					string Description = "",
					string Type = "Cog",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Particle",
				"Component",
			],
		},
		{
			string Name = "LockStepSyncIgnore",
			string BaseClass = "Component",
			string Description = "Sometimes when doing sync checking, we need to ignore specific components because we know that they will not be in sync. For example, player specific components such as the Microphone or the Camera.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "IgnoreAllComponents",
					string Description = "Should we ignore all components(or just ones set in the array)",
					string Type = "bool",
				},
				{
					string Name = "IgnoreComponent0",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "IgnoreComponent1",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "IgnoreComponent2",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "IgnoreComponent3",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "IgnoreComponent4",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "IgnoreComponent5",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "IgnoreComponent6",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "IgnoreComponent7",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "IgnoreComponent8",
					string Description = "",
					string Type = "String",
				},
				{
					string Name = "IgnoreComponent9",
					string Description = "",
					string Type = "String",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "RayTracedRenderer",
			string BaseClass = "Renderer",
			string Description = "Ray-traced Scene renderer.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "PickTestCoordinates",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "RunTest",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "RestartDrawing",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ClearColor",
					string Description = "Color to clear the screen.",
					string Type = "Vec4",
				},
				{
					string Name = "DrawNonVisible",
					string Description = "Draw editor only materials.",
					string Type = "bool",
				},
				{
					string Name = "DrawDebugObjects",
					string Description = "Do debug drawing.",
					string Type = "bool",
				},
				{
					string Name = "DrawEditorIcons",
					string Description = "Draw editor icons.",
					string Type = "bool",
				},
				{
					string Name = "EditorIconDepth",
					string Description = "Depth for editor icons.",
					string Type = "bool",
				},
				{
					string Name = "Active",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "TargetDrawTimeMs",
					string Description = "",
					string Type = "float",
				},
				{
					string Name = "AllowThreading",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "ThreadCount",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "SampleScale",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "TestX",
					string Description = "",
					string Type = "uint",
				},
				{
					string Name = "TestY",
					string Description = "",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Renderer",
			],
		},
		{
			string Name = "BaseCollisionEvent",
			string BaseClass = "Event",
			string Description = "Common interface for all collision events. Contains the core functionality of inspecting the contained manifold.",
			Array Methods = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Description = "The event-ID that this event was dispatched under.",
					string Type = "String",
				},
				{
					string Name = "Object",
					string Description = "The object that this event was sent to.",
					string Type = "Cog",
				},
				{
					string Name = "OtherObject",
					string Description = "The other object in this event. There were two objects A and B, we sent to A so this is B.",
					string Type = "Cog",
				},
				{
					string Name = "ContactPointCount",
					string Description = "Returns how many points of contact there are.",
					string Type = "uint",
				},
				{
					string Name = "IsGhost",
					string Description = "Returns whether or not this was a ghost collision.",
					string Type = "bool",
				},
				{
					string Name = "ContactPoints",
					string Description = "Returns a range to iterate through all of the contact points.",
					string Type = "ContactPointRange",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Event",
			],
		},
		{
			string Name = "PointGravityEffect",
			string BaseClass = "BasicPointEffect",
			string Description = "A force effect that pulls an object towards a central point. This effect is identical to the PointForceEffect except it ignores the mass of the object. This means that all objects will accelerate at the same speed irrespective of their mass(just like gravity). This is useful to make planetary gravity or other similar effects.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Active",
					string Description = "Enable/disable this effect.",
					string Type = "bool",
				},
				{
					string Name = "WakeUpOnChange",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
					string Type = "bool",
				},
				{
					string Name = "EffectType",
					string Description = "What kind of effect this is.",
					string Type = "EffectType::Enum",
				},
				{
					string Name = "MinDistance",
					string Description = "The first distance at which attenuation will start. If an object is under the min distance, it will get the strength at min applied. If an object is in between min and max, then it will attenuate.",
					string Type = "float",
				},
				{
					string Name = "MaxDistance",
					string Description = "The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition.",
					string Type = "float",
				},
				{
					string Name = "StrengthAtMin",
					string Description = "The strength that this effect applies at the min distance.",
					string Type = "float",
				},
				{
					string Name = "StrengthAtMax",
					string Description = "The strength that this effect applies at the max distance.",
					string Type = "float",
				},
				{
					string Name = "LocalPositionOffset",
					string Description = "The offset from the transform position(in local space) that the point effect will be applied at.",
					string Type = "Vec3",
				},
				{
					string Name = "InterpolationType",
					string Description = "The type of interpolation used(ie. Linear, Quadratic) for the effect.",
					string Type = "PointInterpolationStates::Enum",
				},
				{
					string Name = "EndCondition",
					string Description = "How the interpolation should be handled at the max distance. ClampToMax will clamp to strength at max. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation(this may go negative).",
					string Type = "PointEndCondition::Enum",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
		},
		{
			string Name = "SkyBox",
			string BaseClass = "SceneEffect",
			string Description = "",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Texture",
					string Description = "",
					string Type = "Texture",
				},
				{
					string Name = "Rotation",
					string Description = "",
					string Type = "Quat",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Component",
				"Graphics",
				"Rendering",
			],
		},
		{
			string Name = "LockStepGamepads",
			string BaseClass = "Component",
			string Description = "Provides synced gamepads input across lock step.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetGamepad",
					string Description = "",
					string ReturnValue = "LockStepGamepad",
					string Arguments = "(LockStepPeer peer, uint index)",
					Array ParsedArguments = 
					[
						{
							string Type = "LockStepPeer",
							string Name = "peer",
						},
						{
							string Type = "uint",
							string Name = "index",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "MaxGamepadsPerPeer",
					string Description = "",
					string Type = "uint",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "LockStepGamepadUpdate",
					string EventType = "LockStepGamepadUpdateEvent",
				},
				{
					string EventName = "LockStepGamepadDown",
					string EventType = "LockStepGamepadButtonEvent",
				},
				{
					string EventName = "LockStepGamepadUp",
					string EventType = "LockStepGamepadButtonEvent",
				},
				{
					string EventName = "LockStepGamepadFound",
					string EventType = "LockStepGamepadStatusEvent",
				},
				{
					string EventName = "LockStepGamepadLost",
					string EventType = "LockStepGamepadStatusEvent",
				},
			],
			Array Tags = 
			[
				"Component",
			],
		},
		{
			string Name = "EllipsoidCollider",
			string BaseClass = "Collider",
			string Description = "Ellipsoid Collider is a basic collision primitive of a ellipsoid.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
				{
					string Name = "Radii",
					string Description = "The x, y and z radius of the ellipsoid.",
					string Type = "Vec3",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "Space",
			string BaseClass = "Cog",
			string Description = "A space is a near boundless, three-dimensional extent in which objects and events occur and have relative position, direction, and time. Essentially a world of objects that exist together. Used to divide objects between UI, World, Editor, and others. The two most Common spaces are the'World' for the game world and the'Ui' for the HUD and menus.",
			Array Methods = 
			[
				{
					string Name = "Destroy",
					string Description = "Destroy the space and all objects inside it.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "DispatchEvent",
					string Description = "Dispatches an event on this object.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "AddComponentByName",
					string Description = "Add a component by name.",
					string ReturnValue = "bool",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "RemoveComponentByName",
					string Description = "Remove a component by name. Returns true if the component existed.",
					string ReturnValue = "bool",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "Create",
					string Description = "Create an object in the space.",
					string ReturnValue = "Cog",
					string Arguments = "(Archetype archetype)",
					Array ParsedArguments = 
					[
						{
							string Type = "Archetype",
							string Name = "archetype",
						},
					],
				},
				{
					string Name = "CreateAtPosition",
					string Description = "Create a object at a position in the space.",
					string ReturnValue = "Cog",
					string Arguments = "(Archetype archetype, Vec3 position)",
					Array ParsedArguments = 
					[
						{
							string Type = "Archetype",
							string Name = "archetype",
						},
						{
							string Type = "Vec3",
							string Name = "position",
						},
					],
				},
				{
					string Name = "CreateLink",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "(Archetype archetype, Cog objectA, Cog objectB)",
					Array ParsedArguments = 
					[
						{
							string Type = "Archetype",
							string Name = "archetype",
						},
						{
							string Type = "Cog",
							string Name = "objectA",
						},
						{
							string Type = "Cog",
							string Name = "objectB",
						},
					],
				},
				{
					string Name = "LoadLevel",
					string Description = "Load new level replace the current level.",
					string ReturnValue = "void",
					string Arguments = "(Level levelName)",
					Array ParsedArguments = 
					[
						{
							string Type = "Level",
							string Name = "levelName",
						},
					],
				},
				{
					string Name = "ReloadLevel",
					string Description = "Reload the current level.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AddObjectsFromLevel",
					string Description = "Add all objects from a level.",
					string ReturnValue = "Level",
					string Arguments = "(Level levelName)",
					Array ParsedArguments = 
					[
						{
							string Type = "Level",
							string Name = "levelName",
						},
					],
				},
				{
					string Name = "FindObjectByName",
					string Description = "Find an object in the space with a given name.",
					string ReturnValue = "Cog",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindFirstObjectByName",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindLastObjectByName",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindFirstRootObjectByName",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindLastRootObjectByName",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindAllObjectsByName",
					string Description = "Find an object in the space with a given name.",
					string ReturnValue = "CogNameRange",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "DestroyAll",
					string Description = "Destroy all objects in space.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "DestroyAllFromLevel",
					string Description = "Destroy all objects created from level.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AllObjects",
					string Description = "All objects in the space.",
					string ReturnValue = "range",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "IsEditorMode",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Modified",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Calls DebugDraw on all components in this cog.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AttachTo",
					string Description = "Attach to a parent object.",
					string ReturnValue = "void",
					string Arguments = "(Cog parent)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "parent",
						},
					],
				},
				{
					string Name = "Detach",
					string Description = "Detach from a parent object.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "AttachToRelative",
					string Description = "Attach to a parent object and compute the new transform so that the objects are relative.",
					string ReturnValue = "void",
					string Arguments = "(Cog parent)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "parent",
						},
					],
				},
				{
					string Name = "DetachRelative",
					string Description = "Detach from a parent object and compute the new transform so that the objects are relative.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindChildByName",
					string Description = "Find a child object with the given name.",
					string ReturnValue = "Cog",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "FindAllChildrenByName",
					string Description = "",
					string ReturnValue = "HierarchyNameRange",
					string Arguments = "(String name)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "name",
						},
					],
				},
				{
					string Name = "DispatchUp",
					string Description = "Dispatches an event up the tree on each parent recursively(pre-order traversal)",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "DispatchDown",
					string Description = "Dispatches an event down the tree on all children recursively(pre-order traversal)",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event event)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "event",
						},
					],
				},
				{
					string Name = "FindRoot",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "UploadToArchetype",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ModifiedFromArchetype",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "Clone",
					string Description = "Clones this cog.",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ClearArchetype",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindNextSibling",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindPreviousSibling",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindNextInOrder",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "FindPreviousInOrder",
					string Description = "",
					string ReturnValue = "Cog",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "IsDescendant",
					string Description = "Returns whether or not the given cog is a descendant of us.",
					string ReturnValue = "bool",
					string Arguments = "(Cog cog)",
					Array ParsedArguments = 
					[
						{
							string Type = "Cog",
							string Name = "cog",
						},
					],
				},
				{
					string Name = "GetComponentByName",
					string Description = "",
					string ReturnValue = "Component",
					string Arguments = "(String componentTypeName)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "componentTypeName",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Description = "Name of the Object.",
					string Type = "String",
				},
				{
					string Name = "ArchetypeName",
					string Description = "The name of the archetype this object was created from.",
					string Type = "String",
				},
				{
					string Name = "RuntimeId",
					string Description = "Gets a unique integer for this object(used primarily for debugging)",
					string Type = "u32",
				},
				{
					string Name = "Actions",
					string Description = "",
					string Type = "Actions",
				},
				{
					string Name = "ObjectCount",
					string Description = "Number of objects in the space.",
					string Type = "uint",
				},
				{
					string Name = "CurrentLevel",
					string Description = "Last level loaded.",
					string Type = "Level",
				},
				{
					string Name = "Space",
					string Description = "",
					string Type = "Space",
				},
				{
					string Name = "Parent",
					string Description = "Get the parent of this object in the Hierarchy.",
					string Type = "Cog",
				},
				{
					string Name = "IsBeingDestroyed",
					string Description = "",
					string Type = "bool",
				},
				{
					string Name = "Transient",
					string Description = "Object will not be saved.",
					string Type = "bool",
				},
				{
					string Name = "Persistent",
					string Description = "Object will not be destroyed on level load or change.",
					string Type = "bool",
				},
				{
					string Name = "EditorViewportHidden",
					string Description = "Hidden from view used for editor.",
					string Type = "bool",
				},
				{
					string Name = "ObjectViewHidden",
					string Description = "If the object needs to not show up in the object view.",
					string Type = "bool",
				},
				{
					string Name = "Locked",
					string Description = "Not able to be modified or selected in the viewport.",
					string Type = "bool",
				},
				{
					string Name = "Children",
					string Description = "Grab the children directly from the hierarchy component.",
					string Type = "HierarchyList::range",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
			],
		},
		{
			string Name = "TriangleCollider",
			string BaseClass = "Collider",
			string Description = "Triangle Collider is a basic collision primitive of a triangle.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnValue = "float",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnValue = "Vec3",
					string Arguments = "(Vec3 worldPoint)",
					Array ParsedArguments = 
					[
						{
							string Type = "Vec3",
							string Name = "worldPoint",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "Material",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
					string Type = "PhysicsMaterial",
				},
				{
					string Name = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
					string Type = "CollisionGroup",
				},
				{
					string Name = "Ghost",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
					string Type = "bool",
				},
				{
					string Name = "SendsEvents",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
					string Type = "bool",
				},
				{
					string Name = "Offset",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
					string Type = "Vec3",
				},
				{
					string Name = "ActiveBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
					string Type = "RigidBody",
				},
				{
					string Name = "ContactCount",
					string Description = "Returns the number of contacts on this collider.",
					string Type = "uint",
				},
				{
					string Name = "Contacts",
					string Description = "Range of all contacts on this collider.",
					string Type = "ContactRange",
				},
				{
					string Name = "JointCount",
					string Description = "Returns the number of joints attached to this collider.",
					string Type = "uint",
				},
				{
					string Name = "Joints",
					string Description = "Range of all joints on this collider.",
					string Type = "JointRange",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "CollisionStarted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionEnded",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "CollisionPersisted",
					string EventType = "CollisionEvent",
				},
				{
					string EventName = "GroupCollisionStarted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPersisted",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionEnded",
					string EventType = "CollisionGroupEvent",
				},
				{
					string EventName = "GroupCollisionPreSolve",
					string EventType = "PreSolveEvent",
				},
			],
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
		},
		{
			string Name = "Region",
			string BaseClass = "Component",
			string Description = "Regions are used to logically turn collision volumes(a collider) into trigger volume or a region for physics effects. Any effects attached to a cog with a Region will be applied to whatever is in contact with this region.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "DispatchEvent",
					string Description = "Dispatches an event to all objects in the region.",
					string ReturnValue = "void",
					string Arguments = "(String eventId, Event toSend)",
					Array ParsedArguments = 
					[
						{
							string Type = "String",
							string Name = "eventId",
						},
						{
							string Type = "Event",
							string Name = "toSend",
						},
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "WakeUpOnEffectChange",
					string Description = "Determines if all objects in the region should be woken up when an effect is changed. Used to make sure that changes in effects will be applied to an object regardless of if it is asleep.",
					string Type = "bool",
				},
			],
			Array EventsSent = 
			[
			],
			Array Tags = 
			[
				"Physics",
				"Component",
			],
		},
		{
			string Name = "AnimationGraph",
			string BaseClass = "Component",
			string Description = "The AnimationGraph component controls animation for an individual game object. It stores all needed per instance(vs what is shared in the animation resource) manages the current time and enumerates the animation sets. The AnimationGraph can animate multiple child objects and properties enabling bone animation, and other hierarchical animations.",
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "IsPlayingInGraph",
					string Description = "",
					string ReturnValue = "bool",
					string Arguments = "(Animation animation)",
					Array ParsedArguments = 
					[
						{
							string Type = "Animation",
							string Name = "animation",
						},
					],
				},
				{
					string Name = "PrintGraph",
					string Description = "",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "CreateBasicNode",
					string Description = "Node creation functions.",
					string ReturnValue = "BasicAnimation",
					string Arguments = "(Animation animation, AnimPlayMode::Enum mode)",
					Array ParsedArguments = 
					[
						{
							string Type = "Animation",
							string Name = "animation",
						},
						{
							string Type = "AnimPlayMode::Enum",
							string Name = "mode",
						},
					],
				},
				{
					string Name = "CreateDirectBlendNode",
					string Description = "",
					string ReturnValue = "DirectBlend",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "CreateCrossBlendNode",
					string Description = "",
					string ReturnValue = "CrossBlend",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "CreateSelectiveNode",
					string Description = "",
					string ReturnValue = "SelectiveNode",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "CreateChainNode",
					string Description = "",
					string ReturnValue = "ChainNode",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
				{
					string Name = "PreviewGraph",
					string Description = "Editor preview functionality.",
					string ReturnValue = "void",
					string Arguments = "()",
					Array ParsedArguments = 
					[
					],
				},
			],
			Array Properties = 
			[
				{
					string Name = "Owner",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
					string Type = "Cog",
				},
				{
					string Name = "Space",
					string Description = "The Space where the object is located.",
					string Type = "Space",
				},
				{
					string Name = "LevelSettings",
					string Description = "Get the object named'LevelSettings', a special object where we can put components for our level.",
					string Type = "Cog",
				},
				{
					string Name = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string Type = "GameSession",
				},
				{
					string Name = "ActiveNode",
					string Description = "",
					string Type = "AnimationNode",
				},
				{
					string Name = "Active",
					string Description = "Is the animGraph animating?",
					string Type = "bool",
				},
				{
					string Name = "TimeScale",
					string Description = "",
					string Type = "float",
				},
			],
			Array EventsSent = 
			[
				{
					string EventName = "AnimationEnded",
					string EventType = "AnimationGraphEvent",
				},
			],
			Array Tags = 
			[
				"Component",
				"Core",
			],
		},
	],
},
