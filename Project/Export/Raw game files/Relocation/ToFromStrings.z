class ToFromStrings : ZilchComponent
{
    // Int array to/from strings:
    [Static]
    function IntArrayToString(array : Array[Integer]) : String
    {
        var stringBuilder = new StringBuilder();
        
        for (var slot = 0; slot < array.Count; ++slot)
        {
            stringBuilder.Write("`array[slot]`");
            
            if (slot < array.Count - 1)
                stringBuilder.Write(",");
        }
        
        return stringBuilder.ToString();
    }
    
    [Static]
    function StringToIntArray(string : String) : Array[Integer]
    {
        var array = Array[Integer]();
        
        while (string.Count > 0)
        {
            var currentComma = string.FindFirstOf(",");
            
            if (currentComma.IsNotEmpty)
            {
                array.Add(Integer.Parse(string.SubStringFromRuneIndices(0, currentComma.Begin.ByteIndex)));
                string = string.SubStringFromRuneIndices(currentComma.End.ByteIndex, string.End.ByteIndex);
            }
            else
            {
                array.Add(Integer.Parse(string));
                
                break;
            }
        }
        
        return array;
    }
    
    // Real3 to/from string
    [Static]
    function Real3ToString(r3 : Real3) : String
    {
        return "`r3.X`,`r3.Y`,`r3.Z`";
    }
    
    [Static]
    function StringToReal3(string : String) : Real3
    {
        var r3 = Real3(0.0, 0.0, 0.0);
        var timesRun = 0;
        
        while (string.Count > 0)
        {
            var currentComma = string.FindFirstOf(",");
            
            if (currentComma.IsNotEmpty)
            {
                if (timesRun == 0) r3.X = Real.Parse(string.SubStringFromRuneIndices(0, currentComma.Begin.ByteIndex));
                else if (timesRun == 1) r3.Y = Real.Parse(string.SubStringFromRuneIndices(0, currentComma.Begin.ByteIndex));
                string = string.SubStringFromRuneIndices(currentComma.End.ByteIndex, string.End.ByteIndex);
            }
            else
            {
                r3.Z = Real.Parse(string.SubStringFromRuneIndices(0, currentComma.Begin.ByteIndex));
                
                break;
            }
            
            ++timesRun;
        }
        
        return r3;
    }
}
