// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

/* HANDLES WORLD GENERATION. AUTOMATICALLY LOADS/UNLOADS CHUNKS THAT ARE IN RANGE. */
class WorldGenerator : ZilchComponent {
    
    [Property] var Width : Integer = 32;
    [Property] var Height : Integer = 32;
    [Property] var NumberOfSteps : Integer = 2;
    
    var HasGenerated : Boolean = false;
    
    var MaxPossibleID : Integer = 8;
    
    var DeathLimit : Integer = 3;
    var BirthLimit : Integer = 4;
    
    var SpawnChance : Real = 45.0;
    
    var WorldMap : HashMap[Real2, Integer] = null;
    
    function Initialize(init : CogInitializer) {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        if(this.HasGenerated) {
            
            if(this.Owner.FindChildByName("ChunkWrapper") == null) {
                var wrapper = this.Space.CreateAtPosition(Archetype.ChunkWrapper, this.Owner.Transform.WorldTranslation);
                wrapper.AttachToRelative(this.Owner);
            }
            
            if(this.Space.FindObjectByName(Relocation.EntityPlayer) != null) {
                
                var playerPos = this.Space.FindObjectByName(Relocation.EntityPlayer).Transform.WorldTranslation;
                var chunkPos = this.Owner.Transform.WorldTranslation;
                
                if(Math.Sqrt(
                    Math.Pow(chunkPos.X - playerPos.X, 2) + 
                    Math.Pow(chunkPos.Y - playerPos.Y, 2)
                ) > this.Width) {
                    
                    this.UnloadMap();
                    
                } else if(this.Owner.FindChildByName("ChunkWrapper").FindChildByName("BlockRock") == null) {
                    this.GenerateMap(false);
                }
                
            }
            
        } else if(!this.HasGenerated) {
            
            if(this.Space.FindObjectByName(Relocation.EntityPlayer) != null) {
                
                var playerPos = this.Space.FindObjectByName(Relocation.EntityPlayer).Transform.WorldTranslation;
                var chunkPos = this.Owner.Transform.WorldTranslation;
                
                if(Math.Sqrt(
                    Math.Pow(chunkPos.X - playerPos.X, 2) + 
                    Math.Pow(chunkPos.Y - playerPos.Y, 2)
                ) <= this.Width) {
                    
                    this.CreateMap();
                    this.GenerateMap(true);
                    this.HasGenerated = true;
                    
                }
                
            }
            
        }
        
    }
    
    function CreateMap() {
        
        this.WorldMap = new HashMap[Real2, Integer]();
        
        var rand = Random();
        
        for(var x = 0; x < this.Width; ++x) {
            for(var y = 0; y < this.Height; ++y) {
                if(rand.Range(0.0, 100.0) < this.SpawnChance) {
                    this.WorldMap.Set(Real2(x, y), this.GenerateID());
                } else {
                    this.WorldMap.Set(Real2(x, y), 0);
                }
            }
        }
        
    }
    
    function GenerateMap(firstLoad : Boolean) {
        
        if(firstLoad) {
            for(var i = 0; i < this.NumberOfSteps; ++i) {
                this.DoSimulationStep();
            }
        }
        
        for(var x = 0; x < this.Width; ++x) {
            for(var y = 0; y < this.Height; ++y) {
                
                var arch : Archetype = null;
                
                if(this.WorldMap.Get(Real2(x, y)) == 1) {
                    arch = Archetype.BlockRock;
                } else if(this.WorldMap.Get(Real2(x, y)) == 2) {
                    arch = Archetype.BlockRock;
                } else if(this.WorldMap.Get(Real2(x, y)) == 3) {
                    arch = Archetype.BlockRockCopper;
                } else if(this.WorldMap.Get(Real2(x, y)) == 4) {
                    arch = Archetype.BlockRockIron;
                } else if(
                    this.WorldMap.Get(Real2(x, y)) == 5 || 
                    this.WorldMap.Get(Real2(x, y)) == 6 || 
                    this.WorldMap.Get(Real2(x, y)) == 7
                ) {
                    arch = Archetype.BlockRockRare;
                } else if(this.WorldMap.Get(Real2(x, y)) != 0) {
                    arch = Archetype.BlockRockIron;
                }
                
                if(arch != null) {
                    var obj = this.Space.CreateAtPosition(arch, Real3(x - this.Width / 2, y - this.Width / 2, 0.0) + Real3(this.Owner.Transform.WorldTranslation.XY, 0.0));
                    obj.AttachToRelative(this.Owner.FindChildByName("ChunkWrapper"));
                }
                
            }
        }
        
    }
    
    function UnloadMap() {
        if(this.Owner.FindChildByName("ChunkWrapper") != null)
            this.Owner.FindChildByName("ChunkWrapper").Destroy();
    }
    
    function DoSimulationStep() {
        
        var newMap = new HashMap[Real2, Integer]();
        
        for(var x = 0; x < this.Width; ++x) {
            for(var y = 0; y < this.Height; ++y) {
                
                var nbs = this.CountValidNeighbours(Real2(x, y));
                var rand = Random();
                
                if(this.WorldMap.Get(Real2(x, y)) != 0) {
                    
                    if(nbs < this.DeathLimit) {
                        newMap.Set(Real2(x, y), 0);
                    } else {
                        newMap.Set(Real2(x, y), this.GenerateID());
                    }
                    
                } else {
                    
                    if(nbs > this.BirthLimit) {
                        newMap.Set(Real2(x, y), this.GenerateID());
                    } else {
                        newMap.Set(Real2(x, y), 0);
                    }
                    
                }
                
            }
        }
        
        this.WorldMap = newMap;
        
    }
    
    function CountValidNeighbours(coord : Real2) : Integer {
        
        var count = 0;
        
        for(var i = -1; i < 2; ++i) {
            for(var j = -1; j < 2; ++j) {
                
                var neighbourX = coord.X + i;
                var neighbourY = coord.Y + j;
                
                if(i == 0 && j == 0) {
                    // DO NOTHING
                } else if(neighbourX < 0 || neighbourY < 0 || neighbourX >= this.Width || neighbourY >= this.Height) {
                    ++count;
                } else if(this.WorldMap.Get(Real2(neighbourX, neighbourY)) != 0) {
                    ++count;
                }
                
            }
        }
        
        return count;
        
    }
    
    function GenerateID() : Integer {
        
        var rand = Random();
        var randRangeID = rand.Range(1.0, 10.81);
        
        if(randRangeID >= 1.0 && randRangeID <= 5.0) {
            return 1;
        } else if(randRangeID >= 6.0 && randRangeID <= 8.0) {
            return 2;
        } else if(randRangeID >= 9.0 && randRangeID <= 10.0) {
            return 3;
        } else if(randRangeID > 10.0 && randRangeID <= 10.5) {
            return 4;
        } else if(randRangeID > 10.5 && randRangeID <= 10.75) {
            return 5;
        } else if(randRangeID > 10.75 && randRangeID <= 10.8) {
            return 6;
        } else if(randRangeID > 10.8 && randRangeID <= 10.81) {
            return 7;
        } else {
            return 1;
        }
        
    }
    
    function RemoveBlock(coords : Real2, dropItem : Boolean) {
        
        var chunkCoords = Real2(coords.X + this.Width / 2, coords.Y + this.Width / 2);
        var blockID = this.WorldMap.GetOrError(chunkCoords);
        
        if(dropItem) {
            
            Console.WriteLine("Block ID: `this.WorldMap.GetOrError(chunkCoords)`");
            
            var player = this.Space.FindObjectByName(Relocation.EntityPlayer);
            var itemName = "";
            
            if(player != null) {
                
                if(blockID == 1 || blockID == 2) {
                    itemName = "ItemRock";
                } else if(blockID == 3) {
                    itemName = "ItemCopperOre";
                } else if(blockID == 4) {
                    itemName = "ItemIronOre";
                } else if(blockID == 5) {
                    itemName = "ItemGoldOre";
                } else if(blockID == 6) {
                    itemName = "ItemTitaniumOre";
                } else if(blockID == 7) {
                    itemName = "ItemPlatinumOre";
                }
                
                if(itemName != "") {
                    player.Inventory.GiveItemWithAmount(Relocation.ItemManager.GetIDByName(itemName), false, 1);
                    Relocation.NotificationManager.GiveNotification(
                        "Picked up `Relocation.Items[Relocation.ItemManager.GetIDByName(itemName)].ItemRecognizableName`", 
                        2.5,
                        "`Relocation.Items[Relocation.ItemManager.GetIDByName(itemName)].ItemRecognizableName`",
                        "`Relocation.Items[Relocation.ItemManager.GetIDByName(itemName)].ItemLore`",
                        Relocation.Items[Relocation.ItemManager.GetIDByName(itemName)].ItemColor,
                        Relocation.Items[Relocation.ItemManager.GetIDByName(itemName)].ItemLoreColor
                    );
                }
                
            }
            
        }
        
        this.WorldMap.Set(chunkCoords, 0);
        
    }
    
}
