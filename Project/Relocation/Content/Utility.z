// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

/**
EDITOR BUTTON EXAMPLE:

[Editable] var Foo : EditorButton {
    get {
        return EditorButton.Run;
    } set {
        this.Foo();
    }
}

**/

enum EditorButtonRun {
    Run
}

enum EditorButtonReset {
    Reset
}

enum EditorButtonExecute {
    Execute
}

class Utility {
    
    // KEYBOARD SHORTCUTS
    [Static] var Shortcut_SelectAll : Array[Keys] = Array[Keys]() { Keys.Control, Keys.A };
    [Static] var Shortcut_Cut : Array[Keys] = Array[Keys]() { Keys.Control, Keys.X };
    [Static] var Shortcut_Copy : Array[Keys] = Array[Keys]() { Keys.Control, Keys.C };
    [Static] var Shortcut_Paste : Array[Keys] = Array[Keys]() { Keys.Control, Keys.V };
    
    [Static] var Shortcut_Undo : Array[Keys] = Array[Keys]() { Keys.Control, Keys.Z };
    [Static] var Shortcut_Redo : Array[Keys] = Array[Keys]() { Keys.Control, Keys.Y };
    
    // ALT KEYOBARD SHORTCUTS
    [Static] var ShortcutAlt_Cut : Array[Keys] = Array[Keys]() { Keys.Shift, Keys.Delete };
    
    [Static] var ShortcutAlt_Redo : Array[Keys] = Array[Keys]() { Keys.Control, Keys.Shift, Keys.Z };
    
}

class TextHelper {
    
    [Static] function IsRenderable(code : Integer) : Boolean {
        return code >= " "[0] && code <= "~"[0];
    }
    
    [Static] function GetWordIndices(str : String, index : Integer) : Integer2 {
        
        var indeces = Integer2(0);
        
        for(var i = index; i < str.Count; ++i) {
            
            if(TextHelper.IsConsideredSpacerChar(String.FromChar(str[i]))) {
                
            }
            
        }
        
        return indeces;
        
    }
    
    [Static] function IsConsideredSpacerChar(char : String) : Boolean {
        
        if(
            char == " " ||
            char == "," ||
            char == "." ||
            char == "[" ||
            char == "]" ||
            char == "{" ||
            char == "}" ||
            char == "/" ||
            char == "\\"
        ) {
            return true;
        }
        
        return false;
        
    }
    
}
