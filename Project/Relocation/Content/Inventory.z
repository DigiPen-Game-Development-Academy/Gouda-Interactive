// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class Inventory : ZilchComponent {
    
    var UISpace : Space = null;
    
    var InventoryOpen : Boolean = false;
    var InventoryContents : Array[Integer];
    var InventoryContentsCount : Array[Integer];
    var MaxInventorySlots : Integer = 21;
    var SlotClicked : Integer = -1;
    
    var SLOT_HAND : Integer = 19;
    var SLOT_OFFHAND : Integer = 20;
    var SLOT_MOUSE : Integer = 21;
    
    function Initialize(init : CogInitializer) {
        
        this.UISpace = this.LevelSettings.UICreator.UISpace;
        this.UISpace.LevelSettings.MainLevelReferances.Player = this.Owner;
        
        this.InventoryContents = new Array[Integer]();
        this.InventoryContentsCount = new Array[Integer]();
        
        // ZERO OUT INVENTORY
        for(var i = 0; i < this.MaxInventorySlots; ++i) {
            this.InventoryContents.Push(0);
            this.InventoryContentsCount.Push(0);
        }
        
        this.GiveItemInSlot(1, this.SLOT_HAND);
        
        Console.WriteLine("Inventory Contents: `this.InventoryContents`");
        
        Zero.Connect(this.UISpace, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OpenCloseInventory);
        
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        var inventory = this.UISpace.FindObjectByName("Inventory");
        
        // CHECK IF INVENTORY IS OPEN
        if(this.InventoryOpen) {
            this.RefreshInventoryIcons();
            this.MouseSlot();
            inventory.Transform.WorldTranslation = Real3(0, 0, 1);
        } else {
            inventory.Transform.WorldTranslation = Real3(0, 0, 50000);
        }
        
    }
    
    function OpenCloseInventory(event : KeyboardEvent) {
        
        if(event.Key == Keys.E && !this.UISpace.FindObjectByName("TextEntry").TextEntry.CaptureKeys) {
            this.ToggleInventory();
        }
        
        if(event.Key == Keys.Escape && !this.UISpace.FindObjectByName("TextEntry").TextEntry.CaptureKeys && this.InventoryOpen) {
            this.Space.TimeSpace.Paused = false;
            this.InventoryOpen = false;
        }
        
    }
    
    function ToggleInventory() {
        
        // TOGGLE INVENTORY AND TIMESPACE PAUSE
        this.Space.TimeSpace.Paused = !this.Space.TimeSpace.Paused;
        this.InventoryOpen = !this.InventoryOpen;
        
        Console.WriteLine("Inventory: `this.InventoryOpen`");
        
    }
    
    function RefreshInventoryIcons() {
        
        for(var i = 0; i < this.MaxInventorySlots; ++i) {
            
            if(this.InventoryContentsCount[i] == 0) {
                this.InventoryContents[i] = 0;
            } else if(this.InventoryContents[i] == 0 && this.InventoryContentsCount[i] > 0) {
                this.InventoryContentsCount[i] = 0;
            }
            
            var slotObj = this.UISpace.FindObjectByName("Slot`i + 1`");
            var itemMgmt = this.Space.FindObjectByName("LevelSettings").ItemManager;
            
            slotObj.FindChildByName("SlotIcon").Sprite.SpriteSource = itemMgmt.Items[this.InventoryContents[i]].Sprite;
            slotObj.FindChildByName("ItemCount").SpriteText.Text = "`this.InventoryContentsCount[i]`";
            
            if(slotObj.FindChildByName("SlotIcon").Sprite.SpriteSource == SpriteSource.Circle) {
                slotObj.FindChildByName("SlotIcon").Sprite.Visible = false;
                slotObj.FindChildByName("ItemCount").SpriteText.Visible = false;
            } else {
                slotObj.FindChildByName("SlotIcon").Sprite.Visible = true;
                slotObj.FindChildByName("ItemCount").SpriteText.Visible = true;
            }
            
        }
        
    }
    
    function MouseSlot() {
        
        var mousePos = this.UISpace.FindObjectByName("LevelSettings").CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0.0);
        this.UISpace.FindObjectByName("Slot21").Transform.WorldTranslation = mousePos;
        
        if(this.SlotClicked != -1 && this.SlotClicked != 21) {
            
            if(this.InventoryContents[20] == 0 && !Zero.Keyboard.KeyIsDown(Keys.Shift)) {
                this.MoveItem(this.SlotClicked, 21);
            } else if(!Zero.Keyboard.KeyIsDown(Keys.Shift)) {
                this.MoveItem(21, this.SlotClicked);
            }
            
            if(this.InventoryContents[20] == 0 && Zero.Keyboard.KeyIsDown(Keys.Shift)) {
                this.MoveItem(this.SlotClicked, 19);
                this.MoveItem(this.SlotClicked, 20);
            }
            
            this.SlotClicked = -1;
            
        }
        
        //Console.WriteLine("Slot: `this.SlotClicked`");
        
    }
    
    function GiveItem(itemID : Integer) {
        
        var firstAvailableSlot = -1;
        
        for(var i = 0; i < this.MaxInventorySlots - 1; ++i) {
            
            if(this.InventoryContents[i] == 0 && firstAvailableSlot == -1) {
                firstAvailableSlot = i;
            } else if(this.InventoryContents[i] == itemID) {
                ++this.InventoryContentsCount[i];
                this.RefreshInventoryIcons();
                return;
            }
            
        }
        
        if(firstAvailableSlot != -1) {
            this.InventoryContents[firstAvailableSlot] = itemID;
            this.InventoryContentsCount[firstAvailableSlot] = 1;
            this.RefreshInventoryIcons();
            return;
        }
        
        Console.WriteLine("Warning: Inventory full. Item with ID \"`itemID`\" was not added to the inventory.");
        
    }
    
    function GiveItemInSlot(itemID : Integer, slot : Integer) {
        
        if(slot - 1 < this.MaxInventorySlots - 1) {
            
            if(this.InventoryContents[slot - 1] == 0) {
                this.InventoryContents[slot - 1] = itemID;
                this.InventoryContentsCount[slot - 1] = 1;
                this.RefreshInventoryIcons();
                return;
            } else if(this.InventoryContents[slot - 1] == itemID) {
                ++this.InventoryContentsCount[slot - 1];
                this.RefreshInventoryIcons();
                return;
            }
            
        }
        
    }
    
    function CheckForItem(itemID : Integer) : Boolean {
        
        for(var i = 0; i < this.MaxInventorySlots; ++i) {
            
            if(this.InventoryContents[i] == itemID) {
                return true;
            }
            
        }
        
        return false;
        
    }
    
    function CheckForItemMainHand(itemID : Integer) : Boolean {
            
        if(this.InventoryContents[18] == itemID) {
            return true;
        } else {
            return false;
        }
        
    }
    
    function MoveItem(slot : Integer, destSlot : Integer) {
        
        //Console.WriteLine("mvItem: `slot`");
        
        if(slot - 1 < this.MaxInventorySlots && destSlot - 1 < this.MaxInventorySlots) {
            
            var tmpItem = this.InventoryContents[slot - 1];
            var tmpItemCt = this.InventoryContentsCount[slot - 1];
            
            if(this.InventoryContents[slot - 1] == 0) {
                return;
            } else if(this.InventoryContents[destSlot - 1] != 0 && this.InventoryContents[destSlot - 1] != tmpItem) {
                return;
            } else {
                
                this.InventoryContents[slot - 1] = 0;
                this.InventoryContentsCount[slot - 1] = 0;
                
                if(this.InventoryContents[destSlot - 1] == tmpItem) {
                    this.InventoryContentsCount[destSlot - 1] += tmpItemCt;
                } else {
                    this.InventoryContents[destSlot - 1] = tmpItem;
                    this.InventoryContentsCount[destSlot - 1] = tmpItemCt;
                }
                
            }
            
            this.RefreshInventoryIcons();
            
        }
        
    }
    
}
