// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class Inventory : ZilchComponent {
    
    var UISpace : Space = null;
    
    var InventoryOpen : Boolean = false;
    var RightButtonDown : Boolean = false;
    
    var InventoryContents : Array[Integer];
    var InventoryContentsCount : Array[Integer];
    
    var MaxInventorySlots : Integer = 21;
    var SlotClicked : Integer = -1;
    var SlotHover : Integer = -1;
    
    var SLOT_HAND : Integer = 19;
    var SLOT_OFFHAND : Integer = 20;
    var SLOT_MOUSE : Integer = 21;
    var TooltipName : String = "";
    
    function Initialize(init : CogInitializer) {
        
        this.UISpace = this.LevelSettings.UICreator.UISpace;
        this.UISpace.LevelSettings.MainLevelReferances.Player = this.Owner;
        
        this.InventoryContents = new Array[Integer]();
        this.InventoryContentsCount = new Array[Integer]();
        
        // ZERO OUT INVENTORY
        for(var i = 0; i < this.MaxInventorySlots; ++i) {
            this.InventoryContents.Push(0);
            this.InventoryContentsCount.Push(0);
        }
        
        this.GiveItemInSlot(1, this.SLOT_HAND);
        
        Console.WriteLine("Inventory Contents: `this.InventoryContents`");
        
        Zero.Connect(this.UISpace, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OpenCloseInventory);
        
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        var inventory = this.UISpace.FindObjectByName("Inventory");
        
        // CHECK IF INVENTORY IS OPEN
        if(this.InventoryOpen) {
            this.RefreshInventoryIcons();
            this.MouseSlot();
            inventory.Transform.WorldTranslation = Real3(0, 0, 1);
        } else {
            
            if(this.InventoryContents[20] != 0) {
                var tmpItem = this.InventoryContents[20];
                var tmpItemCt = this.InventoryContentsCount[20];
                this.InventoryContents[20] = 0;
                for(var i = 0; i < tmpItemCt; ++i) {
                    this.GiveItem(tmpItem, false);
                }
            }
            
            inventory.Transform.WorldTranslation = Real3(0, 0, 50000);
            
        }
        
    }
    
    function OpenCloseInventory(event : KeyboardEvent) {
        
        if(event.Key == Keys.E && !this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry.CaptureKeys) {
            this.ToggleInventory();
        }
        
        if(event.Key == Keys.Escape && !this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry.CaptureKeys && this.InventoryOpen) {
            this.Space.TimeSpace.Paused = false;
            this.InventoryOpen = false;
        }
        
    }
    
    function ToggleInventory() {
        
        // TOGGLE INVENTORY AND TIMESPACE PAUSE
        this.Space.TimeSpace.Paused = !this.Space.TimeSpace.Paused;
        this.InventoryOpen = !this.InventoryOpen;
        
        Console.WriteLine("Inventory: `this.InventoryOpen`");
        
    }
    
    function RefreshInventoryIcons() {
        
        for(var i = 0; i < this.MaxInventorySlots; ++i) {
            
            if(this.InventoryContentsCount[i] == 0) {
                this.InventoryContents[i] = 0;
            } else if(this.InventoryContents[i] == 0 && this.InventoryContentsCount[i] > 0) {
                this.InventoryContentsCount[i] = 0;
            }
            
            var slotObj = this.UISpace.FindObjectByName("Slot`i + 1`");
            var itemMgmt = this.Space.FindObjectByName("LevelSettings").ItemManager;
            
            slotObj.FindChildByName("SlotIcon").Sprite.SpriteSource = itemMgmt.Items[this.InventoryContents[i]].Sprite;
            slotObj.FindChildByName("ItemCount").SpriteText.Text = "`this.InventoryContentsCount[i]`";
            slotObj.FindChildByName("ItemName").SpriteText.Text = itemMgmt.Items[this.InventoryContents[i]].ItemRecognizableName;
            //slotObj.FindChildByName("ItemName").SpriteText.Color = Real4(1.0, 1.0, 1.0, 1.0);
            
            if(slotObj.FindChildByName("SlotIcon").Sprite.SpriteSource == SpriteSource.Circle) {
                slotObj.FindChildByName("SlotIcon").Sprite.Visible = false;
                slotObj.FindChildByName("ItemCount").SpriteText.Visible = false;
            } else {
                
                slotObj.FindChildByName("SlotIcon").Sprite.Visible = true;
                slotObj.FindChildByName("ItemCount").SpriteText.Visible = true;
                
                /*if(itemMgmt.Items[this.InventoryContents[i]].ItemType == "Weapon") {
                    slotObj.FindChildByName("ItemName").SpriteText.Color = Real4(0.0, 0.0, 1.0, 1.0);
                }*/
                
            }
            
            if(i == 18 || i == 19) {
                
                slotObj = this.UISpace.FindObjectByName("Slot`i + 1`H");
                slotObj.FindChildByName("SlotIcon").Sprite.SpriteSource = itemMgmt.Items[this.InventoryContents[i]].Sprite;
                slotObj.FindChildByName("ItemCount").SpriteText.Text = "`this.InventoryContentsCount[i]`";
                
                if(slotObj.FindChildByName("SlotIcon").Sprite.SpriteSource == SpriteSource.Circle) {
                    slotObj.FindChildByName("SlotIcon").Sprite.Visible = false;
                    slotObj.FindChildByName("ItemCount").SpriteText.Visible = false;
                } else {
                    slotObj.FindChildByName("SlotIcon").Sprite.Visible = true;
                    slotObj.FindChildByName("ItemCount").SpriteText.Visible = true;
                }
                
            }
            
        }
        
    }
    
    function MouseSlot() {
        
        var mousePos = this.UISpace.FindObjectByName("LevelSettings").CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 2.0);
        this.UISpace.FindObjectByName("Slot21").Transform.WorldTranslation = mousePos;
        
        if(this.SlotClicked != -1 && this.SlotClicked != 21 && Zero.Mouse.IsButtonDown(MouseButtons.Left)) {
            
            if(this.InventoryContents[20] == 0 && !Zero.Keyboard.KeyIsDown(Keys.Shift)) {
                this.MoveItem(this.SlotClicked, 21);
            } else if(!Zero.Keyboard.KeyIsDown(Keys.Shift)) {
                this.MoveItem(21, this.SlotClicked);
            }
            
            if(this.InventoryContents[20] == 0 && Zero.Keyboard.KeyIsDown(Keys.Shift)) {
                this.MoveItem(this.SlotClicked, 19);
                this.MoveItem(this.SlotClicked, 20);
            }
            
            this.SlotClicked = -1;
            
        } else if(this.SlotClicked != -1 && this.SlotClicked != 21 && Zero.Mouse.IsButtonDown(MouseButtons.Right) && !Zero.Keyboard.KeyIsDown(Keys.Shift)) {
            
            this.RightButtonDown = true;
            
            var itemInSlot = this.InventoryContents[this.SlotClicked - 1];
            
            if(this.InventoryContents[20] == 0) {
                
                var itemCt = this.InventoryContentsCount[this.SlotClicked - 1];
                var itemCtFirstHalf = Math.Ceil(itemCt / 2.0) as Integer;
                var itemCtSecondHalf = itemCt - itemCtFirstHalf + itemCt % 2;
                
                this.RemoveItemsInSlot(this.SlotClicked, false, itemCtFirstHalf);
                this.GiveItemsInSlot(itemInSlot, this.SLOT_MOUSE, itemCtSecondHalf, true);
                
            } else if(this.InventoryContents[20] != 0 && (this.InventoryContents[this.SlotClicked - 1] == 0 || this.InventoryContents[this.SlotClicked - 1] == this.InventoryContents[20])) {
                 
                this.GiveItemInSlot(this.InventoryContents[20], this.SlotClicked);
                this.RemoveItemInSlot(this.SLOT_MOUSE, false);
                
            }
            
            this.SlotClicked = -1;
            
        } else if(this.InventoryContents[20] != 0 && this.SlotClicked == -1 && Zero.Mouse.IsButtonDown(MouseButtons.Right) && !this.RightButtonDown) {
            this.RightButtonDown = true;
            this.RemoveItemInSlot(this.SLOT_MOUSE, true);
        } else if(this.InventoryContents[20] != 0 && this.SlotClicked == -1 && Zero.Mouse.IsButtonDown(MouseButtons.Right) && Zero.Keyboard.KeyIsDown(Keys.Shift)) {
            this.RightButtonDown = false;
            this.RemoveItemInSlot(this.SLOT_MOUSE, true);
        } else if(!Zero.Mouse.IsButtonDown(MouseButtons.Right) && !Zero.Keyboard.KeyIsDown(Keys.Shift)) {
            this.RightButtonDown = false;
        }
        
        if(this.InventoryContents[20] == 0 && this.SlotHover != -1 && this.SlotHover != this.SLOT_MOUSE) {
            
            this.TooltipName = this.Space.FindObjectByName("LevelSettings").ItemManager.Items[this.InventoryContents[this.SlotHover - 1]].ItemRecognizableName;
            
            if(this.TooltipName != "") {
                var itemMgmt = this.Space.FindObjectByName("LevelSettings").ItemManager;
                var itemTooltip = this.UISpace.FindObjectByName("Slot21").FindChildByName("ItemName");
                itemTooltip.SpriteText.Text = this.TooltipName;
                itemTooltip.SpriteText.Color = Real4(1.0);
                if(itemMgmt.Items[this.InventoryContents[this.SlotHover - 1]].ItemType == "Weapon") {
                    itemTooltip.SpriteText.Color = Real4(0.0, 0.0, 1.0, 1.0);
                }
                this.UISpace.FindObjectByName("Slot21").FindChildByName("ItemName").SpriteText.Visible = true;
            }
            
            this.SlotHover = -1;
            
        } else {
            
            this.TooltipName = "";
            this.UISpace.FindObjectByName("Slot21").FindChildByName("ItemName").SpriteText.Visible = false;
            
            this.SlotHover = -1;
            
        }
        
        //Console.WriteLine("Slot: `this.SlotClicked`");
        
    }
    
    function GiveItem(itemID : Integer, notifyUser : Boolean) {
        
        var firstAvailableSlot = -1;
        
        var cmd : TextEntry = null;
        
        itemID = Math.Abs(itemID);
        
        if(notifyUser) {
            cmd = this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry;
        }
        
        if(itemID < this.Space.FindObjectByName("LevelSettings").ItemManager.Items.Count) {
            for(var i = 0; i < this.MaxInventorySlots - 1; ++i) {
                
                if(this.InventoryContents[i] == 0 && firstAvailableSlot == -1) {
                    firstAvailableSlot = i;
                } else if(this.InventoryContents[i] == itemID) {
                    ++this.InventoryContentsCount[i];
                    this.RefreshInventoryIcons();
                    if(notifyUser)
                        cmd.PrintToUIConsole("Item with the ID \"`itemID`\" has been added to your inventory.");
                    return;
                }
                
            }
            
            if(firstAvailableSlot != -1) {
                this.InventoryContents[firstAvailableSlot] = itemID;
                this.InventoryContentsCount[firstAvailableSlot] = 1;
                this.RefreshInventoryIcons();
                if(notifyUser)
                    cmd.PrintToUIConsole("Item with the ID \"`itemID`\" has been added to your inventory.");
                return;
            }
        } else {
            this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry.PrintToUIConsole("Error: An item with the ID \"`itemID`\" does not exist.");
            return;
        }
        
        Console.WriteLine("Warning: Inventory full. Item with the ID \"`itemID`\" was not added to the inventory.");
        
    }
    
    function GiveItemWithAmount(itemID : Integer, notifyUser : Boolean, amount : Integer) {
        
        var firstAvailableSlot = -1;
        
        var cmd : TextEntry = null;
        
        itemID = Math.Abs(itemID);
        
        if(notifyUser) {
            cmd = this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry;
        }
        
        if(itemID < this.Space.FindObjectByName("LevelSettings").ItemManager.Items.Count) {
            for(var i = 0; i < this.MaxInventorySlots - 1; ++i) {
                
                if(this.InventoryContents[i] == 0 && firstAvailableSlot == -1) {
                    firstAvailableSlot = i;
                } else if(this.InventoryContents[i] == itemID) {
                    this.InventoryContentsCount[i] += amount;
                    this.RefreshInventoryIcons();
                    if(notifyUser)
                        cmd.PrintToUIConsole("Item with the ID \"`itemID`\" has been added to your inventory.");
                    return;
                }
                
            }
            
            if(firstAvailableSlot != -1) {
                this.InventoryContents[firstAvailableSlot] = itemID;
                this.InventoryContentsCount[firstAvailableSlot] = amount;
                this.RefreshInventoryIcons();
                if(notifyUser)
                    cmd.PrintToUIConsole("Item with the ID \"`itemID`\" has been added to your inventory.");
                return;
            }
        } else {
            this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry.PrintToUIConsole("Error: An item with the ID \"`itemID`\" does not exist.");
            return;
        }
        
        Console.WriteLine("Warning: Inventory full. Item with the ID \"`itemID`\" was not added to the inventory.");
        
    }
    
    function GiveItemInSlot(itemID : Integer, slot : Integer) {
        
        itemID = Math.Abs(itemID);
        
        if(itemID < this.Space.FindObjectByName("LevelSettings").ItemManager.Items.Count) {
            if(slot - 1 < this.MaxInventorySlots - 1) {
                
                if(this.InventoryContents[slot - 1] == 0) {
                    this.InventoryContents[slot - 1] = itemID;
                    this.InventoryContentsCount[slot - 1] = 1;
                    this.RefreshInventoryIcons();
                    return;
                } else if(this.InventoryContents[slot - 1] == itemID) {
                    ++this.InventoryContentsCount[slot - 1];
                    this.RefreshInventoryIcons();
                    return;
                }
                
            }
        } else {
            this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry.PrintToUIConsole("Error: An item with the ID \"`itemID`\" does not exist.");
            return;
        }
        
    }
    
    function GiveItemsInSlot(itemID : Integer, slot : Integer, amount : Integer, allowInMouseSlot : Boolean) {
        
        itemID = Math.Abs(itemID);
        
        if(itemID < this.Space.FindObjectByName("LevelSettings").ItemManager.Items.Count) {
            if(slot - 1 < this.MaxInventorySlots - 1) {
                
                if(this.InventoryContents[slot - 1] == 0) {
                    this.InventoryContents[slot - 1] = itemID;
                    this.InventoryContentsCount[slot - 1] = amount;
                    this.RefreshInventoryIcons();
                    return;
                } else if(this.InventoryContents[slot - 1] == itemID) {
                    this.InventoryContentsCount[slot - 1] += amount;
                    this.RefreshInventoryIcons();
                    return;
                }
                
            } else if(slot == this.SLOT_MOUSE && allowInMouseSlot) {
                
                if(this.InventoryContents[slot - 1] == 0) {
                    this.InventoryContents[slot - 1] = itemID;
                    this.InventoryContentsCount[slot - 1] = amount;
                    this.RefreshInventoryIcons();
                    return;
                } else if(this.InventoryContents[slot - 1] == itemID) {
                    this.InventoryContentsCount[slot - 1] += amount;
                    this.RefreshInventoryIcons();
                    return;
                }
                
            }
        } else {
            this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry.PrintToUIConsole("Error: An item with the ID \"`itemID`\" does not exist.");
            return;
        }
        
    }
    
    function CheckForItem(itemID : Integer) : Boolean {
        
        itemID = Math.Abs(itemID);
        
        for(var i = 0; i < this.MaxInventorySlots; ++i) {
            
            if(this.InventoryContents[i] == itemID) {
                return true;
            }
            
        }
        
        return false;
        
    }
    
    function CheckForItemMainHand(itemID : Integer) : Boolean {
        
        itemID = Math.Abs(itemID);
            
        if(this.InventoryContents[18] == itemID) {
            return true;
        } else {
            return false;
        }
        
    }
    
    function MoveItem(slot : Integer, destSlot : Integer) {
        
        //Console.WriteLine("mvItem: `slot`");
        
        if(slot - 1 < this.MaxInventorySlots && destSlot - 1 < this.MaxInventorySlots) {
            
            var tmpItem = this.InventoryContents[slot - 1];
            var tmpItemCt = this.InventoryContentsCount[slot - 1];
            
            if(this.InventoryContents[slot - 1] == 0) {
                return;
            } else if(this.InventoryContents[destSlot - 1] != 0 && this.InventoryContents[destSlot - 1] != tmpItem) {
                this.InventoryContents[slot - 1] = this.InventoryContents[destSlot - 1];
                this.InventoryContentsCount[slot - 1] = this.InventoryContentsCount[destSlot - 1];
                this.InventoryContents[destSlot - 1] = tmpItem;
                this.InventoryContentsCount[destSlot - 1] = tmpItemCt;
                return;
            } else {
                
                this.InventoryContents[slot - 1] = 0;
                this.InventoryContentsCount[slot - 1] = 0;
                
                if(this.InventoryContents[destSlot - 1] == tmpItem) {
                    this.InventoryContentsCount[destSlot - 1] += tmpItemCt;
                } else {
                    this.InventoryContents[destSlot - 1] = tmpItem;
                    this.InventoryContentsCount[destSlot - 1] = tmpItemCt;
                }
                
            }
            
            this.RefreshInventoryIcons();
            
        }
        
    }
    
    function RemoveItem(itemID : Integer) {
        
        itemID = Math.Abs(itemID);
        
        if(itemID < this.Space.FindObjectByName("LevelSettings").ItemManager.Items.Count) {
            for(var i = 0; i < this.MaxInventorySlots - 1; ++i) {
                
                if(this.InventoryContents[i] == itemID) {
                    --this.InventoryContentsCount[i];
                    this.RefreshInventoryIcons();
                    return;
                }
                
            }
        } else {
            this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry.PrintToUIConsole("Error: An item with the ID \"`itemID`\" does not exist.");
            return;
        }
        
    }
    
    function RemoveItemInSlot(slot : Integer, drop : Boolean) {
        
        var itemID = -1;
        
        if(this.InventoryContents[slot - 1] != 0 && this.InventoryContentsCount[slot - 1] > 0) {
            itemID = this.InventoryContents[slot - 1];
            --this.InventoryContentsCount[slot - 1];
            this.RefreshInventoryIcons();
        }
        
        if(drop && itemID != -1) {
            Console.WriteLine("Implement drops. In the meantime, the item that was dropped will be deleted.");
        }
        
    }
    
    function RemoveItemsInSlot(slot : Integer, drop : Boolean, amount : Integer) {
        
        var itemID = -1;
        
        if(this.InventoryContents[slot - 1] != 0 && this.InventoryContentsCount[slot - 1] > 0) {
            itemID = this.InventoryContents[slot - 1];
            this.InventoryContentsCount[slot - 1] -= amount;
            this.RefreshInventoryIcons();
        }
        
        if(drop && itemID != -1) {
            Console.WriteLine("Implement drops. In the meantime, the item that was dropped will be deleted.");
        }
        
    }
    
}
