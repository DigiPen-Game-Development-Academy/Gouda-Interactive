// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

enum DoorState { Locked, Unlocked }
enum DoorPermissions { Any, None, PlayerOnly, EnemyOnly }
enum DoorDirection { North, South, East, West }

class Door : ZilchComponent {
    
    [Property] var DoorState : DoorState = DoorState.Unlocked;
    [Property] var DoorDir : DoorDirection = DoorDirection.North;
    [Property] var DoorPerms : DoorPermissions = DoorPermissions.Any;
    [Property] var OneWayDoor : Boolean = false;
    [Property] var DebugMode : Boolean = false;
    [Property] var EndOfAnimationFrame : Integer = 7;
    
    function Initialize(init : CogInitializer) {
        
        this.Owner.FindChildByName("Door").BoxCollider.Ghost = this.DoorState == DoorState.Unlocked;
        
        /*if(this.DoorDir == DoorDirection.East || this.DoorDir == DoorDirection.West)
            this.Owner.FindChildByName("Door").Sprite.SpriteSource = SpriteSource.DoorVertical;
        else
            this.Owner.FindChildByName("Door").Sprite.SpriteSource = SpriteSource.DoorHorizontal;*/
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        if(this.Owner.FindChildByName("Door").Sprite.CurrentFrame == this.EndOfAnimationFrame)
            this.Owner.FindChildByName("Door").Sprite.AnimationActive = false;
        
    }
    
    function OnCollisionPersisted(event : CollisionEvent) {
        this.DoorPassthroughLogic(event);
    }
    
    function OnCollisionEnded(event : CollisionEvent) {
        
        if(this.GetEntityPerm(event.OtherObject.Name) == this.DoorPerms) {
            this.LockDoor();
        }
        
    }
    
    function DoorPassthroughLogic(event : CollisionEvent) {
        
        if(
            this.DoorState == DoorState.Unlocked &&
            event.OtherObject.Name.Contains("Entity")
        ) {
            
            var entityPerm = this.GetEntityPerm(event.OtherObject.Name);
            
            if((this.DoorPerms != DoorPermissions.None && this.DoorPerms == entityPerm) || this.DoorPerms == DoorPermissions.Any)
                this.UnlockDoor();
            else
                this.LockDoor();
            
        }
        
    }
    
    function UnlockDoor() {
        this.DoorState = DoorState.Unlocked;
        
        this.Owner.FindChildByName("Door").Sprite.AnimationSpeed = 1.0;
        this.Owner.FindChildByName("Door").Sprite.AnimationActive = true;
        
        this.Owner.FindChildByName("Door").BoxCollider.Ghost = false;
    }
    
    function LockDoor() {
        this.DoorState = DoorState.Locked;
        
        this.Owner.FindChildByName("Door").Sprite.AnimationSpeed = -1.0;
        this.Owner.FindChildByName("Door").Sprite.AnimationActive = true;
        
        this.Owner.FindChildByName("Door").BoxCollider.Ghost = true;
    }
    
    function GetEntityPerm(objName : String) : DoorPermissions {
        
        if(objName == "EntityPlayer")
            return DoorPermissions.PlayerOnly;
        else if(objName == "EntityEnemy")
            return DoorPermissions.EnemyOnly;
        else
            return DoorPermissions.Any;
        
    }
    
}
