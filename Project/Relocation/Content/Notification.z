// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class Notification : ZilchComponent {
    
    [Property] var MaxNotificationCount : Integer = 5;
    
    var NotificationCount : Integer = 0;
    
    var NotificationCog : Array[Cog] = null;
    
    function Initialize(init : CogInitializer) {
        
        this.NotificationCog = new Array[Cog]();
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        if(Zero.Keyboard.KeyIsPressed(Keys.L))
            this.GiveNotification("Picked up item.Null.name", 0.5);
        
        this.DisplayNotification();
        
    }
    
    function DisplayNotification() {
        
        var pos = this.Owner.Transform.WorldTranslation;
        
        var notificationIndex = 0;
        
        foreach(var notification in this.NotificationCog) {
            if(notification != null) {
                notification.Transform.WorldTranslation = Math.Lerp(notification.Transform.WorldTranslation, Real3(pos.X, pos.Y + notificationIndex * 0.75, 0), 0.06);
                ++notificationIndex;
            }
        }
        
    }
    
    function GiveNotification(text : String, displayTimeout : Real) {
        
        if(this.NotificationCog != null) {
            
            var pos = this.Owner.Transform.WorldTranslation;
            
            var notification = this.Space.CreateAtPosition(Archetype.NotificationText, Real3(pos.X, pos.Y + this.NotificationCount * 0.75, pos.Z));
            notification.AttachToRelative(this.Owner);
            notification.SpriteText.Text = "`text.Replace("\n", " ")`";
            
            this.NotificationCog.Add(notification);
            
            ++this.NotificationCount;
            
        }
        
    }
    
    function RemoveNotification() {
        --this.NotificationCount;
    }
    
}
