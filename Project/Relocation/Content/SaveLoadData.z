// AUTHOR: MYLES BUSIG
// CONTRIBUTORS: N/A

class SaveLoadData : ZilchComponent
{
    var Data : Cog = null;
    
    function Initialize(init : CogInitializer)
    {
        this.Data = Zero.ObjectStore.RestoreOrArchetype("Data", Archetype.SavedData, this.Space);
        
        Console.WriteLine("Data: `this.Data`");
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        if (Zero.Keyboard.KeyIsPressed(Keys.Zero))
            this.Save();
        if (Zero.Keyboard.KeyIsPressed(Keys.Nine))
            this.Load();
    }
    
    function Save()
    {
        var player = this.Space.FindObjectByName("EntityPlayer");
        
        // Player Data
        this.Data.SavedData.PlayerName = player.PlayerProperties.PlayerName;
        this.Data.SavedData.PlayerPosition = ToFromStrings.Real3ToString(player.Transform.Translation);
        this.Data.SavedData.PlayerHealth = player.Health.CurrentHealth;
        this.Data.SavedData.PlayerSkin = player.PlayerProperties.PlayerSkin;
        this.Data.SavedData.PlayerBalance = player.PlayerProperties.Balance;
        this.Data.SavedData.PlayerInv = ToFromStrings.IntArrayToString(PlayerData.InventoryContents);
        this.Data.SavedData.PlayerInvCount = ToFromStrings.IntArrayToString(PlayerData.InventoryContentsCount);
        
        // World Data:
        this.Data.SavedData.CurrentWorld = this.Space.CurrentLevel.Name;
        
        // Settings Data:
        this.Data.SavedData.MenuAnimations = GameSetting.EnableUIAnimations;
        this.Data.SavedData.Vignette = GameSetting.EnableVignette;
        this.Data.SavedData.PlayerTooltips = GameSetting.PlayerTooltip;
        this.Data.SavedData.EnemyTooltips = GameSetting.EnemyTooltip;
        this.Data.SavedData.MasterVolume = GameSetting.MasterVolume;
        this.Data.SavedData.MusicVolume = GameSetting.MusicVolume;
        this.Data.SavedData.SFXVolume = GameSetting.SoundEffectsVolume;
        
        Zero.ObjectStore.Store("Data", this.Data);
        
        Console.WriteLine("`this.LevelSettings.PlaceChunks.ChunkMap`");
        
        var chunkNumToSave = 0;
        
        foreach (var chunk in this.LevelSettings.PlaceChunks.ChunkMap)
        {
            if (chunk.WorldGenerator.WorldMap != null)
            {
                chunk.WorldGenerator.WorldMapString = ToFromStrings.HashMapInt2IntToString(chunk.WorldGenerator.WorldMap);
                chunk.WorldGenerator.WorldMapDataString = ToFromStrings.HashMapInt2Real2ToString(chunk.WorldGenerator.WorldMapData);
                chunk.WorldGenerator.ChunkPositionString = ToFromStrings.Real3ToString(chunk.Transform.Translation);
                Zero.ObjectStore.Store("Chunk`chunkNumToSave`", this.LevelSettings.PlaceChunks.ChunkMap[chunkNumToSave]);
                ++chunkNumToSave;
                
                //Console.WriteLine("Chunk WorldMap: `chunk.WorldGenerator.WorldMapString`");
                //Console.WriteLine("Chunk WorldMapData: `chunk.WorldGenerator.WorldMapDataString`");
            }
        }
        
        var hashMap1 = HashMap[Integer2, Integer]();
        
        hashMap1.Add(Integer2(0, 0), 1);
        hashMap1.Add(Integer2(1, 0), 2);
        hashMap1.Add(Integer2(0, 1), 3);
        
        var string1 = "0,0,1,0,1,2,1,0,3";
        
        Console.WriteLine("Hashmap 1 as string 1: `ToFromStrings.HashMapInt2IntToString(hashMap1)`");
        Console.WriteLine("String 1 As HashMap 1: `ToFromStrings.StringToHashMapInt2Int(string1)`");
        
        var hashMap2 = HashMap[Integer2, Real2]();
        
        hashMap2.Add(Integer2(0, 0), Real2(1.0, 2.0));
        hashMap2.Add(Integer2(1, 0), Real2(3.0, 4.0));
        hashMap2.Add(Integer2(0, 1), Real2(5.0, 6.0));
        
        var string2 = "0,0,1,2,1,0,3,4,0,1,5,6";
        
        Console.WriteLine("Hashmap 2 as string: `ToFromStrings.HashMapInt2Real2ToString(hashMap2)`");
        Console.WriteLine("String as Hashmap 2: `ToFromStrings.StringToHashMapInt2Real2(string2)`");
        
        Console.WriteLine("Saved");
    }
    
    function Load()
    {
        LoadDataIntoLevel.Space = this.Space;
        
        // Load Player Data:
        LoadDataIntoLevel.PlayerName = this.Data.SavedData.PlayerName;
        LoadDataIntoLevel.PlayerPosition = this.Data.SavedData.PlayerPosition;
        LoadDataIntoLevel.PlayerHealth = this.Data.SavedData.PlayerHealth;
        LoadDataIntoLevel.PlayerSkin = this.Data.SavedData.PlayerSkin;
        LoadDataIntoLevel.PlayerBalance = this.Data.SavedData.PlayerBalance;
        LoadDataIntoLevel.PlayerInv = this.Data.SavedData.PlayerInv;
        LoadDataIntoLevel.PlayerInvCount = this.Data.SavedData.PlayerInvCount;
        
        // Load World Data:
        LoadDataIntoLevel.CurrentWorld = this.Space.CurrentLevel.Name;
        
        // Load Settings Data:
        LoadDataIntoLevel.MenuAnimations = this.Data.SavedData.MenuAnimations;
        LoadDataIntoLevel.Vignette = this.Data.SavedData.Vignette;
        LoadDataIntoLevel.PlayerTooltips = this.Data.SavedData.PlayerTooltips;
        LoadDataIntoLevel.EnemyTooltips = this.Data.SavedData.EnemyTooltips;
        LoadDataIntoLevel.MasterVolume = this.Data.SavedData.MasterVolume;
        LoadDataIntoLevel.MusicVolume = this.Data.SavedData.MusicVolume;
        LoadDataIntoLevel.SFXVolume = this.Data.SavedData.SFXVolume;
        
        LoadDataIntoLevel.LoadData();
        
        foreach (var chunk in this.Space.FindAllObjectsByName("Chunk"))
            chunk.Destroy();
        
        this.LevelSettings.PlaceChunks.ChunkMap.Clear();
        
        var chunkNumToLoad = 0;
        
        while (Zero.ObjectStore.IsStored("Chunk`chunkNumToLoad`") == true)
        {
            this.LevelSettings.PlaceChunks.ChunkMap.Add(Zero.ObjectStore.Restore("Chunk`chunkNumToLoad`", this.Space));
            var chunk = this.LevelSettings.PlaceChunks.ChunkMap[this.LevelSettings.PlaceChunks.ChunkMap.Count - 1];
            
            Console.WriteLine("worldmap: `chunk.WorldGenerator.WorldMap`");
            
            //chunk.WorldGenerator.HasGenerated = true;
            //chunk.Transform.Translation = ToFromStrings.StringToReal3(chunk.WorldGenerator.ChunkPositionString);
            chunk.WorldGenerator.WorldMap = ToFromStrings.StringToHashMapInt2Int(chunk.WorldGenerator.WorldMapString);
            chunk.WorldGenerator.WorldMapData = ToFromStrings.StringToHashMapInt2Real2(chunk.WorldGenerator.WorldMapDataString);
            
            ++chunkNumToLoad;
            
            Console.WriteLine("Chunk Translation: `chunk.Transform.Translation`");
        }
        
        Console.WriteLine("Loaded");
    }
    
    function Delete()
    {
    }
}
