// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class Recipe {
    
    var Recipe : Array[Integer] = null;
    
    constructor(recipe : Array[Integer]) {
        this.Recipe = recipe;
    }
    
}

class Crafting : ZilchComponent {
    
    var ItemAir         : Array[Integer] = null;
    var ItemCopper      : Array[Integer] = null;
    var ItemIron        : Array[Integer] = null;
    var ItemGold        : Array[Integer] = null;
    var ItemTitanium    : Array[Integer] = null;
    var ItemPlatinum    : Array[Integer] = null;
    
    var ItemAmmoPistol  : Array[Integer] = null;
    var ItemAmmoShotgun : Array[Integer] = null;
    var ItemAmmoMinigun : Array[Integer] = null;
    var ItemAmmoAssault : Array[Integer] = null;
    var ItemAmmoSniper  : Array[Integer] = null;
    
    var CraftingRecipes : Array[Recipe] = null;
    var CraftableItems : Array[Integer] = null;
    
    var SlotClicked : Integer = -1;
    
    var SlotHover : Integer = -1;
    
    var ScrollPosition : Integer = 0;
    var MaxScroll : Integer = 1;
    
    var MaxItemsInRecipe : Integer = 3;
    var MaxCraftingSlots : Integer = 6;
     
    function Initialize(init : CogInitializer) {
        
        this.CraftingRecipes = new Array[Recipe]();
        this.CraftableItems = new Array[Integer]();
        
        // CREATE RECIPE
        this.ItemAir = this.CreateRecipe(
            0, 0, 0,
            0, 0, 0,
            0
        );
        this.ItemCopper = this.CreateRecipe(
            15, 0, 0,
            1, 0, 0,
            16
        );
        this.ItemIron = this.CreateRecipe(
            17, 0, 0,
            1, 0, 0,
            18
        );
        this.ItemGold = this.CreateRecipe(
            19, 0, 0,
            1, 0, 0,
            20
        );
        this.ItemTitanium = this.CreateRecipe(
            21, 0, 0,
            1, 0, 0,
            22
        );
        this.ItemPlatinum = this.CreateRecipe(
            23, 0, 0,
            1, 0, 0,
            24
        );
        this.ItemAmmoPistol = this.CreateRecipe(
            18, 20, 0,
            3, 1, 0,
            9
        );
        this.ItemAmmoShotgun = this.CreateRecipe(
            18, 20, 0,
            3, 1, 0,
            10
        );
        this.ItemAmmoMinigun = this.CreateRecipe(
            18, 20, 0,
            3, 1, 0,
            11
        );
        this.ItemAmmoAssault = this.CreateRecipe(
            18, 20, 0,
            3, 1, 0,
            12
        );
        this.ItemAmmoSniper = this.CreateRecipe(
            18, 20, 0,
            3, 1, 0,
            13
        );
        
        this.CraftingRecipes.Push(new Recipe(this.ItemCopper));
        this.CraftingRecipes.Push(new Recipe(this.ItemIron));
        this.CraftingRecipes.Push(new Recipe(this.ItemGold));
        this.CraftingRecipes.Push(new Recipe(this.ItemTitanium));
        this.CraftingRecipes.Push(new Recipe(this.ItemPlatinum));
        this.CraftingRecipes.Push(new Recipe(this.ItemAir));
        
        this.CraftingRecipes.Push(new Recipe(this.ItemAmmoPistol));
        this.CraftingRecipes.Push(new Recipe(this.ItemAmmoShotgun));
        this.CraftingRecipes.Push(new Recipe(this.ItemAmmoMinigun));
        this.CraftingRecipes.Push(new Recipe(this.ItemAmmoAssault));
        this.CraftingRecipes.Push(new Recipe(this.ItemAmmoSniper));
        this.CraftingRecipes.Push(new Recipe(this.ItemAir));
        
        // ADD CRAFTABLE ITEMS TO LIST
        this.CraftableItems.Push(16);
        this.CraftableItems.Push(18);
        this.CraftableItems.Push(20);
        this.CraftableItems.Push(22);
        this.CraftableItems.Push(24);
        this.CraftableItems.Push(0);
        
        this.CraftableItems.Push(9);
        this.CraftableItems.Push(10);
        this.CraftableItems.Push(11);
        this.CraftableItems.Push(12);
        this.CraftableItems.Push(13);
        this.CraftableItems.Push(0);
        
        this.ShowItemsInCraftingMenu(this.CraftableItems, this.ScrollPosition);
        this.ShowCraftingRequirements(this.CraftingRecipes, this.ScrollPosition, 6);
        
        Zero.Connect(Relocation.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        /*if(Zero.Keyboard.KeyIsPressed(Keys.One)) {
            this.UseRecipe(this.CraftingRecipes, 0, false);
        }*/
        
        if(this.SlotClicked != -1) {
            this.UseRecipe(this.CraftingRecipes, this.SlotClicked  + (this.MaxCraftingSlots * this.ScrollPosition), false);
            this.SlotClicked = -1;
        }
        
        if(this.SlotHover != -1) {
            this.ShowCraftingRequirements(this.CraftingRecipes, this.ScrollPosition, this.SlotHover + (this.MaxCraftingSlots * this.ScrollPosition));
            this.SlotHover = -1;
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.Two)) {
            Console.WriteLine("Inv: `this.Owner.Inventory.InventoryContents`");
            Console.WriteLine("Cnt: `this.Owner.Inventory.InventoryContentsCount`");
        }
        
    }
    
    function OnPausedLogicUpdate(event : UpdateEvent) {
        if(this.SlotClicked != -1) {
            this.UseRecipe(this.CraftingRecipes, this.SlotClicked + (this.MaxCraftingSlots * this.ScrollPosition), false);
        }
        
        if(this.SlotHover != -1) {
            this.ShowCraftingRequirements(this.CraftingRecipes, this.ScrollPosition, this.SlotHover + (this.MaxCraftingSlots * this.ScrollPosition));
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.Two)) {
            Console.WriteLine("Inv: `this.Owner.Inventory.InventoryContents`");
            Console.WriteLine("Cnt: `this.Owner.Inventory.InventoryContentsCount`");
        }
    }
    
    function PausedLogicUpdateEnd() {
        this.SlotClicked = -1;
        this.SlotHover = -1;
    }
    
    function RefreshIcons(i : Integer) {
        
        if(Relocation.UISpace.FindObjectByName("CraftingItem`i + 1`") != null) {
            var slotObj = Relocation.UISpace.FindObjectByName("CraftingItem`i + 1`");
            
            if(this.CraftingRecipes != null && this.Owner.Inventory.TooltipName != null) {
                slotObj.FindChildByName("ItemName").SpriteText.Text = Relocation.Items[this.CraftingRecipes[i].Recipe[6]].ItemRecognizableName;
                this.Owner.Inventory.TooltipName = Relocation.Items[this.CraftingRecipes[i].Recipe[6]].ItemRecognizableName;
            } else if(this.Owner.Inventory.TooltipName == slotObj.FindChildByName("ItemName").SpriteText.Text) {
                this.Owner.Inventory.TooltipName = "Air";
            }
            slotObj.FindChildByName("ItemCount").SpriteText.Text = "1";
        }
        
    }
    
    function GetTooltipName() : String {
        
        if(this.SlotHover != -1) {
            return Relocation.Items[this.CraftingRecipes[this.SlotHover - 1 + (this.MaxCraftingSlots * this.ScrollPosition)].Recipe[6]].ItemRecognizableName;
        } else {
            return "State.False";
        }
    }
    
    function ShowItemsInCraftingMenu(items : Array[Integer], scrollPosition : Integer) {
        
        for(var i = 0; i < this.MaxCraftingSlots; ++i) {
            
            if(Relocation.Items[items[i + (this.MaxCraftingSlots * scrollPosition)]].Sprite != SpriteSource.Circle) {
                Relocation.UISpace.FindObjectByName("CraftingItem`i + 1`").FindChildByName("SlotIcon").Sprite.Visible = true;
                Relocation.UISpace.FindObjectByName("CraftingItem`i + 1`").FindChildByName("SlotIcon").Sprite.SpriteSource = Relocation.Items[items[i + (this.MaxCraftingSlots * scrollPosition)]].Sprite;
            } else {
                Relocation.UISpace.FindObjectByName("CraftingItem`i + 1`").FindChildByName("SlotIcon").Sprite.Visible = false;
            }
            
        }
        
    }
    
    function ShowCraftingRequirements(recipe : Array[Recipe], scrollPosition : Integer, craftingID : Integer) {
        
        for(var i = 0; i < 3; ++i) {
            
            var craftingRIcon = Relocation.UISpace.FindObjectByName("CraftingItemRequirements`i + 1`").FindChildByName("SlotIcon");
            var craftingRCt = Relocation.UISpace.FindObjectByName("CraftingItemRequirements`i + 1`").FindChildByName("ItemCount");
            
            if(Relocation.Items[recipe[craftingID - 1].Recipe[i]].Sprite != SpriteSource.Circle) {
                craftingRIcon.Sprite.Visible = true;
                craftingRCt.SpriteText.Visible = true;
                craftingRIcon.Sprite.SpriteSource = Relocation.Items[recipe[craftingID - 1].Recipe[i]].Sprite;
                craftingRCt.SpriteText.Text = "`recipe[craftingID - 1].Recipe[i + this.MaxItemsInRecipe]`";
            } else {
                craftingRIcon.Sprite.Visible = false;
                craftingRCt.SpriteText.Visible = false;
            }
            
        }
        
    }
    
    function CreateRecipe(id1 : Integer, id2 : Integer, id3 : Integer, amt1 : Integer, amt2 : Integer, amt3 : Integer, item : Integer) : Array[Integer] {
        
        var array = new Array[Integer]();
        
        array.Push(id1);
        array.Push(id2);
        array.Push(id3);
        
        array.Push(amt1);
        array.Push(amt2);
        array.Push(amt3);
        
        array.Push(item);
        
        return array;
        
    }
    
    function CheckForResources(recipe : Array[Recipe], recipeID : Integer) : Boolean {
        
        for(var i = 0; i < this.MaxItemsInRecipe; ++i) {
            if(this.Owner.Inventory.CheckForItems(recipe[recipeID - 1].Recipe[i], recipe[recipeID - 1].Recipe[i + this.MaxItemsInRecipe])) {
                continue;
            } else {
                return false;
            }
        }
        
        return true;
        
    }
    
    function UseRecipe(recipe : Array[Recipe], recipeID : Integer, useAllItems : Boolean) {
        
        var canCraft = false;
        
        if(this.CheckForResources(recipe, recipeID)) {
            canCraft = true;
        } else {
            Console.WriteLine("You do not have enough resources to craft this item.");
            return;
        }
        
        Console.WriteLine("canCraft = `canCraft`");
        
        for(var i = 0; i < this.MaxItemsInRecipe - 1; ++i) {
            this.Owner.Inventory.RemoveItems(recipe[recipeID - 1].Recipe[i], recipe[recipeID - 1].Recipe[i + this.MaxItemsInRecipe]);
        }
        
        this.Owner.Inventory.GiveItem(recipe[recipeID - 1].Recipe[this.MaxItemsInRecipe * 2], false);
        
    }
    
    function SetScrollPosition(pos : Integer) {
        this.ScrollPosition = pos;
        this.ShowItemsInCraftingMenu(this.CraftableItems, this.ScrollPosition);
        this.ShowCraftingRequirements(this.CraftingRecipes, this.ScrollPosition, 6);
    }
    
}
