// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class DayCycle : ZilchComponent {
    
    [Property] var RenderDayNightCycle : Boolean = true;
    
    var LightMultiplier : Real = 1.0;
    
    function Initialize(init : CogInitializer) {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        Relocation.Time += event.Dt;
        
        if(Relocation.UISpace != null) {
            Relocation.UISpace.FindObjectByName("Time").SpriteText.Text = 
                "Day:`Relocation.Day`\nTime:`this.TimeToString()`";
        }
        
        if(Relocation.Time > Relocation.DayLength) {
            Relocation.Time = 0.0;
            ++Relocation.Day;
        }
        
        // RENDER DAY/NIGHT CYCLE
        if(this.Owner.AmbientLight != null) {
            if(Relocation.Time < Relocation.DayLength * 0.25 || Relocation.Time > Relocation.DayLength * 0.75) {
                
                if(Relocation.Time > Relocation.DayLength * 0.125 && Relocation.Time < Relocation.DayLength * 0.75) {
                    Relocation.LightAmount = Relocation.Time / 24;
                    if(this.RenderDayNightCycle)
                        this.Owner.AmbientLight.Color = Real4(Real3(Relocation.LightAmount), 1.0);
                } else if(Relocation.Time > Relocation.DayLength * 0.625 && Relocation.LightAmount > 0.5) {
                    Relocation.LightAmount = (Relocation.DayLength - Relocation.Time) / 24;
                    if(this.RenderDayNightCycle)
                        this.Owner.AmbientLight.Color = Real4(Real3(Relocation.LightAmount), 1.0);
                } else if(Relocation.Time < Relocation.DayLength * 0.25 || Relocation.Time > Relocation.DayLength * 0.75) {
                    Relocation.LightAmount = 0.5;
                    if(this.RenderDayNightCycle)
                        this.Owner.AmbientLight.Color = Real4(Real3(0.5), 1.0);
                }
                
            } else {
                if(this.RenderDayNightCycle)
                    this.Owner.AmbientLight.Color = Real4(1.0, 1.0, 1.0, 1.0);
            }
        }
        
    }
    
    function SetTime(time : Real) {
        
        time /= 250;
        
        if(time > Relocation.DayLength) {
            Relocation.Day += (time / Relocation.DayLength) as Integer;
            time = time % Relocation.DayLength;
        }
        
        Relocation.Time = time;
        
    }
    
    function AddTime(time : Real) {
        time /= 250;
        this.SetTime((Relocation.Time + time) * 250);
    }
    
    function TimeToString() : String {
        var hours = Math.Floor(Relocation.Time / 4.0);
        var minutes = Relocation.Time / 4.0 - hours;
        var minutesString = "`Math.Floor(minutes * 60)`0";
        
        if(minutes >= 0.1) {
            return "`Math.Floor(Relocation.Time / 4.0)`:`minutesString.SubStringFromRuneIndices(0, 2)`";
        } else {
            return "`Math.Floor(Relocation.Time / 4.0)`:0`minutesString.SubStringFromRuneIndices(0, 1)`";
        }
    }
    
}
