// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

/* PLACES CHUNKS - DOES NOT ACTUALLY GENERATE THE CHUNK CONTENTS */
class PlaceChunks : ZilchComponent {
    
    [Property] var ChunkWidth : Integer = 32;
    [Property] var ZIndex : Real = 0.0;
    
    var ChunkMap : Array[Cog] = null;
    
    function Initialize(init : CogInitializer) {
        
        this.ChunkMap = new Array[Cog]();
        
        if(!this.CheckForChunkAtPosition(Real3(0)))
            this.ChunkMap.Add(this.Space.CreateAtPosition(Archetype.Chunk, Real3(0)));
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        var playerPos = Relocation.Space.FindObjectByName(Relocation.EntityPlayer).Transform.WorldTranslation;
        
        if(Math.Round(playerPos.X) % this.ChunkWidth == 0 || Math.Round(playerPos.Y) % this.ChunkWidth == 0) {
            this.LoadChunkNorthWest(playerPos);
            this.LoadChunkNorth(playerPos);
            this.LoadChunkNorthEast(playerPos);
            this.LoadChunkEast(playerPos);
            this.LoadChunkSouthWest(playerPos);
            this.LoadChunkSouth(playerPos);
            this.LoadChunkSouthEast(playerPos);
            this.LoadChunkWest(playerPos);
        }
        
    }
    
    function LoadChunkNorth(pos : Real3) {
        if(!this.CheckForChunkAtPosition(this.SnapToGrid(pos, this.ChunkWidth) + Real3(0.0, this.ChunkWidth, 0.0)))
            this.ChunkMap.Add(
                this.Space.CreateAtPosition(Archetype.Chunk, this.SnapToGrid(pos, this.ChunkWidth) + Real3(0.0, this.ChunkWidth, 0.0))
            );
    }
    
    function LoadChunkSouth(pos : Real3) {
        if(!this.CheckForChunkAtPosition(this.SnapToGrid(pos, this.ChunkWidth) + Real3(0.0, -this.ChunkWidth, 0.0)))
            this.ChunkMap.Add(
                this.Space.CreateAtPosition(Archetype.Chunk, this.SnapToGrid(pos, this.ChunkWidth) + Real3(0.0, -this.ChunkWidth, 0.0))
            );
    }
    
    function LoadChunkEast(pos : Real3) {
        if(!this.CheckForChunkAtPosition(this.SnapToGrid(pos, this.ChunkWidth) + Real3(this.ChunkWidth, 0.0, 0.0)))
            this.ChunkMap.Add(
                this.Space.CreateAtPosition(Archetype.Chunk, this.SnapToGrid(pos, this.ChunkWidth) + Real3(this.ChunkWidth, 0.0, 0.0))
            );
    }
    
    function LoadChunkWest(pos : Real3) {
        if(!this.CheckForChunkAtPosition(this.SnapToGrid(pos, this.ChunkWidth) + Real3(-this.ChunkWidth, 0.0, 0.0)))
            this.ChunkMap.Add(
                this.Space.CreateAtPosition(Archetype.Chunk, this.SnapToGrid(pos, this.ChunkWidth) + Real3(-this.ChunkWidth, 0.0, 0.0))
            );
    }
    
    function LoadChunkNorthWest(pos : Real3) {
        if(!this.CheckForChunkAtPosition(this.SnapToGrid(pos, this.ChunkWidth) + Real3(-this.ChunkWidth, this.ChunkWidth, 0.0)))
            this.ChunkMap.Add(
                this.Space.CreateAtPosition(Archetype.Chunk, this.SnapToGrid(pos, this.ChunkWidth) + Real3(-this.ChunkWidth, this.ChunkWidth, 0.0))
            );
    }
    
    function LoadChunkNorthEast(pos : Real3) {
        if(!this.CheckForChunkAtPosition(this.SnapToGrid(pos, this.ChunkWidth) + Real3(this.ChunkWidth, this.ChunkWidth, 0.0)))
            this.ChunkMap.Add(
                this.Space.CreateAtPosition(Archetype.Chunk, this.SnapToGrid(pos, this.ChunkWidth) + Real3(this.ChunkWidth, this.ChunkWidth, 0.0))
            );
    }
    
    function LoadChunkSouthWest(pos : Real3) {
        if(!this.CheckForChunkAtPosition(this.SnapToGrid(pos, this.ChunkWidth) + Real3(-this.ChunkWidth, -this.ChunkWidth, 0.0)))
            this.ChunkMap.Add(
                this.Space.CreateAtPosition(Archetype.Chunk, this.SnapToGrid(pos, this.ChunkWidth) + Real3(-this.ChunkWidth, -this.ChunkWidth, 0.0))
            );
    }
    
    function LoadChunkSouthEast(pos : Real3) {
        if(!this.CheckForChunkAtPosition(this.SnapToGrid(pos, this.ChunkWidth) + Real3(-this.ChunkWidth, this.ChunkWidth, 0.0)))
            this.ChunkMap.Add(
                this.Space.CreateAtPosition(Archetype.Chunk, this.SnapToGrid(pos, this.ChunkWidth) + Real3(-this.ChunkWidth, this.ChunkWidth, 0.0))
            );
    }
    
    function SnapToGrid(pos : Real3, gridWidth : Real) : Real3 {
        
        var x = Math.Floor(pos.X / gridWidth) * gridWidth;
        var y = Math.Floor(pos.Y / gridWidth) * gridWidth;
        
        return Real3(x, y, this.ZIndex);
        
    }
    
    function CheckForChunkAtPosition(position : Real3) : Boolean {
        
        foreach(var chunk in this.ChunkMap)
            if(chunk.Transform.WorldTranslation.XY == position.XY) return true;
        
        return false;
        
    }
    
}
