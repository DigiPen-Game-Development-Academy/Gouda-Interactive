// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: NONE

class TextEntry : ZilchComponent {
    
    [Property] var IsCommandTextBox : Boolean = false;
    [Property] var ConsoleTextboxName : String = "Console";
    
    var CaptureKeys : Boolean = false;
    var DebugEnabled : Boolean = false;
    var CycleThroughCommands : Boolean = false;
    var CycleThroughCmdsAll : Boolean = false;
    
    var CommandString : String = "";
    var FinalCmd : String = "";
    var ConsoleLog : String = "";
    var TempCommandStr : String = "";
    
    var CommandHistory : Array[String];
    var Commands : Array[String];
    var CommandsAll : Array[String];
    
    var CmdHistoryIndex : Integer = 0;
    var AutocompleteIndex : Integer = 0;
    
    function Initialize(init : CogInitializer) {
        
        this.CommandHistory = new Array[String]();
        
        this.Owner.Commands.CreateCommands();
        
        Zero.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(Zero.Keyboard, Events.TextTyped, this.OnTextTyped);
        
    }

    function OnGameRequestQuit(event : GameEvent) {
        event.Handled = true;
    }

    function OnLogicUpdate(event : UpdateEvent) {
        
        if(this.CaptureKeys) {
            
            if(Zero.Keyboard.KeyIsPressed(Keys.Escape)) {
                
                this.CommandString = "";
                this.TempCommandStr = "";
                
                this.CaptureKeys = false;
                this.CycleThroughCommands = false;
                this.CycleThroughCmdsAll = false;
                
                this.CmdHistoryIndex = this.CommandHistory.Count;
                this.AutocompleteIndex = 0;
                
            } else if(Zero.Keyboard.KeyIsPressed(Keys.Enter)) {
                
                this.FinalCmd = this.CommandString;
                
                this.CycleThroughCommands = false;
                this.CycleThroughCmdsAll = false;
                
                if(this.CommandString != "") {
                    this.CmdHistoryIndex = this.CommandHistory.Count + 1;
                    this.CommandHistory.Push(this.CommandString);
                }
                
                this.CommandString = "";
                this.TempCommandStr = "";
                
            } else if(Zero.Keyboard.KeyIsPressed(Keys.Up)) {
                
                if(this.CommandHistory.Count > 0 && this.CmdHistoryIndex > 0) {
                    
                    --this.CmdHistoryIndex;
                    
                    this.CommandString = this.CommandHistory.Get(this.CmdHistoryIndex);
                    this.TempCommandStr = this.CommandString;
                    
                }
                
            } else if(Zero.Keyboard.KeyIsPressed(Keys.Down)) {
                
                if(this.CommandHistory.Count > 0 && this.CmdHistoryIndex < this.CommandHistory.Count - 1) {
                    
                    ++this.CmdHistoryIndex;
                    
                    this.CommandString = this.CommandHistory.Get(this.CmdHistoryIndex);
                    this.TempCommandStr = this.CommandString;
                    
                } else if(this.CmdHistoryIndex < this.CommandHistory.Count) {
                    
                    ++this.CmdHistoryIndex;
                    
                    this.CommandString = "";
                    this.TempCommandStr = "";
                    
                }
                
            } else if(Zero.Keyboard.KeyIsPressed(Keys.Tab)) {
                
                if(this.CommandString == "" || this.CycleThroughCmdsAll) {
                    
                    this.CycleThroughCmdsAll = true;
                    
                    if(this.AutocompleteIndex > this.CommandsAll.Count - 1) {
                        this.AutocompleteIndex = 0;
                    }
                    
                    this.CommandString = this.CommandsAll.Get(this.AutocompleteIndex);
                    
                } else {
                    this.CommandString = this.Commands.Get(this.SearchArray(this.Commands, this.TempCommandStr, this.AutocompleteIndex));
                    this.CycleThroughCommands = true;
                    this.CycleThroughCmdsAll = false;
                }
                
                if(this.AutocompleteIndex < this.Commands.Count - 1) {
                    ++this.AutocompleteIndex;
                } else {
                    this.AutocompleteIndex = 0;
                }
                
            }
            
            if(this.CommandString.Count < 75) {
                this.Owner.SpriteText.Text = String.Concatenate(this.CommandString, "|");
            } else {
                this.Owner.SpriteText.Text = String.Concatenate(this.CommandString, "|").SubStringFromRuneIndices(this.CommandString.Count - 74, this.CommandString.Count);
            }
            
        } else if(this.Owner.SpriteText.Text.Count > 0) {
            this.Owner.SpriteText.Text = "";
        }
        
        if(this.CaptureKeys) {
            this.Space.FindObjectByName("TextBoxBG").Sprite.Visible = true;
            this.Space.FindObjectByName("Console").SpriteText.Visible = true;
        } else {
            this.Space.FindObjectByName("TextBoxBG").Sprite.Visible = false;
            this.Space.FindObjectByName("Console").SpriteText.Visible = false;
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.Enter) && !this.CaptureKeys) {
            this.CaptureKeys = true;
        }
        
        // COMMANDS
        if(this.FinalCmd.Count > 0 && this.IsCommandTextBox) {
            
            this.Owner.Commands.CommandFunctions();
            
        }
        
    }
    
    function OnTextTyped(event : KeyboardTextEvent) {
        
        if(this.CaptureKeys) {
            
            // CHECK IF TEXT IS RENDERABLE (IS A LETTER/NUMBER/SYMBOL)
            if(this.IsRenderable(event.Character)) {
                this.CycleThroughCommands = false;
                this.CycleThroughCmdsAll = false;
                var strBuilder = new StringBuilder();
                strBuilder.Write(this.CommandString);
                strBuilder.Write(String.FromChar(event.Character));
                this.CommandString = strBuilder.ToString();
                this.TempCommandStr = this.CommandString;
            }
            
            // CHECK FOR BACKSPACE
            if(event.Character == 8 && this.CommandString.Count > 0) {
                this.CycleThroughCommands = false;
                this.CycleThroughCmdsAll = false;
                this.CommandString = this.CommandString.SubStringFromRuneIndices(0, this.CommandString.Count - 1);
                this.TempCommandStr = this.CommandString;
            }
            
        }
        
    }
    
    function PrintToUIConsole(text : String) {
        
        var maxLength = 75;
        var tmpTxt = "";
        
        if(text.Count > maxLength) {
            for(var i = (Math.Floor(text.Count / maxLength) * maxLength) as Integer; i > 5; i -= maxLength) {
                
                var breakIndex = i;
                
                for(var j = i; j > i - maxLength / 4; --j) {
                    
                    if(String.FromChar(text.Get(j)) == " ") {
                        breakIndex = j + 1;
                        break;
                    }
                    
                    if(j + 1 == i - maxLength / 4) {
                        breakIndex = i - 8;
                        break;
                    }
                    
                }
                
                tmpTxt = text.SubStringFromRuneIndices(breakIndex, text.Count);
                var tmpFrnt = text.SubStringFromRuneIndices(0, breakIndex);
                tmpFrnt = String.Concatenate(tmpFrnt, "\n");
                text = String.Concatenate(tmpFrnt, tmpTxt);
                
            }
        }
        
        text = String.Concatenate("\n", text);
        this.ConsoleLog = String.Concatenate(this.ConsoleLog, text);
        
        var console = this.Space.FindObjectByName(this.ConsoleTextboxName);
        
        console.SpriteText.Text = this.ConsoleLog;
        console.Transform.Translation = Real3(0, console.SpriteText.MeasureText().Y + 0.5, 0);
        
    }
    
    function SearchArray(array : Array[String], str : String, curIndex : Integer) : Integer {
        
        var occurances = 0;
        var startIndex = 0;
        
        for(var i = 0; i < array.Count - 1; ++i) {
            
            if(array.Get(i).StartsWith(str) && occurances == 0) {
                startIndex = i;
            }
            
            if(array.Get(i).StartsWith(str)) {
                ++occurances;
            }
            
        }
        
        var tmpOccur = 0;
        
        for(var i = 0; i < occurances; ++i) {
            
            if(array.Get(tmpOccur).Contains(str) && curIndex <= tmpOccur && tmpOccur < occurances && tmpOccur < array.Count - 1) {
                return tmpOccur;
            } else {
                ++tmpOccur;
            }
            
        }
        
        if(tmpOccur >= occurances - 1 || tmpOccur == 0) {
            this.AutocompleteIndex = startIndex;
            return startIndex;
        }
        
        return -1;
        
    }
    
    function IsRenderable(code : Integer) : Boolean {
        return code >= " "[0] && code <= "~"[0];
    }
    
}
