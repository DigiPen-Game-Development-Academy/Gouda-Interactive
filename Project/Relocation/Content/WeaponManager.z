// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class WeaponManager : ZilchComponent {
    
    // UI SPACE
    var UISpace : Space = null;
    
    // ACTIVE WEAPON
    var ActiveWeapon : Weapon = null;
    
    // WEAPONS (RANGED)
    var WeaponPistol    : Weapon = null;
    var WeaponRevolver  : Weapon = null;
    var WeaponRock      : Weapon = null;
    var WeaponShotgun   : Weapon = null;
    var WeaponBoulder   : Weapon = null;
    var WeaponMinigun   : Weapon = null;
    var WeaponSniper    : Weapon = null;
    var WeaponGouda     : Weapon = null;
    
    // WEAPONS (MELEE)
    var WeaponHand : Weapon = null;
    
    function Initialize(init : CogInitializer) {
        
        // LINK UI SPACE
        this.UISpace = this.LevelSettings.UICreator.UISpace;
        
        // RANGED WEAPONS
        /*this.WeaponPistol = new Weapon(this.Space, "Pistol", true, 0.75, 0.0);
        this.WeaponRevolver = new Weapon(this.Space, "Revolver", true, 1.25, 0.0);
        this.WeaponRock = new Weapon(this.Space, "Rock", true, 0.5, 0.0);
        
        this.WeaponShotgun = new Weapon(this.Space, "Shotgun", true, 1.5, 0.0);
        this.WeaponBoulder = new Weapon(this.Space, "Boulder", true, 1.0, 0.0);
        
        this.WeaponMinigun = new Weapon(this.Space, "Minigun", true, 0.05, 0.0);
        this.WeaponSniper = new Weapon(this.Space, "Sniper", true, 1.75, 0.0);
        this.WeaponGouda = new Weapon(this.Space, "Gouda", true, 1.25, 0.0);
        
        // MELEE WEAPONS
        this.WeaponHand = new Weapon(this.Space, "Hand", false);*/
        
        //Global.Weapons.Push(Global.Items[1]);
        Global.Items.Push(Global.Weapons[1]);
        
        // SET WEAPON TIER
        Global.Weapons[4].SetTier(2);
        Global.Weapons[5].SetTier(2);
        
        Global.Weapons[6].SetTier(3);
        Global.Weapons[7].SetTier(3);
        Global.Weapons[8].SetTier(3);
        
        // SET ACCURACY
        Global.Items[1].SetAccuracy(0.45);
        Global.Items[2].SetAccuracy(0.25);
        Global.Items[3].SetAccuracy(0.75);
        
        Global.Items[4].SetAccuracy(1.6);
        Global.Items[5].SetAccuracy(0.75);
        
        Global.Items[6].SetAccuracy(0.6);
        Global.Items[7].SetAccuracy(0.05);
        Global.Items[8].SetAccuracy(0.25);
        
        // SET AMMO AMOUNT
        this.WeaponPistol.SetMaxAmmoAmount(-1);
        this.WeaponRevolver.SetMaxAmmoAmount(6);
        this.WeaponRock.SetMaxAmmoAmount(1);
        
        this.WeaponShotgun.SetMaxAmmoAmount(12);
        this.WeaponBoulder.SetMaxAmmoAmount(1);
        
        this.WeaponMinigun.SetMaxAmmoAmount(350);
        this.WeaponSniper.SetMaxAmmoAmount(4);
        this.WeaponGouda.SetMaxAmmoAmount(1);
        
        // SET AMMO TYPE
        this.WeaponPistol.SetAmmoType(9);
        this.WeaponRevolver.SetAmmoType(9);
        this.WeaponRock.SetAmmoType(3);
        
        this.WeaponShotgun.SetAmmoType(10);
        this.WeaponBoulder.SetAmmoType(5);
        
        this.WeaponMinigun.SetAmmoType(11);
        this.WeaponSniper.SetAmmoType(13);
        this.WeaponGouda.SetAmmoType(8);
        
        // SET RELOAD TIME
        this.WeaponRock.ReloadTime = 0;
        this.WeaponBoulder.ReloadTime = 0;
        this.WeaponGouda.ReloadTime = 0;
        
        // SET BULLET SPAWN LOCATION
        //this.WeaponPistol.SetBulletSpawnPosition(0.45);
        //this.WeaponRevolver.SetBulletSpawnPosition(0.25);
        //this.WeaponRock.SetBulletSpawnPosition(0.75);
        
        //this.WeaponShotgun.SetBulletSpawnPosition(0.6);
        //this.WeaponBoulder.SetBulletSpawnPosition(0.75);
        
        this.WeaponMinigun.SetBulletSpawnPosition(this.Owner.FindChildByName("EntityGun").Transform.Translation.XY + Real2(0.0, 0.1));
        //this.WeaponSniper.SetBulletSpawnPosition(0.05);
        //this.WeaponGouda.SetBulletSpawnPosition(0.25);
        
        // SET AS SHOTGUN
        this.WeaponShotgun.IsShotgun = true;
        
        // SET ACTIVE WEAPON
        //this.ActiveWeapon = this.WeaponPistol;
        
        // CONNECT LOGIC UPDATE
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        if(!this.UISpace.FindObjectByName("DebugCommand").FindChildByName("TextEntry").TextEntry.CaptureKeys) {
            
            /*if(this.Owner.Inventory.CheckForItemMainHand(0)) {
                this.ActiveWeapon = this.WeaponHand;
            } else if(this.Owner.Inventory.CheckForItemMainHand(1)) {
                this.ActiveWeapon = this.WeaponPistol;
            } else if(this.Owner.Inventory.CheckForItemMainHand(2)) {
                this.ActiveWeapon = this.WeaponRevolver;
            } else if(this.Owner.Inventory.CheckForItemMainHand(3)) {
                this.ActiveWeapon = this.WeaponRock;
            } else if(this.Owner.Inventory.CheckForItemMainHand(4)) {
                this.ActiveWeapon = this.WeaponShotgun;
            } else if(this.Owner.Inventory.CheckForItemMainHand(5)) {
                this.ActiveWeapon = this.WeaponBoulder;
            } else if(this.Owner.Inventory.CheckForItemMainHand(6)) {
                this.ActiveWeapon = this.WeaponMinigun;
            } else if(this.Owner.Inventory.CheckForItemMainHand(7)) {
                this.ActiveWeapon = this.WeaponSniper;
            } else if(this.Owner.Inventory.CheckForItemMainHand(8)) {
                this.ActiveWeapon = this.WeaponGouda;
            } else {
                this.ActiveWeapon = this.WeaponHand;
            }
            
            // UPDATE ACTIVE WEAPON
            this.ActiveWeapon.Update(event.Dt);
            if(this.ActiveWeapon.ItemName != "Hand") {
                this.Owner.FindChildByName("EntityGun").Sprite.Visible = true;
                this.Owner.FindChildByName("EntityGun").Sprite.SpriteSource = SpriteSource.Find(String.Concatenate("Weapon", this.ActiveWeapon.ItemName));
            } else {
                this.Owner.FindChildByName("EntityGun").Sprite.Visible = false;
            }*/
            
        }
        
    }
    
}
