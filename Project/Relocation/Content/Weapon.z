// AUTHOR: HUDSON GREEN
// CONTRIBUTERS: N/A

class Weapon {
    
    var Space : Space;
    
    var ItemName : String = "WeaponUndefined";
    var ItemID : Integer = 0;
    var ItemTier : Integer = 1;
    
    var IsRanged : Boolean = false;
    var IsUnlocked : Boolean = false;
    
    var Cooldown : Real = 0.0;
    var CurrCooldown : Real = 0.0;
    var BatteryLife : Real = 0.0;
    
    var BulletSpeed : Real = 5.0;
    var Accuracy : Real = 0.0;
    
    constructor(space : Space, itemName : String, itemID : Integer, isRanged : Boolean) {
        this.Space = space;
        this.ItemName = itemName;
        this.ItemID = itemID;
        this.IsRanged = isRanged;
        Console.WriteLine("Weapon with name \"`this.ItemName`\" has been created.");
    }
    
    constructor(space : Space, itemName : String, itemID : Integer, isRanged : Boolean, cooldown : Real, batteryLife : Real) {
        this.Space = space;
        this.ItemName = itemName;
        this.ItemID = itemID;
        this.IsRanged = isRanged;
        this.Cooldown = cooldown;
        this.BatteryLife = batteryLife;
        Console.WriteLine("Weapon with name \"`this.ItemName`\" has been created.");
    }
    
    function SetTier(tier : Integer) {
        this.ItemTier = tier;
    }
    
    function SetAccuracy(accuracy : Real) {
        this.Accuracy = accuracy;
    }
    
    function SetBulletSpeed(speed : Real) {
        this.BulletSpeed = speed;
    }
    
    function UseWeapon(currCooldown : Real) {
        
        if(this.IsRanged) {
            
            var rand = Random();
            var accuracy = rand.Range(-this.Accuracy, this.Accuracy);
            
            var bullet = this.Space.CreateAtPosition(Archetype.EntityBullet, this.Space.FindObjectByName("EntityPlayer").Transform.WorldTranslation);
            
            var mousePos = this.Space.FindObjectByName("LevelSettings").CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0.0);
            var playerPos = this.Space.FindObjectByName("EntityPlayer").Transform.WorldTranslation;
            
            var dif = Real2(mousePos.X - playerPos.X, mousePos.Y - playerPos.Y);
            var magnitude = Math.Sqrt(dif.X * dif.X + dif.Y * dif.Y);
            var velocity = Real3(dif.X / magnitude * this.BulletSpeed + accuracy, dif.Y / magnitude * this.BulletSpeed + accuracy, 0.0);
            
            bullet.RigidBody.Velocity = velocity;
            
        } else {
            
        }
        
    }
    
    function UpdateWeapon(dt : Real) {
        
        if(this.CurrCooldown <= 0.0) {
            if(Zero.Mouse.IsButtonDown(MouseButtons.Left)) {
                this.CurrCooldown = this.Cooldown;
                this.UseWeapon(this.Cooldown);
            }
        } else {
            this.CurrCooldown -= dt;
        }
    }
    
}

class WeaponManager : ZilchComponent {
    
    // ACTIVE WEAPON
    var ActiveWeapon : Weapon = null;
    
    // WEAPONS (RANGED)
    var WeaponPistol    : Weapon;
    var WeaponRevolver  : Weapon;
    var WeaponRock      : Weapon;
    var WeaponShotgun   : Weapon;
    var WeaponBoulder   : Weapon;
    var WeaponMinigun   : Weapon;
    var WeaponSniper    : Weapon;
    var WeaponGouda     : Weapon;
    
    function Initialize(init : CogInitializer) {
        
        // RANGED WEAPONS
        this.WeaponPistol = new Weapon(this.Space, "Pistol", 0, true, 0.75, 0.0);
        this.WeaponRevolver = new Weapon(this.Space, "Revolver", 1, true, 1.25, 0.0);
        this.WeaponRock = new Weapon(this.Space, "Rock", 2, true, 0.5, 0.0);
        
        this.WeaponShotgun = new Weapon(this.Space, "Shotgun", 3, true, 1.5, 0.0);
        this.WeaponBoulder = new Weapon(this.Space, "Boulder", 4, true, 1.0, 0.0);
        
        this.WeaponMinigun = new Weapon(this.Space, "Minigun", 5, true, 0.1, 0.0);
        this.WeaponSniper = new Weapon(this.Space, "Sniper Rifle", 6, true, 1.75, 0.0);
        this.WeaponGouda = new Weapon(this.Space, "Gouda Cheese", 7, true, 1.25, 0.0);
        
        // SET WEAPON TIER
        this.WeaponShotgun.SetTier(2);
        this.WeaponBoulder.SetTier(2);
        
        this.WeaponMinigun.SetTier(3);
        this.WeaponSniper.SetTier(3);
        this.WeaponGouda.SetTier(3);
        
        // SET ACCURACY
        this.WeaponPistol.SetAccuracy(0.45);
        this.WeaponRevolver.SetAccuracy(0.25);
        this.WeaponRock.SetAccuracy(0.75);
        
        this.WeaponShotgun.SetAccuracy(0.6);
        this.WeaponBoulder.SetAccuracy(0.75);
        
        this.WeaponMinigun.SetAccuracy(0.6);
        this.WeaponSniper.SetAccuracy(0.05);
        this.WeaponGouda.SetAccuracy(0.25);
        
        // SET ACTIVE WEAPON
        this.ActiveWeapon = this.WeaponPistol;
        
        // CONNECT LOGIC UPDATE
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
    }
    
    function OnLogicUpdate(event : UpdateEvent) {
        
        if(Zero.Keyboard.KeyIsPressed(Keys.One)) {
            this.ActiveWeapon = this.WeaponPistol;
        } else if(Zero.Keyboard.KeyIsPressed(Keys.Two)) {
            this.ActiveWeapon = this.WeaponRevolver;
        } else if(Zero.Keyboard.KeyIsPressed(Keys.Three)) {
            this.ActiveWeapon = this.WeaponRock;
        } else if(Zero.Keyboard.KeyIsPressed(Keys.Four)) {
            this.ActiveWeapon = this.WeaponShotgun;
        } else if(Zero.Keyboard.KeyIsPressed(Keys.Five)) {
            this.ActiveWeapon = this.WeaponBoulder;
        } else if(Zero.Keyboard.KeyIsPressed(Keys.Six)) {
            this.ActiveWeapon = this.WeaponMinigun;
        } else if(Zero.Keyboard.KeyIsPressed(Keys.Seven)) {
            this.ActiveWeapon = this.WeaponSniper;
        } else if(Zero.Keyboard.KeyIsPressed(Keys.Eight)) {
            this.ActiveWeapon = this.WeaponGouda;
        }
        
        // UPDATE ACTIVE WEAPON
        this.ActiveWeapon.UpdateWeapon(event.Dt);
        
    }
    
}
