// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class Weapon : Item {
    
    var Space : Space;
    
    var AmmoTypeID : Integer = 0;
    var ItemTier : Integer = 1;
    
    var MaxAmmo : Integer = -1;
    var CurrentAmmo : Integer = -1;
    
    var IsRanged : Boolean = false;
    var IsShotgun : Boolean = false;
    var IsLoaded : Boolean = true;
    
    var Cooldown : Real = 0.0;
    var CurrCooldown : Real = 0.0;
    var BatteryLife : Real = 0.0;
    var ReloadTime : Real = 3.0;
    
    var BulletSpeed : Real = 5.0;
    var Accuracy : Real = 0.0;
    
    var BulletSpawnLocation : Real3 = Real3(0.2, 0.0, 0.0);
    
    constructor(itemName : String, space : Space, isRanged : Boolean) : base(itemName) {
        
        this.ItemName = itemName;
        this.ItemRecognizableNameBase = String.Concatenate(String.Concatenate("item.", itemName.SubStringFromRuneIndices(4, itemName.Count)), ".name");
        this.ItemRecognizableName = this.ItemRecognizableNameBase;
        this.Space = space;
        this.IsRanged = isRanged;
        
        this.Sprite = SpriteSource.Find(this.ItemName);
        
    }
    
    constructor(itemName : String, useNameAsSpriteSource : Boolean, space : Space, isRanged : Boolean, cooldown : Real, batteryLife : Real) : base(itemName, useNameAsSpriteSource) {
        
        this.ItemName = itemName;
        this.ItemRecognizableNameBase = String.Concatenate(String.Concatenate("item.", itemName.SubStringFromRuneIndices(4, itemName.Count)), ".name");
        this.ItemRecognizableName = this.ItemRecognizableNameBase;
        this.Space = space;
        this.IsRanged = isRanged;
        this.Cooldown = cooldown;
        this.BatteryLife = batteryLife;
        
        if(useNameAsSpriteSource) {
            this.Sprite = SpriteSource.Find(this.ItemName);
        }
        
    }
    
    /*constructor(space : Space, itemName : String, isRanged : Boolean) : base(itemName, false) {
        this.Space = space;
        this.ItemName = itemName;
        this.IsRanged = isRanged;
        Console.WriteLine("Weapon with name \"`this.ItemName`\" has been created.");
    }
    
    constructor(space : Space, itemName : String, isRanged : Boolean, cooldown : Real, batteryLife : Real) : base(itemName, false) {
        this.Space = space;
        this.ItemName = itemName;
        this.IsRanged = isRanged;
        this.Cooldown = cooldown;
        this.BatteryLife = batteryLife;
        Console.WriteLine("Weapon with name \"`this.ItemName`\" has been created.");
    }*/
    
    function SetTier(tier : Integer) {
        this.ItemTier = tier;
    }
    
    function SetAccuracy(accuracy : Real) {
        this.Accuracy = accuracy;
    }
    
    function SetBulletSpeed(speed : Real) {
        this.BulletSpeed = speed;
    }
    
    function SetBulletSpawnPosition(pos : Real2) {
        this.BulletSpawnLocation = Real3(pos.X, pos.Y, -0.05);
    }
    
    function SetMaxAmmoAmount(amount : Integer) {
        this.MaxAmmo = amount;
        this.CurrentAmmo = amount;
    }
    
    function SetAmmoType(type : Integer) {
        this.AmmoTypeID = type;
    }
    
    function RefillAmmo() {
        this.CurrentAmmo = this.MaxAmmo;
    }
    
    function UseWeapon() {
        
        if(this.IsRanged) {
            
            var spawnAmt = 1;
            
            if(this.IsShotgun) {
                spawnAmt = 5;
            }
            
            for(var i = 0; i < spawnAmt; ++i) {
                
                var rand = Random();
                
                var accuracy = rand.Range(-this.Accuracy / 2, this.Accuracy / 2);
                
                var bullet = this.Space.CreateAtPosition(Archetype.EntityBullet, this.Space.FindObjectByName("EntityGun").Transform.WorldTranslation + this.BulletSpawnLocation);
                
                var mousePos = this.Space.FindObjectByName("LevelSettings").CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0.0);
                var gunPos = this.Space.FindObjectByName("EntityGun").Transform.WorldTranslation;
                
                var dif = Real2(mousePos.X - gunPos.X, mousePos.Y - gunPos.Y);
                var magnitude = Math.Sqrt(dif.X * dif.X + dif.Y * dif.Y);
                var velocity = Real3(dif.X / magnitude * this.BulletSpeed + accuracy, dif.Y / magnitude * this.BulletSpeed + accuracy, 0.0);
                
                bullet.RigidBody.Velocity = velocity;
                
            }
            
            if(this.MaxAmmo != -1) {
                --this.CurrentAmmo;
            }
            
        } else {
            // MELEE
        }
        
    }
    
    function Update(dt : Real) {
        
        //var uiSpace = this.Space.FindObjectByName("LevelSettings").UICreator.UISpace;
        //uiSpace.FindObjectByName("Slot20").Sprite.SpriteSource = SpriteSource.Find(String.Concatenate("Item", this.ItemName));
        //uiSpace.FindObjectByName("Slot20").Sprite.StartFrame = 1;
        
        if(this.CurrCooldown <= 0.0) {
            if(Zero.Mouse.IsButtonDown(MouseButtons.Left) && (this.CurrentAmmo > 0 || this.CurrentAmmo == -1)) {
                this.CurrCooldown = this.Cooldown;
                this.UseWeapon();
            } else if(Zero.Mouse.IsButtonDown(MouseButtons.Left) && this.CurrentAmmo <= 0 && this.CurrentAmmo != -1) {
                
                // PLAY OUT OF AMMO SOUND
                
                if(this.Space.FindObjectByName("EntityPlayer").Inventory != null) {
                    
                    var inv = this.Space.FindObjectByName("EntityPlayer").Inventory;
                    
                    if(inv.CheckForItem(this.AmmoTypeID)) {
                        this.RefillAmmo();
                        inv.RemoveItem(this.AmmoTypeID);
                        this.CurrCooldown = this.ReloadTime;
                        
                        // PLAY 3 SECOND RELOADING SOUND
                    }
                    
                }
                
            }
        } else {
            this.CurrCooldown -= dt;
        }
    }
    
}