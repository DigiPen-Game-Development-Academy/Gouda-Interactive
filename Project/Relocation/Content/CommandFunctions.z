// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class Commands : ZilchComponent {
    
    [Dependency] var TextEntry : TextEntry = null;
    
    function CreateCommands() {
        
        this.Owner.TextEntry.Commands = new Array[String]();
        
        // PUSH COMMANDS
        this.Owner.TextEntry.Commands.Push("clear");
        this.Owner.TextEntry.Commands.Push("cls");
        this.Owner.TextEntry.Commands.Push("color");
        this.Owner.TextEntry.Commands.Push("debug");
        this.Owner.TextEntry.Commands.Push("echo");
        this.Owner.TextEntry.Commands.Push("give");
        this.Owner.TextEntry.Commands.Push("god");
        this.Owner.TextEntry.Commands.Push("help");
        this.Owner.TextEntry.Commands.Push("noclip");
        this.Owner.TextEntry.Commands.Push("playsound");
        this.Owner.TextEntry.Commands.Push("spawn");
        
    }
    
    function CommandFunctions() {
        
        if(this.CheckForCommand("debug", false, "", "") != -1) {
            this.CommandDebug();
        } else if(this.CheckForCommand("give", false, "", "") != -1) {
            this.CommandGive();
        } else if(this.CheckForCommand("god", false, "", "") != -1) {
            this.CommandGod();
        } else if(this.CheckForCommand("help", false, "", "?") != -1) {
            this.CommandHelp();
        } else if(this.CheckForCommand("clear", false, "", "cls") != -1) {
            this.CommandClear();
        } else if(this.CheckForCommand("color", false, "", "") != -1) {
            this.CommandColor();
        } else if(this.CheckForCommand("echo", false, "", "") != -1) {
            this.CommandEcho();
        } else if(this.CheckForCommand("playsound", false, "", "") != -1) {
            this.CommandPlaySound();
        } else if(this.CheckForCommand("spawn", false, "", "") != -1) {
            this.CommandSpawn();
        } else if(this.CheckForCommand("noclip", false, "", "") != -1) {
            this.CommandNoclip();
        } else {
            var baseCommand = this.TextEntry.GetArgument(0, this.TextEntry.FinalCmd);
            this.TextEntry.PrintToUIConsole("Error: The command \"`baseCommand`\" does not exist. Type help for a list of commands.");
        }
        
        this.TextEntry.FinalCmd = "";
        
    }
    
    function CheckForCommand(cmd : String, args : Boolean, usage : String, cmdAlias : String) : Integer {
        
        if(this.TextEntry.FinalCmd == cmd || this.TextEntry.FinalCmd.StartsWith(String.Concatenate(cmd, " ")) || (this.TextEntry.FinalCmd == cmdAlias || this.TextEntry.FinalCmd.StartsWith(String.Concatenate(cmdAlias, " ")) && cmdAlias != "")) {
            
            if(args && (this.TextEntry.FinalCmd.EndsWith(cmd) || this.TextEntry.FinalCmd.EndsWith(String.Concatenate(cmd, " ")))) {
                this.TextEntry.PrintToUIConsole(String.Concatenate("Error: Invalid arguments. Usage: ", usage));
                return 0;
            } else {
                return 1;
            }
            
        }
        
        return -1;
        
    }
    
    function CommandDebug() {
        
        if(this.TextEntry.FinalCmd.EndsWith("true")) {
            
            this.TextEntry.DebugEnabled = true;
            Relocation.DebugMode = this.TextEntry.DebugEnabled;
            this.TextEntry.PrintToUIConsole("Debug: `this.TextEntry.DebugEnabled`");
            
        } else if(this.TextEntry.FinalCmd.EndsWith("false")) {
            
            this.TextEntry.DebugEnabled = false;
            Relocation.DebugMode = this.TextEntry.DebugEnabled;
            this.TextEntry.PrintToUIConsole("Debug: `this.TextEntry.DebugEnabled`");
            
        } else if(this.TextEntry.FinalCmd == "debug" || this.TextEntry.FinalCmd == "debug ") {
            
            this.TextEntry.DebugEnabled = !this.TextEntry.DebugEnabled;
            Relocation.DebugMode = this.TextEntry.DebugEnabled;
            this.TextEntry.PrintToUIConsole("Debug: `this.TextEntry.DebugEnabled`");
            
        } else {
            this.TextEntry.PrintToUIConsole("Error: Invalid arguments. Usage: debug [true/false]");
        }
        
    }
    
    function CommandGive() {
        
        if(this.CheckForCommand("give", true, "give <itemID> [quantity]", "") != 0) {
            if(Relocation.Space.FindObjectByName("EntityPlayer") != null) {
                
                var quantity = this.TextEntry.GetArgument(2, this.TextEntry.FinalCmd);
                
                if(quantity == "") {
                    quantity = "1";
                }
                
                Relocation.Space.FindObjectByName("EntityPlayer").Inventory.GiveItemWithAmount(
                    Integer.Parse(this.TextEntry.GetArgument(1, this.TextEntry.FinalCmd)),
                    true,
                    Integer.Parse(quantity)
                );
                
            }
        }
        
    }
    
    function CommandGod() {
        
        if(this.TextEntry.FinalCmd.EndsWith("true")) {
            
            this.TextEntry.GodMode = true;
            this.TextEntry.PrintToUIConsole("God Mode: `this.TextEntry.GodMode`");
            
        } else if(this.TextEntry.FinalCmd.EndsWith("false")) {
            
            this.TextEntry.GodMode = false;
            this.TextEntry.PrintToUIConsole("God Mode: `this.TextEntry.GodMode`");
            
        } else if(this.TextEntry.FinalCmd == "god" || this.TextEntry.FinalCmd == "god ") {
            
            this.TextEntry.GodMode = !this.TextEntry.GodMode;
            this.TextEntry.PrintToUIConsole("God Mode: `this.TextEntry.GodMode`");
        } else {
            this.TextEntry.PrintToUIConsole("Error: Invalid arguments. Usage: god [true/false]");
        }
        
        if(Relocation.Space != null && Relocation.Space.FindObjectByName("EntityPlayer") != null) {
            Relocation.Space.FindObjectByName("EntityPlayer").Health.IsInvincible = this.TextEntry.GodMode;
        }
        
    }
    
    function CommandHelp() {
        
        this.TextEntry.PrintToUIConsole("---- Help ----");
        this.TextEntry.PrintToUIConsole("clear - (Alias: cls) - Clears the screen");
        this.TextEntry.PrintToUIConsole("color <color> - Changes console color");
        this.TextEntry.PrintToUIConsole("debug [true/false] - Enables/Disables debug mode");
        this.TextEntry.PrintToUIConsole("echo <string> - Prints to console screen");
        this.TextEntry.PrintToUIConsole("give <itemID> [quantity] - Gives player item");
        this.TextEntry.PrintToUIConsole("god [true/false] - Makes player invincible");
        this.TextEntry.PrintToUIConsole("help - (Alias: ?) - Shows this help screen");
        this.TextEntry.PrintToUIConsole("playsound <SoundCue> - Plays sound cue (Will crash if sound does not exist)");
        this.TextEntry.PrintToUIConsole("spawn <entity> - Spawns entity (Spawning certain entities may crash the game. Will also crash if entity does not exist)");
        
    }
    
    function CommandClear() {
        
        this.TextEntry.ConsoleLog = "";
        this.TextEntry.PrintToUIConsole("Console cleared.");
        
    }
    
    function CommandColor() {
        
        if(this.CheckForCommand("color", true, "color <0-255> <0-255> <0-255>", "") != 0) {
            
            var colorR = this.TextEntry.GetArgument(1, this.TextEntry.FinalCmd);
            var colorG = this.TextEntry.GetArgument(2, this.TextEntry.FinalCmd);
            var colorB = this.TextEntry.GetArgument(3, this.TextEntry.FinalCmd);
            var finalColor = Real3(Real.Parse(colorR) / 255, Real.Parse(colorG) / 255, Real.Parse(colorB) / 255);
            
            if(colorR.ToLower() == "off")
                finalColor = Real3(1.0);
            
            this.Owner.Parent.FindChildByName(this.TextEntry.ConsoleTextboxName).SpriteText.Color = Real4(finalColor, 1.0);
            
            this.TextEntry.PrintToUIConsole("Changing color to `finalColor`.");
            
        }
        
    }
    
    function CommandEcho() {
        
        if(this.CheckForCommand("echo", true, "echo <string>", "") != 0) {
            this.TextEntry.PrintToUIConsole("`this.TextEntry.FinalCmd.SubStringFromRuneIndices(5, this.TextEntry.FinalCmd.Count)`");
        }
        
    }
    
    function CommandPlaySound() {
        
        if(this.CheckForCommand("playsound", true, "playsound <SoundCue>", "") != 0) {
            this.TextEntry.PrintToUIConsole("Playing sound \"`this.TextEntry.FinalCmd.SubStringFromRuneIndices(10, this.TextEntry.FinalCmd.Count)`\"");
            this.TextEntry.Space.SoundSpace.PlayCue(SoundCue.Find("`this.TextEntry.FinalCmd.SubStringFromRuneIndices(10, this.TextEntry.FinalCmd.Count)`"));
        }
        
    }
    
    function CommandSpawn() {
        
        if(this.CheckForCommand("spawn", true, "spawn <entity>", "") != 0 && Relocation.Space != null) {
            var mousePos = Relocation.Space.FindObjectByName("LevelSettings").CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0.0);
            Relocation.Space.CreateAtPosition(Archetype.Find("`this.TextEntry.FinalCmd.SubStringFromRuneIndices(6, this.TextEntry.FinalCmd.Count)`"), mousePos);
        }
        
    }
    
    function CommandNoclip() {
        
        if(this.TextEntry.FinalCmd.EndsWith("true")) {
            
            this.TextEntry.PrintToUIConsole("Noclip: `true`");
            
        } else if(this.TextEntry.FinalCmd.EndsWith("false")) {
            
            this.TextEntry.PrintToUIConsole("Noclip: `false`");
            
        } else if(this.TextEntry.FinalCmd == "noclip" || this.TextEntry.FinalCmd == "noclip ") {
            
            this.TextEntry.PrintToUIConsole("Noclip: toggled");
            
        } else {
            this.TextEntry.PrintToUIConsole("Error: Invalid arguments. Usage: noclip [true/false]");
        }
        
    }
    
}
