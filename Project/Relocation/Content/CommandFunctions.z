// AUTHOR: HUDSON GREEN
// CONTRIBUTORS: N/A

class Commands : ZilchComponent {
    
    [Dependency] var DebugCmd : TextEntry = null;
    
    function CreateCommands() {
        
        this.Owner.TextEntry.Commands = new Array[String]();
        this.Owner.TextEntry.CommandsAll = new Array[String]();
        
        // PUSH COMMANDS
        this.Owner.TextEntry.Commands.Push("clear");
        this.Owner.TextEntry.CommandsAll.Push("clear");
        this.Owner.TextEntry.Commands.Push("cls");
        this.Owner.TextEntry.CommandsAll.Push("cls");
        this.Owner.TextEntry.Commands.Push("color");
        this.Owner.TextEntry.CommandsAll.Push("color");
        this.Owner.TextEntry.Commands.Push("debug");
        this.Owner.TextEntry.CommandsAll.Push("debug");
        //this.Owner.TextEntry.Commands.Push("de");
        this.Owner.TextEntry.CommandsAll.Push("echo");
        this.Owner.TextEntry.Commands.Push("echo");
        this.Owner.TextEntry.Commands.Push("help");
        this.Owner.TextEntry.CommandsAll.Push("help");
        //this.Owner.TextEntry.Commands.Push("he");
        this.Owner.TextEntry.CommandsAll.Push("playsound");
        this.Owner.TextEntry.Commands.Push("playsound");
        //this.Owner.TextEntry.Commands.Push("pl");
        this.Owner.TextEntry.CommandsAll.Push("spawn");
        this.Owner.TextEntry.Commands.Push("spawn");
        this.Owner.TextEntry.Commands.Push("sp");
        
    }
    
    function CommandFunctions() {
        
        if(this.DebugCmd.FinalCmd.StartsWith("debug")) {
            if(this.DebugCmd.FinalCmd.EndsWith("true")) {
                this.DebugCmd.DebugEnabled = true;
                this.DebugCmd.PrintToUIConsole("Debug: `this.DebugCmd.DebugEnabled`");
            } else if(this.DebugCmd.FinalCmd.EndsWith("false")) {
                this.DebugCmd.DebugEnabled = false;
                this.DebugCmd.PrintToUIConsole("Debug: `this.DebugCmd.DebugEnabled`");
            } else if(this.DebugCmd.FinalCmd == "debug" || this.DebugCmd.FinalCmd == "debug ") {
                this.DebugCmd.DebugEnabled = !this.DebugCmd.DebugEnabled;
                this.DebugCmd.PrintToUIConsole("Debug: `this.DebugCmd.DebugEnabled`");
            } else {
                this.DebugCmd.PrintToUIConsole("Error: Invalid arguments. Usage: debug [true/false]");
            }
        } else if(this.DebugCmd.FinalCmd == "help" || this.DebugCmd.FinalCmd == "?" || this.DebugCmd.FinalCmd.StartsWith("help ") || this.DebugCmd.FinalCmd.StartsWith("? ")) {
            this.DebugCmd.PrintToUIConsole("---- Help ----");
            this.DebugCmd.PrintToUIConsole("clear - (Alias: cls) - Clears the screen");
            this.DebugCmd.PrintToUIConsole("debug [true/false] - Enables/Disables debug mode");
            this.DebugCmd.PrintToUIConsole("echo <string> - Prints to console screen");
            this.DebugCmd.PrintToUIConsole("help - (Alias: ?) - Shows this help screen");
            this.DebugCmd.PrintToUIConsole("playsound <SoundCue> - Plays sound cue (will crash if sound does not exist)");
            this.DebugCmd.PrintToUIConsole("spawn <entity> - Spawns entity (spawning certain entities may crash the game. will also crash if entity does not exist)");
        } else if(this.DebugCmd.FinalCmd =="clear" || this.DebugCmd.FinalCmd == "cls" || this.DebugCmd.FinalCmd.StartsWith("clear ") || this.DebugCmd.FinalCmd.StartsWith("cls ")) {
            this.DebugCmd.ConsoleLog = "";
            this.DebugCmd.PrintToUIConsole("Console cleared.");
        } else if(this.DebugCmd.FinalCmd == "echo" || this.DebugCmd.FinalCmd.StartsWith("echo ")) {
            if(this.DebugCmd.FinalCmd.EndsWith("echo") || this.DebugCmd.FinalCmd.EndsWith("echo ")) {
                this.DebugCmd.PrintToUIConsole("Error: Invalid arguments. Usage: echo <string>");
            } else {
                this.DebugCmd.PrintToUIConsole("`this.DebugCmd.FinalCmd.SubStringFromRuneIndices(5, this.DebugCmd.FinalCmd.Count)`");
            }
        } else if(this.DebugCmd.FinalCmd == "playsound" || this.DebugCmd.FinalCmd.StartsWith("playsound ")) {
            if(this.DebugCmd.FinalCmd.EndsWith("playsound") || this.DebugCmd.FinalCmd.EndsWith("playsound ")) {
                this.DebugCmd.PrintToUIConsole("Error: Invalid arguments. Usage: playsound <SoundCue>");
            } else if(SoundCue.Find("`this.DebugCmd.FinalCmd.SubStringFromRuneIndices(10, this.DebugCmd.FinalCmd.Count)`") != null) {
                this.DebugCmd.PrintToUIConsole("Playing sound \"`this.DebugCmd.FinalCmd.SubStringFromRuneIndices(10, this.DebugCmd.FinalCmd.Count)`\"");
                this.DebugCmd.Space.SoundSpace.PlayCue(SoundCue.Find("`this.DebugCmd.FinalCmd.SubStringFromRuneIndices(10, this.DebugCmd.FinalCmd.Count)`"));
            }
        } else if(this.DebugCmd.FinalCmd == "spawn" || this.DebugCmd.FinalCmd.StartsWith("spawn ")) {
            if(this.DebugCmd.FinalCmd.EndsWith("spawn") || this.DebugCmd.FinalCmd.EndsWith("spawn ")) {
                this.DebugCmd.PrintToUIConsole("Error: Invalid arguments. Usage: spawn <entity>");
            } else {
                this.Space.CreateAtPosition(Archetype.Find("`this.DebugCmd.FinalCmd.SubStringFromRuneIndices(6, this.DebugCmd.FinalCmd.Count)`"), this.Owner.Transform.WorldTranslation);
            }
        } else {
            this.DebugCmd.PrintToUIConsole("Error: The command \"`this.DebugCmd.FinalCmd`\" does not exist. Type help for a list of commands.");
        }
        
        this.DebugCmd.FinalCmd = "";
        
    }
    
}
